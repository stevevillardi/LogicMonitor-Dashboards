{
  "openapi": "3.0.1",
  "info": {
    "title": "LogicMonitor REST API",
    "description": "LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "3.0.0"
  },
  "externalDocs": {
    "description": "LogicMonitor Support Docs",
    "url": "https://www.logicmonitor.com/support/rest-api-developers-guide/"
  },
  "servers": [
    {
      "url": "https://{customerName}.logicmonitor.com/santaba/rest",
      "variables": {
        "customerName": {
          "default": "example",
          "description": "subdomain of the customer's LogicMonitor account"
        }
      }
    }
  ],
  "tags": [
    {
      "name": "Access Group"
    },
    {
      "name": "Alert Rules"
    },
    {
      "name": "Alerts"
    },
    {
      "name": "API Tokens"
    },
    {
      "name": "ApiPerfStats"
    },
    {
      "name": "AppliesToFunctions"
    },
    {
      "name": "Audit Logs"
    },
    {
      "name": "Collector Groups"
    },
    {
      "name": "Collectors"
    },
    {
      "name": "CollectorVersions"
    },
    {
      "name": "ConfigSources"
    },
    {
      "name": "Dashboard Groups"
    },
    {
      "name": "Dashboards"
    },
    {
      "name": "Data"
    },
    {
      "name": "Datasource Instances"
    },
    {
      "name": "Datasources"
    },
    {
      "name": "Debug"
    },
    {
      "name": "Delta"
    },
    {
      "name": "Device Groups"
    },
    {
      "name": "Devices"
    },
    {
      "name": "Escalation Chains"
    },
    {
      "name": "EventSources"
    },
    {
      "name": "IntegrationAuditLogs"
    },
    {
      "name": "Metrics"
    },
    {
      "name": "Netscans"
    },
    {
      "name": "Ops Notes"
    },
    {
      "name": "Recipient Groups"
    },
    {
      "name": "Report"
    },
    {
      "name": "Report Groups"
    },
    {
      "name": "Roles"
    },
    {
      "name": "SDTs"
    },
    {
      "name": "Thresholds"
    },
    {
      "name": "userdata"
    },
    {
      "name": "Users"
    },
    {
      "name": "Website Groups"
    },
    {
      "name": "Websites"
    },
    {
      "name": "Widgets"
    }
  ],
  "paths": {
    "/device/devices/{deviceId}/devicedatasources": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "get device datasource list ",
        "operationId": "getDeviceDatasourceList",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceDatasourcePaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/setting/collector/collectors/versions": {
      "get": {
        "tags": [
          "CollectorVersions"
        ],
        "summary": "get collector version list",
        "operationId": "getCollectorVersionList",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectorVersionPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/device/groups/{id}/devices": {
      "get": {
        "tags": [
          "Device Groups"
        ],
        "summary": "get immediate devices under group",
        "operationId": "getImmediateDeviceListByDeviceGroupId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicePaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/device/devices/{deviceId}/devicedatasources/{hdsId}/instances/{instanceId}/config": {
      "get": {
        "tags": [
          "Datasource Instances"
        ],
        "summary": "get detailed config information for the instance",
        "operationId": "getDeviceConfigSourceConfigList",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "hdsId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "instanceId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceDatasourceInstanceConfigPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/setting/eventsources": {
      "get": {
        "tags": [
          "EventSources"
        ],
        "summary": "get eventSource list",
        "operationId": "getEventSourceList",
        "parameters": [
          {
            "name": "format",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "json"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventSourcePaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/device/devices": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "get device list",
        "operationId": "getDeviceList",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "end",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "netflowFilter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicePaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Devices"
        ],
        "summary": "add a new device",
        "operationId": "addDevice",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "end",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "netflowFilter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "addFromWizard",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Device"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Device"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/alert/alerts/{id}": {
      "get": {
        "tags": [
          "Alerts"
        ],
        "summary": "get alert",
        "operationId": "getAlertById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "needMessage",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "customColumns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Alert"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/device/devices/{id}/alerts": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "get alerts",
        "operationId": "getAlertListByDeviceId",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "end",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "netflowFilter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "needMessage",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "customColumns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bound",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "instances"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/device/devices/{id}/scheduleAutoDiscovery": {
      "post": {
        "tags": [
          "Devices"
        ],
        "summary": "schedule active discovery for a device",
        "operationId": "scheduleAutoDiscoveryByDeviceId",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "end",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "netflowFilter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/alert/alerts": {
      "get": {
        "tags": [
          "Alerts"
        ],
        "summary": "get alert list",
        "operationId": "getAlertList",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertListPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/setting/accessgroup/{id}": {
      "get": {
        "tags": [
          "Access Group"
        ],
        "summary": "Get access group by id",
        "operationId": "getAccessGroupById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessGroup"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Access Group"
        ],
        "summary": "Update access group",
        "operationId": "updateAccessGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessGroup"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Access Group"
        ],
        "summary": "Delete access group",
        "operationId": "deleteAccessGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Access Group"
        ],
        "summary": "Update access group",
        "operationId": "patchAccessGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessGroup"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/setting/opsnotes": {
      "get": {
        "tags": [
          "Ops Notes"
        ],
        "summary": "get opsnote list",
        "operationId": "getOpsNoteList",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter the response based on tags, createdBy, happenedOn, monitorObjectGroups, monitorObjectNames, or _all field values",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpsNotePaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Ops Notes"
        ],
        "summary": "add opsnote",
        "operationId": "addOpsNote",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OpsNote"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpsNote"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/website/websites/{id}/historysdts": {
      "get": {
        "tags": [
          "Websites"
        ],
        "summary": "get SDT history for the website (Response may contain extra fields depending upon the type of SDT)",
        "operationId": "getSDTHistoryByWebsiteId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebsiteSDTHistoryPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/setting/datasources/{dsId}/ographs": {
      "get": {
        "tags": [
          "Datasources"
        ],
        "summary": "get datasource overview graph list",
        "operationId": "getDataSourceOverviewGraphList",
        "parameters": [
          {
            "name": "dsId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasourceOverviewGraphPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/device/devices/{id}/historysdts": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "get SDT history for the device",
        "operationId": "getSDTHistoryByDeviceId",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "end",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "netflowFilter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceSDTHistoryPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/device/groups/{deviceGroupId}/datasources": {
      "get": {
        "tags": [
          "Device Groups"
        ],
        "summary": "get device group datasource list",
        "operationId": "getDeviceGroupDatasourceList",
        "parameters": [
          {
            "name": "deviceGroupId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "includeDisabledDataSourceWithoutInstance",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceGroupDatasourcePaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/azure/functions/verifyStorageAccountsPermissions": {
      "post": {
        "tags": [
          "Device Groups"
        ],
        "summary": "view storage accounts",
        "operationId": "verifyStorageAccountsPermissions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestAzureStorageAccountVerify"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/device/devices/{deviceId}/devicedatasources/{deviceDsId}/groups": {
      "get": {
        "tags": [
          "Datasource Instances"
        ],
        "summary": "get device datasource instance group list ",
        "operationId": "getDeviceDatasourceInstanceGroupList",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "deviceDsId",
            "in": "path",
            "description": "The device-datasource ID you'd like to add an instance group for",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceDatasourceInstanceGroupPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Datasource Instances"
        ],
        "summary": "add device datasource instance group ",
        "operationId": "addDeviceDatasourceInstanceGroup",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "deviceDsId",
            "in": "path",
            "description": "The device-datasource ID you'd like to add an instance group for",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceDataSourceInstanceGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceDataSourceInstanceGroup"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/setting/alert/chains": {
      "get": {
        "tags": [
          "Escalation Chains"
        ],
        "summary": "get escalation chain list",
        "operationId": "getEscalationChainList",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EscalationChainPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Escalation Chains"
        ],
        "summary": "add escalation chain",
        "operationId": "addEscalationChain",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EscalatingChain"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EscalatingChain"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/setting/functions/{id}": {
      "get": {
        "tags": [
          "AppliesToFunctions"
        ],
        "summary": "get applies to function",
        "operationId": "getAppliesToFunctionById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppliesToFunction"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "AppliesToFunctions"
        ],
        "summary": "update applies to function",
        "operationId": "updateAppliesToFunction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ignoreReference",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppliesToFunction"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppliesToFunction"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "patch": {
        "tags": [
          "AppliesToFunctions"
        ],
        "summary": "update applies to function",
        "operationId": "patchAppliesToFunction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ignoreReference",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppliesToFunction"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppliesToFunction"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/device/devices/delta": {
      "get": {
        "tags": [
          "Delta"
        ],
        "summary": "Get filter matched devices with new deltaId",
        "operationId": "getDeltaIdWithDevices",
        "parameters": [
          {
            "name": "deltaId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceDeltaPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/aws/externalId": {
      "get": {
        "tags": [
          "Device Groups"
        ],
        "summary": "Get AWS external ID",
        "operationId": "getAwsExternalId",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AwsExternalId"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/device/devices/delta/{deltaId}": {
      "get": {
        "tags": [
          "Delta"
        ],
        "summary": "Get delta devices using deltaId",
        "operationId": "getDeltaDevices",
        "parameters": [
          {
            "name": "deltaId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\w+",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceDeltaPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/device/groups/{gid}/properties": {
      "get": {
        "tags": [
          "Device Groups"
        ],
        "summary": "get device group properties",
        "operationId": "getDeviceGroupPropertyList",
        "parameters": [
          {
            "name": "gid",
            "in": "path",
            "description": "group ID",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Device Groups"
        ],
        "summary": "add device group property",
        "operationId": "addDeviceGroupProperty",
        "parameters": [
          {
            "name": "gid",
            "in": "path",
            "description": "group ID",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityProperty"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityProperty"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/report/reports": {
      "get": {
        "tags": [
          "Report"
        ],
        "summary": "get report list",
        "operationId": "getReportList",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Report"
        ],
        "summary": "add report",
        "operationId": "addReport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportBase"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportBase"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/setting/collector/collectors": {
      "get": {
        "tags": [
          "Collectors"
        ],
        "summary": "get collector list",
        "operationId": "getCollectorList",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectorPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Collectors"
        ],
        "summary": "add collector",
        "operationId": "addCollector",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Collector"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Collector"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/device/devices/{id}": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "get device by id",
        "operationId": "getDeviceById",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "end",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "netflowFilter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Device"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Devices"
        ],
        "summary": "update a device",
        "operationId": "updateDevice",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "end",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "netflowFilter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "opType",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "refresh"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Device"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Device"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Devices"
        ],
        "summary": "delete a device",
        "operationId": "deleteDeviceById",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "end",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "netflowFilter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "deleteHard",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Devices"
        ],
        "summary": "update a device",
        "operationId": "patchDevice",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "end",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "netflowFilter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "opType",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "refresh"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Device"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Device"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/device/devices/{deviceId}/devicedatasources/{hdsId}/instances/{instanceId}/alertsettings": {
      "get": {
        "tags": [
          "Thresholds"
        ],
        "summary": "get a list of alert settings for a device datasource instance",
        "operationId": "getDeviceDatasourceInstanceAlertSettingListOfDSI",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "hdsId",
            "in": "path",
            "description": "Device-DataSource ID",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "instanceId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceDataSourceInstanceAlertSettingPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/device/devices/{deviceId}/devicedatasources/{hdsId}/instances/{id}/graphs/{graphId}/data": {
      "get": {
        "tags": [
          "Data"
        ],
        "summary": "get device instance graph data ",
        "operationId": "getDeviceDatasourceInstanceGraphData",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "hdsId",
            "in": "path",
            "description": "The device-datasource ID",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "start",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "end",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "graphId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "-?\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "format",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GraphPlot"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/setting/integrations/auditlogs": {
      "get": {
        "tags": [
          "IntegrationAuditLogs"
        ],
        "summary": "get integration audit logs list",
        "operationId": "getIntegrationAuditLogs",
        "parameters": [
          {
            "name": "format",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationAuditLogPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/device/devices/{id}/flows": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "get netflow flows",
        "operationId": "getNetflowFlowList",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "end",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "netflowFilter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowRecordPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/setting/recipientgroups/{id}": {
      "get": {
        "tags": [
          "Recipient Groups"
        ],
        "summary": "get recipient group by id",
        "operationId": "getRecipientGroupById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecipientGroup"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Recipient Groups"
        ],
        "summary": "update recipient group",
        "operationId": "updateRecipientGroupById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecipientGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecipientGroup"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "patch": {
        "tags": [
          "Recipient Groups"
        ],
        "summary": "update recipient group",
        "operationId": "patchRecipientGroupById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecipientGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecipientGroup"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/website/websites/{id}": {
      "get": {
        "tags": [
          "Websites"
        ],
        "summary": "get website by id",
        "operationId": "getWebsiteById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "format",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Website"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Websites"
        ],
        "summary": "update website",
        "operationId": "updateWebsiteById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "opType",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "refresh"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Website"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Website"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Websites"
        ],
        "summary": "delete website",
        "operationId": "deleteWebsiteById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Websites"
        ],
        "summary": "update website",
        "operationId": "patchWebsiteById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "opType",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "refresh"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Website"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Website"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/report/groups": {
      "get": {
        "tags": [
          "Report Groups"
        ],
        "summary": "get report group list",
        "operationId": "getReportGroupList",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportGroupPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Report Groups"
        ],
        "summary": "add report group",
        "operationId": "addReportGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportGroup"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/setting/roles/{id}": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "get role by id",
        "operationId": "getRoleById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Roles"
        ],
        "summary": "update role",
        "operationId": "updateRoleById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Roles"
        ],
        "summary": "delete role",
        "operationId": "deleteRoleById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Roles"
        ],
        "summary": "update role",
        "operationId": "patchRoleById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/device/groups/{id}": {
      "get": {
        "tags": [
          "Device Groups"
        ],
        "summary": "get device group",
        "operationId": "getDeviceGroupById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceGroup"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Device Groups"
        ],
        "summary": "update device group",
        "operationId": "updateDeviceGroupById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "opType",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "refresh"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceGroup"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Device Groups"
        ],
        "summary": "delete device group",
        "operationId": "deleteDeviceGroupById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "deleteChildren",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "deleteHard",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Device Groups"
        ],
        "summary": "update device group",
        "operationId": "patchDeviceGroupById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "opType",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "refresh"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceGroup"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/setting/netscans": {
      "get": {
        "tags": [
          "Netscans"
        ],
        "summary": "get netscan list",
        "operationId": "getNetscanList",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetscanPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Netscans"
        ],
        "summary": "add a new netscan",
        "operationId": "addNetscan",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Netscan"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Netscan"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/website/groups/{id}": {
      "get": {
        "tags": [
          "Website Groups"
        ],
        "summary": "get website group",
        "operationId": "getWebsiteGroupById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebsiteGroup"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Website Groups"
        ],
        "summary": "update website group",
        "operationId": "updateWebsiteGroupById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "opType",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "refresh"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebsiteGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebsiteGroup"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Website Groups"
        ],
        "summary": "delete website group",
        "operationId": "deleteWebsiteGroupById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "deleteChildren",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Website Groups"
        ],
        "summary": "update website group",
        "operationId": "patchWebsiteGroupById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "opType",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "refresh"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebsiteGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebsiteGroup"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/device/devices/{deviceId}/devicedatasources/{hdsId}/instances": {
      "get": {
        "tags": [
          "Datasource Instances"
        ],
        "summary": "get device instance list",
        "operationId": "getDeviceDatasourceInstanceList",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "hdsId",
            "in": "path",
            "description": "The device-datasource ID",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceDatasourceInstancePaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Datasource Instances"
        ],
        "summary": "add device instance ",
        "operationId": "addDeviceDatasourceInstance",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "hdsId",
            "in": "path",
            "description": "The device-datasource ID",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceDataSourceInstance"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceDataSourceInstance"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/azure/functions/discoverSubscriptions": {
      "post": {
        "tags": [
          "Device Groups"
        ],
        "summary": "view subscriptions",
        "operationId": "discoverSubscriptions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestAzureSubscriptionsDiscoverV3"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AzureSubscriptionIdPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/website/websites/{id}/properties": {
      "get": {
        "tags": [
          "Websites"
        ],
        "summary": "get a list of properties for a website",
        "operationId": "getWebsitePropertyListByWebsiteId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/debug": {
      "post": {
        "tags": [
          "Debug"
        ],
        "summary": "Execute a Collector debug command",
        "operationId": "executeDebugCommand",
        "parameters": [
          {
            "name": "collectorId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Debug"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Debug"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/setting/datasources/{id}/devices": {
      "get": {
        "tags": [
          "Datasources"
        ],
        "summary": "get devices associated with a datasource",
        "operationId": "getAssociatedDeviceListByDataSourceId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceDataSourceAssociatedPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/dashboard/widgets/{id}": {
      "get": {
        "tags": [
          "Widgets"
        ],
        "summary": "get widget by id (Based upon widget type the response may contain additional attributes. Please refer models corresponding to specific widget type at the bottom of this page to check the attributes)",
        "operationId": "getWidgetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Widget"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Widgets"
        ],
        "summary": "update widget (Based upon widget type the request and response may contain additional attributes. Please refer models corresponding to specific widget type at the bottom of this page to check the attributes)",
        "operationId": "updateWidgetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Widget"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Widget"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Widgets"
        ],
        "summary": "delete widget",
        "operationId": "deleteWidgetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Widgets"
        ],
        "summary": "update widget (Based upon widget type the request and response may contain additional attributes. Please refer models corresponding to specific widget type at the bottom of this page to check the attributes)",
        "operationId": "patchWidgetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Widget"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Widget"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/gcp/functions/testAccount": {
      "post": {
        "tags": [
          "Device Groups"
        ],
        "summary": "test GCP account",
        "operationId": "testGCPAccount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestGcpAccountTestV3"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/restCloudOkPermissionsV3"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/setting/admins/{adminId}/apitokens": {
      "get": {
        "tags": [
          "API Tokens"
        ],
        "summary": "get api tokens for a user",
        "operationId": "getApiTokenListByAdminId",
        "parameters": [
          {
            "name": "adminId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "pattern": "bearer",
              "type": "string"
            }
          },
          {
            "name": "permission",
            "in": "query",
            "schema": {
              "pattern": "traces",
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiTokenPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "API Tokens"
        ],
        "summary": "add api tokens for a user",
        "operationId": "addApiTokenByAdminId",
        "parameters": [
          {
            "name": "adminId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "API Token"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/APIToken"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIToken"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/report/reports/{id}/tasks/{taskId}": {
      "get": {
        "tags": [
          "Report"
        ],
        "summary": "get report for task Id",
        "operationId": "fetchReportUsingTaskId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateReportResult"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/apiStats/externalApis": {
      "get": {
        "tags": [
          "ApiPerfStats"
        ],
        "summary": "get external api stats info",
        "operationId": "getExternalApiStats",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPerfMetrics"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/sdt/sdts": {
      "get": {
        "tags": [
          "SDTs"
        ],
        "summary": "get SDT list",
        "operationId": "getSDTList",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDTPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "SDTs"
        ],
        "summary": "add SDT (Response may contain extra fields depending upon the type of SDT being added)",
        "operationId": "addSDT",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SDT"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDT"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/dashboard/widgets": {
      "get": {
        "tags": [
          "Widgets"
        ],
        "summary": "get widget list (Based upon widget type the response may contain additional attributes. Please refer models corresponding to specific widget type at the bottom of this page to check the attributes)",
        "operationId": "getWidgetList",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Widgets"
        ],
        "summary": "add widget (Based upon widget type the request and response may contain additional attributes. Please refer models corresponding to specific widget type at the bottom of this page to check the attributes)",
        "operationId": "addWidget",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Widget"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Widget"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/alert/alerts/{id}/ack": {
      "post": {
        "tags": [
          "Alerts"
        ],
        "summary": "ack alert by id",
        "operationId": "ackAlertById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlertAck"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/device/devices/{deviceId}/devicedatasources/{hdsId}/instances/{id}/historysdts": {
      "get": {
        "tags": [
          "Datasource Instances"
        ],
        "summary": "get device instance SDT history",
        "operationId": "getDeviceDatasourceInstanceSDTHistory",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "hdsId",
            "in": "path",
            "description": "The device-datasource ID",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceGroupSDTHistoryPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/device/devices/{id}/sdts": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "get SDTs for a device",
        "operationId": "getAllSDTListByDeviceId",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "end",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "netflowFilter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDTPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/device/devices/{id}/instances": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "get device instance list",
        "operationId": "getDeviceInstanceList",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "end",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "netflowFilter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceDatasourceInstancePaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/device/devices/{deviceId}/devicedatasources/{deviceDsId}/groups/{id}": {
      "get": {
        "tags": [
          "Datasource Instances"
        ],
        "summary": "get device datasource instance group ",
        "operationId": "getDeviceDatasourceInstanceGroupById",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "deviceDsId",
            "in": "path",
            "description": "The device-datasource ID you'd like to add an instance group for",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceDataSourceInstanceGroup"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Datasource Instances"
        ],
        "summary": "update device datasource instance group",
        "operationId": "updateDeviceDatasourceInstanceGroupById",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "deviceDsId",
            "in": "path",
            "description": "The device-datasource ID you'd like to add an instance group for",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceDataSourceInstanceGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceDataSourceInstanceGroup"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "patch": {
        "tags": [
          "Datasource Instances"
        ],
        "summary": "update device datasource instance group",
        "operationId": "patchDeviceDatasourceInstanceGroupById",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "deviceDsId",
            "in": "path",
            "description": "The device-datasource ID you'd like to add an instance group for",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceDataSourceInstanceGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceDataSourceInstanceGroup"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/device/unmonitoreddevices": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "get unmonitored device list",
        "operationId": "getUnmonitoredDeviceList",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnmonitoredDevicePaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/setting/datasources": {
      "get": {
        "tags": [
          "Datasources"
        ],
        "summary": "get datasource list",
        "operationId": "getDatasourceList",
        "parameters": [
          {
            "name": "format",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "json"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasourcePaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Datasources"
        ],
        "summary": "add datasource",
        "operationId": "addDatasourceById",
        "parameters": [
          {
            "name": "createGraph",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSource"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSource"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/azure/functions/testAccount": {
      "post": {
        "tags": [
          "Device Groups"
        ],
        "summary": "test Azure account",
        "operationId": "testAzureAccount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestAzureAccountTestV3"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/restCloudOkPermissionsV3"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/saas/functions/testAccount": {
      "post": {
        "tags": [
          "Device Groups"
        ],
        "summary": "test SaaS account",
        "operationId": "testSaaSAccount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestSaaSAccountTestV3"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/restCloudOkPermissionsV3"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/device/devices/{deviceId}/devicedatasources/{deviceDsId}/groups/{dsigId}/datapoints/{dpId}/alertconfig": {
      "put": {
        "tags": [
          "Datasource Instances"
        ],
        "summary": "update instance group alert threshold (Setting the threshold at default group is not allowed)",
        "operationId": "updateInstanceGroupAlertThreshold",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "deviceDsId",
            "in": "path",
            "description": "The device-datasource ID you'd like to add an instance group for",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dsigId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dpId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestDeviceInstanceGroupAlertConfigV3"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/dashboard/groups/{id}": {
      "get": {
        "tags": [
          "Dashboard Groups"
        ],
        "summary": "get dashboard group",
        "operationId": "getDashboardGroupById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "template",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "format",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "json"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardGroup"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Dashboard Groups"
        ],
        "summary": "update dashboard group",
        "description": "The template field works only for the POST API",
        "operationId": "updateDashboardGroupById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DashboardGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardGroup"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Dashboard Groups"
        ],
        "summary": "delete dashboard group",
        "operationId": "deleteDashboardGroupById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "allowNonEmptyGroup",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Dashboard Groups"
        ],
        "summary": "update dashboard group",
        "description": "The template field works only for the POST API",
        "operationId": "patchDashboardGroupById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DashboardGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardGroup"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/aws/accountId": {
      "get": {
        "tags": [
          "Device Groups"
        ],
        "summary": "Get AWS account ID",
        "operationId": "getAwsAccountId",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AwsAccountId"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/device/groups": {
      "get": {
        "tags": [
          "Device Groups"
        ],
        "summary": "get device group list",
        "operationId": "getDeviceGroupList",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceGroupPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Device Groups"
        ],
        "summary": "add device group",
        "operationId": "addDeviceGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceGroup"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/aws/functions/testAccount": {
      "post": {
        "tags": [
          "Device Groups"
        ],
        "summary": "test AWS account",
        "operationId": "testAWSAccount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestAwsAccountTestV3"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/restCloudOkPermissionsV3"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/setting/functions": {
      "get": {
        "tags": [
          "AppliesToFunctions"
        ],
        "summary": "get applies to function list",
        "operationId": "getAppliesToFunctionList",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestAppliesToFunctionPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "AppliesToFunctions"
        ],
        "summary": "add applies to function",
        "operationId": "addAppliesToFunction",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppliesToFunction"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppliesToFunction"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/setting/collector/groups": {
      "get": {
        "tags": [
          "Collector Groups"
        ],
        "summary": "get collector group list",
        "operationId": "getCollectorGroupList",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectorGroupPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Collector Groups"
        ],
        "summary": "add collector group",
        "operationId": "addCollectorGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectorGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectorGroup"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/device/devices/{deviceId}/devicedatasources/{deviceDsId}/groups/{dsigId}/graphs/{ographId}/data": {
      "get": {
        "tags": [
          "Data"
        ],
        "summary": "get device instance group overview graph data ",
        "operationId": "getDeviceDatasourceInstanceGroupOverviewGraphData",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "deviceDsId",
            "in": "path",
            "description": "The device-datasource ID you'd like to add an instance group for",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dsigId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "start",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "end",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "ographId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "format",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GraphPlot"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/website/websites/{id}/alerts": {
      "get": {
        "tags": [
          "Websites"
        ],
        "summary": "get alerts for a website",
        "operationId": "getWebsiteAlertListByWebsiteId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "needMessage",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "customColumns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/device/devices/{deviceId}/devicedatasources/{id}/data": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "get device datasource data ",
        "operationId": "getDeviceDatasourceDataById",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "period",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "double",
              "default": 1
            }
          },
          {
            "name": "start",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "end",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "datapoints",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "format",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "json"
            }
          },
          {
            "name": "aggregate",
            "in": "query",
            "description": "the aggregate option",
            "schema": {
              "type": "string",
              "default": "none",
              "enum": [
                "first",
                "last",
                "min",
                "max",
                "sum",
                "average",
                "none"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceDataSourceData"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/device/devices/{deviceId}/properties/{name}": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "get device property by name",
        "operationId": "getDevicePropertyByName",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "[^/]+",
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityProperty"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Devices"
        ],
        "summary": "update device property",
        "operationId": "updateDevicePropertyByName",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "[^/]+",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityProperty"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityProperty"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Devices"
        ],
        "summary": "delete device property",
        "operationId": "deleteDevicePropertyByName",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "[^/]+",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Devices"
        ],
        "summary": "update device property",
        "operationId": "patchDevicePropertyByName",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "[^/]+",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityProperty"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityProperty"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/setting/admins/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "get user",
        "operationId": "getAdminById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Admin"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "update user",
        "operationId": "updateAdminById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "changePassword",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "validationOnly",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Admin"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Admin"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "delete user",
        "operationId": "deleteAdminById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "update user",
        "operationId": "patchAdminById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "changePassword",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "validationOnly",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Admin"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Admin"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/setting/configsources/{id}/updatereasons": {
      "get": {
        "tags": [
          "ConfigSources"
        ],
        "summary": "get update history for a configSource",
        "operationId": "getUpdateReasonListByConfigSourceId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigSourceUpdateReasonsPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/website/websites/{websiteId}/checkpoints/{checkpointId}/graphs/{graphName}/data": {
      "get": {
        "tags": [
          "Data"
        ],
        "summary": "get website graph data",
        "operationId": "getWebsiteGraphData",
        "parameters": [
          {
            "name": "websiteId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "checkpointId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "start",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "end",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "graphName",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": ".+",
              "type": "string"
            }
          },
          {
            "name": "format",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GraphPlot"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/device/groups/{id}/historysdts": {
      "get": {
        "tags": [
          "Device Groups"
        ],
        "summary": "get SDT history for the group",
        "operationId": "getSDTHistoryByDeviceGroupId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceGroupSDTHistoryPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/alert/alerts/{id}/note": {
      "post": {
        "tags": [
          "Alerts"
        ],
        "summary": "add alert note",
        "operationId": "addAlertNoteById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlertAck"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/dashboard/dashboards": {
      "get": {
        "tags": [
          "Dashboards"
        ],
        "summary": "get dashboard list",
        "operationId": "getDashboardList",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Dashboards"
        ],
        "summary": "add dashboard",
        "operationId": "addDashboard",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Dashboard"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dashboard"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/setting/admins/apitokens": {
      "get": {
        "tags": [
          "API Tokens"
        ],
        "summary": "get a list of api tokens across users",
        "operationId": "getApiTokenList",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "schema": {
              "pattern": "bearer",
              "type": "string"
            }
          },
          {
            "name": "permission",
            "in": "query",
            "schema": {
              "pattern": "traces",
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiTokenPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/setting/alert/chains/{id}": {
      "get": {
        "tags": [
          "Escalation Chains"
        ],
        "summary": "get escalation chain by id",
        "operationId": "getEscalationChainById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EscalatingChain"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Escalation Chains"
        ],
        "summary": "update escalation chain",
        "operationId": "updateEscalationChainById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EscalatingChain"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EscalatingChain"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "patch": {
        "tags": [
          "Escalation Chains"
        ],
        "summary": "update escalation chain",
        "operationId": "patchEscalationChainById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EscalatingChain"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EscalatingChain"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/device/groups/{deviceGroupId}/datasources/{dsId}/alertsettings": {
      "get": {
        "tags": [
          "Thresholds"
        ],
        "summary": "get device group datasource alert setting ",
        "operationId": "getDeviceGroupDatasourceAlertSetting",
        "parameters": [
          {
            "name": "deviceGroupId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dsId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceGroupDataSourceAlertConfig"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Thresholds"
        ],
        "summary": "update device group datasource alert setting",
        "operationId": "updateDeviceGroupDatasourceAlertSetting",
        "parameters": [
          {
            "name": "deviceGroupId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dsId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceGroupDataSourceAlertConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceGroupDataSourceAlertConfig"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "patch": {
        "tags": [
          "Thresholds"
        ],
        "summary": "update device group datasource alert setting",
        "operationId": "patchDeviceGroupDatasourceAlertSetting",
        "parameters": [
          {
            "name": "deviceGroupId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dsId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceGroupDataSourceAlertConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceGroupDataSourceAlertConfig"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/setting/alert/rules/{id}": {
      "get": {
        "tags": [
          "Alert Rules"
        ],
        "summary": "get alert rule by id",
        "operationId": "getAlertRuleById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertRule"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Alert Rules"
        ],
        "summary": "update alert rule",
        "operationId": "updateAlertRuleById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlertRule"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertRule"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Alert Rules"
        ],
        "summary": "delete alert rule",
        "operationId": "deleteAlertRuleById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Alert Rules"
        ],
        "summary": "update alert rule",
        "operationId": "patchAlertRuleById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlertRule"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertRule"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/device/devicedatasourceinstances/{instanceId}/graphs/{graphId}/data": {
      "get": {
        "tags": [
          "Data"
        ],
        "summary": "get device instance data",
        "operationId": "getDeviceInstanceGraphDataOnlyByInstanceId",
        "parameters": [
          {
            "name": "instanceId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "graphId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "-?\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "start",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "end",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "format",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GraphPlot"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/setting/accessgroup": {
      "get": {
        "tags": [
          "Access Group"
        ],
        "summary": "Get access group list",
        "operationId": "getAccessGroupList",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessGroupPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/setting/datasources/{id}": {
      "get": {
        "tags": [
          "Datasources"
        ],
        "summary": "get datasource by id",
        "operationId": "getDatasourceById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "format",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "json"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSource"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Datasources"
        ],
        "summary": "update datasource",
        "operationId": "updateDatasourceById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forceUniqueIdentifier",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "forceRestrictedChangeKey",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSource"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSource"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Datasources"
        ],
        "summary": "delete datasource",
        "operationId": "deleteDatasourceById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Datasources"
        ],
        "summary": "update datasource",
        "operationId": "patchDatasourceById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forceUniqueIdentifier",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "forceRestrictedChangeKey",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSource"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSource"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/setting/accesslogs": {
      "get": {
        "tags": [
          "Audit Logs"
        ],
        "summary": "Get audit logs",
        "operationId": "getAuditLogList",
        "parameters": [
          {
            "name": "format",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessLogPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/alert/alerts/{id}/escalate": {
      "post": {
        "tags": [
          "Alerts"
        ],
        "summary": "escalate alert by id",
        "operationId": "escalatedAlertById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/device/devices/{deviceId}/devicedatasources/{hdsId}/instances/{instanceId}/alertsettings/{id}": {
      "put": {
        "tags": [
          "Thresholds"
        ],
        "summary": "update device instance alert setting",
        "operationId": "updateDeviceDatasourceInstanceAlertSettingById",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "hdsId",
            "in": "path",
            "description": "Device-DataSource ID",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "instanceId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceDataSourceInstanceAlertSetting"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceDataSourceInstanceAlertSetting"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "patch": {
        "tags": [
          "Thresholds"
        ],
        "summary": "update device instance alert setting",
        "operationId": "patchDeviceDatasourceInstanceAlertSettingById",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "hdsId",
            "in": "path",
            "description": "Device-DataSource ID",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "instanceId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceDataSourceInstanceAlertSetting"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceDataSourceInstanceAlertSetting"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/device/devices/{id}/topTalkersGraph": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "get top talkers graph",
        "operationId": "getTopTalkersGraph",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "end",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "netflowFilter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "format",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "keyword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GraphPlot"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/setting/collector/collectors/{id}": {
      "get": {
        "tags": [
          "Collectors"
        ],
        "summary": "get collector",
        "operationId": "getCollectorById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Collector"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Collectors"
        ],
        "summary": "update collector",
        "operationId": "updateCollectorById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "autoBalanceMonitoredDevices",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "forceUpdateFailedOverDevices",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "opType",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "refresh"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Collector"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Collector"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Collectors"
        ],
        "summary": "delete collector",
        "operationId": "deleteCollectorById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Collectors"
        ],
        "summary": "update collector",
        "operationId": "patchCollectorById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "autoBalanceMonitoredDevices",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "forceUpdateFailedOverDevices",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "opType",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "refresh"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Collector"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Collector"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/setting/collector/collectors/{collectorId}/installers/{osAndArch}": {
      "get": {
        "tags": [
          "Collectors"
        ],
        "summary": "get collector installer",
        "operationId": "getCollectorInstaller",
        "parameters": [
          {
            "name": "collectorId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "osAndArch",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": ".+",
              "type": "string"
            }
          },
          {
            "name": "collectorVersion",
            "in": "query",
            "description": "The version of the installer you'd like to download. This defaults to the latest GD Collector, unless useEA is true",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "monitorOthers",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "collectorSize",
            "in": "query",
            "description": "The size of the Collector you'd like to install. Options are nano, small (requires 2GB memory), medium (requires 4GB memory), large (requires 8GB memory), extra large (requires 16GB memory), double extra large (requires 32GB memory). Requires collector version 22.180 or higher. Defaults to small",
            "schema": {
              "type": "string",
              "default": "medium"
            }
          },
          {
            "name": "useEA",
            "in": "query",
            "description": "If true, the latest EA Collector version will be used. Defaults to false",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/setting/recipientgroups": {
      "get": {
        "tags": [
          "Recipient Groups"
        ],
        "summary": "get recipient group List",
        "operationId": "getRecipientGroupList",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecipientGroupPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Recipient Groups"
        ],
        "summary": "add recipient group",
        "operationId": "addRecipientGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecipientGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecipientGroup"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/device/groups/{gid}/properties/{name}": {
      "get": {
        "tags": [
          "Device Groups"
        ],
        "summary": "get device group property by name",
        "operationId": "getDeviceGroupPropertyByName",
        "parameters": [
          {
            "name": "gid",
            "in": "path",
            "description": "group ID",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "[^/]+",
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityProperty"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Device Groups"
        ],
        "summary": "update device group property",
        "operationId": "updateDeviceGroupPropertyByName",
        "parameters": [
          {
            "name": "gid",
            "in": "path",
            "description": "group ID",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "[^/]+",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityProperty"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityProperty"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Device Groups"
        ],
        "summary": "delete device group property",
        "operationId": "deleteDeviceGroupPropertyByName",
        "parameters": [
          {
            "name": "gid",
            "in": "path",
            "description": "group ID",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "[^/]+",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Device Groups"
        ],
        "summary": "update device group property",
        "operationId": "patchDeviceGroupPropertyByName",
        "parameters": [
          {
            "name": "gid",
            "in": "path",
            "description": "group ID",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "[^/]+",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityProperty"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityProperty"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/debug/{id}": {
      "get": {
        "tags": [
          "Debug"
        ],
        "summary": "Get the result of a Collector debug command using sessionId",
        "operationId": "getDebugCommandResult",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": ".*",
              "type": "string"
            }
          },
          {
            "name": "collectorId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Debug"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/website/websites": {
      "get": {
        "tags": [
          "Websites"
        ],
        "summary": "get website list",
        "operationId": "getWebsiteList",
        "parameters": [
          {
            "name": "collectorIds",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebsitePaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Websites"
        ],
        "summary": "add website",
        "operationId": "addWebsite",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Website"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Website"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/dashboard/groups/{id}/asyncclone": {
      "post": {
        "tags": [
          "Dashboard Groups"
        ],
        "summary": "add dashboard group asynchronously",
        "operationId": "addDashboardGroupAsynchronously",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "recursive",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DashboardGroup"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestDashboardGroupAsyncCloneResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/sdt/sdts/{id}": {
      "get": {
        "tags": [
          "SDTs"
        ],
        "summary": "get SDT by id (Response may contain extra fields depending upon the type of SDT of given id)",
        "operationId": "getSDTById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDT"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "SDTs"
        ],
        "summary": "update SDT (Response may contain extra fields depending upon the type of SDT being updated)",
        "operationId": "updateSDTById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SDT"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDT"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "SDTs"
        ],
        "summary": "delete SDT",
        "operationId": "deleteSDTById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "SDTs"
        ],
        "summary": "update SDT (Response may contain extra fields depending upon the type of SDT being updated)",
        "operationId": "patchSDTById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SDT"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDT"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/dashboard/groups": {
      "get": {
        "tags": [
          "Dashboard Groups"
        ],
        "summary": "get dashboard group list",
        "operationId": "getDashboardGroupList",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardGroupPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Dashboard Groups"
        ],
        "summary": "add dashboard group",
        "operationId": "addDashboardGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DashboardGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardGroup"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/setting/netscans/{id}": {
      "get": {
        "tags": [
          "Netscans"
        ],
        "summary": "get netscan by id",
        "operationId": "getNetscanById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Netscan"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/setting/accessgroup/add": {
      "post": {
        "tags": [
          "Access Group"
        ],
        "summary": "Create a access group",
        "operationId": "addAccessGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessGroup"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessGroup"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/setting/admins": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "get user list",
        "operationId": "getAdminList",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "schema": {
              "pattern": "bearer",
              "type": "string"
            }
          },
          {
            "name": "permission",
            "in": "query",
            "schema": {
              "pattern": "traces",
              "type": "string"
            }
          },
          {
            "name": "filterGroupString",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "add user",
        "operationId": "addAdmin",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Admin"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Admin"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/setting/collector/collectors/{id}/ackdown": {
      "post": {
        "tags": [
          "Collectors"
        ],
        "summary": "ack collector down alert",
        "operationId": "ackCollectorDownAlertById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AckCollectorDown"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/dashboard/dashboards/{id}/widgets": {
      "get": {
        "tags": [
          "Dashboards"
        ],
        "summary": "get widget list by DashboardId",
        "operationId": "getWidgetListByDashboardId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/website/websites/{id}/sdts": {
      "get": {
        "tags": [
          "Websites"
        ],
        "summary": "get a list of SDTs for a website",
        "operationId": "getWebsiteSDTListByWebsiteId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDTPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/device/devices/{deviceId}/devicedatasources/{hdsId}/instances/{instanceId}/config/configCollection": {
      "post": {
        "tags": [
          "Datasource Instances"
        ],
        "summary": "collect a config for a device",
        "operationId": "collectDeviceConfigSourceConfig",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "hdsId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "instanceId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/device/groups/{deviceGroupId}/datasources/{id}": {
      "get": {
        "tags": [
          "Device Groups"
        ],
        "summary": "get device group datasource",
        "operationId": "getDeviceGroupDatasourceById",
        "parameters": [
          {
            "name": "deviceGroupId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceGroupDataSource"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Device Groups"
        ],
        "summary": "update device group datasource",
        "operationId": "updateDeviceGroupDatasourceById",
        "parameters": [
          {
            "name": "deviceGroupId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceGroupDataSource"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceGroupDataSource"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "patch": {
        "tags": [
          "Device Groups"
        ],
        "summary": "update device group datasource",
        "operationId": "patchDeviceGroupDatasourceById",
        "parameters": [
          {
            "name": "deviceGroupId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceGroupDataSource"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceGroupDataSource"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/device/devices/{deviceId}/devicedatasources/{hdsId}/instances/{id}/data": {
      "get": {
        "tags": [
          "Data"
        ],
        "summary": "get device instance data",
        "operationId": "getDeviceDatasourceInstanceData",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "hdsId",
            "in": "path",
            "description": "The device-datasource ID",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "period",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "double",
              "default": 1
            }
          },
          {
            "name": "start",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "end",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "datapoints",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "format",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceDataSourceInstanceData"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/device/groups/{id}/sdts": {
      "get": {
        "tags": [
          "Device Groups"
        ],
        "summary": "get device group SDTs",
        "operationId": "getDeviceGroupSDTList",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDTPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/device/groups/{id}/alerts": {
      "get": {
        "tags": [
          "Device Groups"
        ],
        "summary": "get device group alerts",
        "operationId": "getAlertListByDeviceGroupId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "needMessage",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "customColumns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/dashboard/widgets/{id}/data": {
      "get": {
        "tags": [
          "Data"
        ],
        "summary": "get widget data (Based upon widget type the response may contain additional attributes. Please refer models corresponding to specific widget type at the bottom of this page to check the attributes)",
        "operationId": "getWidgetDataById",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "end",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "format",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetData"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/website/websites/{id}/graphs/{graphName}/data": {
      "get": {
        "tags": [
          "Websites"
        ],
        "summary": "get website data by graph name",
        "operationId": "getWebsiteDataByGraphName",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "start",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "end",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "graphName",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": ".+",
              "type": "string"
            }
          },
          {
            "name": "format",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GraphPlot"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/report/groups/{id}": {
      "get": {
        "tags": [
          "Report Groups"
        ],
        "summary": "get report group by id",
        "operationId": "getReportGroupById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportGroup"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Report Groups"
        ],
        "summary": "update report group",
        "operationId": "updateReportGroupById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportGroup"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Report Groups"
        ],
        "summary": "delete report group",
        "operationId": "deleteReportGroupById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Report Groups"
        ],
        "summary": "update report group",
        "operationId": "patchReportGroupById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportGroup"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/setting/roles": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "get role list",
        "operationId": "getRoleList",
        "parameters": [
          {
            "name": "excludeAdmin",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RolePaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Roles"
        ],
        "summary": "add role",
        "operationId": "addRole",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/setting/alert/rules": {
      "get": {
        "tags": [
          "Alert Rules"
        ],
        "summary": "get alert rule list",
        "operationId": "getAlertRuleList",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertRulePaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Alert Rules"
        ],
        "summary": "add alert rule",
        "operationId": "addAlertRule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlertRule"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertRule"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/metrics/usage": {
      "get": {
        "tags": [
          "Metrics"
        ],
        "summary": "get metrics usage",
        "operationId": "getMetricsUsage",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Usage"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/website/smcheckpoints": {
      "get": {
        "tags": [
          "Websites"
        ],
        "summary": "get website checkpoint list",
        "operationId": "getSiteMonitorCheckPointList",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteMonitorCheckPointPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/report/reports/{id}": {
      "get": {
        "tags": [
          "Report"
        ],
        "summary": "get report by id",
        "operationId": "getReportById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportBase"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Report"
        ],
        "summary": "update report",
        "operationId": "updateReportById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportBase"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportBase"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Report"
        ],
        "summary": "delete report",
        "operationId": "deleteReportById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Report"
        ],
        "summary": "update report",
        "operationId": "patchReportById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportBase"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportBase"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/website/websites/{srvId}/checkpoints/{checkId}/data": {
      "get": {
        "tags": [
          "Data"
        ],
        "summary": "get data for a website checkpoint",
        "operationId": "getWebsiteCheckpointDataById",
        "parameters": [
          {
            "name": "srvId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "checkId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "period",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "double",
              "default": 1
            }
          },
          {
            "name": "start",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "end",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "datapoints",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "format",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "json"
            }
          },
          {
            "name": "aggregate",
            "in": "query",
            "description": "the aggregate option",
            "schema": {
              "type": "string",
              "default": "none",
              "enum": [
                "first",
                "last",
                "min",
                "max",
                "sum",
                "average",
                "none"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebsiteCheckpointRawData"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/setting/userdata/{id}": {
      "put": {
        "tags": [
          "userdata"
        ],
        "summary": "update default dashboard",
        "operationId": "updateDefaultDashboard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": ".+",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestUserCustomizedDataV3"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "patch": {
        "tags": [
          "userdata"
        ],
        "summary": "update default dashboard",
        "operationId": "patchDefaultDashboard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": ".+",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestUserCustomizedDataV3"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/device/devices/{deviceId}/devicedatasources/{id}": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "get device datasource ",
        "operationId": "getDeviceDatasourceById",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceDataSource"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/website/groups/{id}/sdts": {
      "get": {
        "tags": [
          "Website Groups"
        ],
        "summary": "get a list of SDTs for a website group (Response may contain extra fields depending upon the type of SDT)",
        "operationId": "getAllSDTListByWebsiteGroupId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDTPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/report/reports/{id}/executions": {
      "post": {
        "tags": [
          "Report"
        ],
        "summary": "run a report",
        "operationId": "generateReportById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateReportRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateReportResult"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/website/groups/{id}/websites": {
      "get": {
        "tags": [
          "Website Groups"
        ],
        "summary": "get a list of websites for a group (Response may contain extra fields depending upon the type of check { PingCheck | WebCheck} being added)",
        "operationId": "getImmediateWebsiteListByWebsiteGroupId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebsitePaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/device/instances/datafetch": {
      "post": {
        "tags": [
          "Data"
        ],
        "summary": "fetch device instances data",
        "operationId": "fetchDeviceInstancesData",
        "parameters": [
          {
            "name": "period",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "double",
              "default": 1
            }
          },
          {
            "name": "start",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "end",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "aggregate",
            "in": "query",
            "description": "the aggregate option",
            "schema": {
              "type": "string",
              "default": "none",
              "enum": [
                "first",
                "last",
                "min",
                "max",
                "sum",
                "average",
                "none"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceInstances"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceInstanceDataPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/dashboard/dashboards/{id}": {
      "get": {
        "tags": [
          "Dashboards"
        ],
        "summary": "get dashboard",
        "operationId": "getDashboardById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "template",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "format",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "json"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dashboard"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Dashboards"
        ],
        "summary": "update dashboard",
        "description": "The template field works only for the POST API",
        "operationId": "updateDashboardById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "overwriteGroupFields",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Dashboard"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dashboard"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Dashboards"
        ],
        "summary": "delete dashboard",
        "operationId": "deleteDashboardById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Dashboards"
        ],
        "summary": "update dashboard",
        "description": "The template field works only for the POST API",
        "operationId": "patchDashboardById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "overwriteGroupFields",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Dashboard"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dashboard"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/device/devices/{deviceId}/devicedatasources/{id}/historysdts": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "get SDT history for the device dataSource",
        "operationId": "getSDTHistoryByDeviceDataSourceId",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceDataSourceSDTHistoryPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/device/devices/{deviceId}/properties": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "get device properties",
        "operationId": "getDevicePropertyList",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Devices"
        ],
        "summary": "add device property",
        "operationId": "addDeviceProperty",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityProperty"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityProperty"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/setting/datasources/{id}/updatereasons": {
      "get": {
        "tags": [
          "Datasources"
        ],
        "summary": "get update history for a datasource",
        "operationId": "getUpdateReasonListByDataSourceId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSourceUpdateReasonsPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/website/groups": {
      "get": {
        "tags": [
          "Website Groups"
        ],
        "summary": "get website group list",
        "operationId": "getWebsiteGroupList",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebsiteGroupPaginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Website Groups"
        ],
        "summary": "add website group",
        "operationId": "addWebsiteGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebsiteGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebsiteGroup"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/device/devices/{deviceId}/devicedatasources/{hdsId}/instances/{id}": {
      "get": {
        "tags": [
          "Datasource Instances"
        ],
        "summary": "get device instance ",
        "operationId": "getDeviceDatasourceInstanceById",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "hdsId",
            "in": "path",
            "description": "The device-datasource ID",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceDataSourceInstance"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Datasource Instances"
        ],
        "summary": "update device instance",
        "operationId": "updateDeviceDatasourceInstanceById",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "hdsId",
            "in": "path",
            "description": "The device-datasource ID",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "opType",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "refresh"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceDataSourceInstance"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceDataSourceInstance"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Datasource Instances"
        ],
        "summary": "delete a device instance",
        "operationId": "deleteDeviceDatasourceInstanceById",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "hdsId",
            "in": "path",
            "description": "The device-datasource ID",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Datasource Instances"
        ],
        "summary": "update device instance",
        "operationId": "patchDeviceDatasourceInstanceById",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "hdsId",
            "in": "path",
            "description": "The device-datasource ID",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "opType",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "refresh"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceDataSourceInstance"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceDataSourceInstance"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/setting/collector/groups/{id}": {
      "get": {
        "tags": [
          "Collector Groups"
        ],
        "summary": "get collector group",
        "operationId": "getCollectorGroupById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectorGroup"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Collector Groups"
        ],
        "summary": "update collector group",
        "operationId": "updateCollectorGroupById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "autoBalanceMonitoredDevices",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "forceUpdateFailedOverDevices",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "opType",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "refresh"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectorGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectorGroup"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Collector Groups"
        ],
        "summary": "delete collector group",
        "operationId": "deleteCollectorGroupById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Collector Groups"
        ],
        "summary": "update collector group",
        "operationId": "patchCollectorGroupById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "\\d+",
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "autoBalanceMonitoredDevices",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "forceUpdateFailedOverDevices",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "opType",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "refresh"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectorGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectorGroup"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    }
  },
  "components": {
    "schemas": {
      "AzureExpressRouteCircuitPeeringCollectorAttributeV3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "required": [
              "period"
            ],
            "type": "object",
            "properties": {
              "period": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "WebsiteCollectorInfo": {
        "type": "object",
        "properties": {
          "hostname": {
            "type": "string",
            "description": "The hostname of the collector",
            "readOnly": true
          },
          "collectorGroupName": {
            "type": "string",
            "description": "The group name of the group the collector is present in",
            "readOnly": true
          },
          "collectorGroupId": {
            "type": "integer",
            "description": "The group Id of the group the collector is present in",
            "format": "int32",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "The description of the collector",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "description": "The collector id",
            "format": "int32",
            "readOnly": true
          },
          "status": {
            "type": "string",
            "description": "The status of the collector",
            "readOnly": true
          }
        }
      },
      "AwsElastiCacheDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ],
        "x-discriminator-value": "ad_awselasticache"
      },
      "AutoDiscoveryFilter": {
        "required": [
          "attribute",
          "operation"
        ],
        "type": "object",
        "properties": {
          "comment": {
            "type": "string",
            "description": "The filter comment"
          },
          "attribute": {
            "type": "string",
            "description": "Attribute to filter"
          },
          "operation": {
            "type": "string",
            "description": "The filter's operation. The values can be : Equal|NotEqual|GreaterThan|GreaterEqual|LessThan|LessEqual|Contain|NotContain|NotExist|RegexMatch|RegexNotMatch"
          },
          "value": {
            "type": "string",
            "description": "The operation value"
          }
        }
      },
      "Widget": {
        "required": [
          "dashboardId",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "lastUpdatedBy": {
            "type": "string",
            "description": "The user that last updated the widget",
            "readOnly": true
          },
          "userPermission": {
            "type": "string",
            "description": "The permission level of the user who last modified the widget",
            "readOnly": true,
            "example": "write"
          },
          "dashboardId": {
            "type": "integer",
            "description": "The id of the dashboard the widget belongs to",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "The name of the widget",
            "example": "Test"
          },
          "description": {
            "type": "string",
            "description": "The description of the widget",
            "example": "Devices By Type"
          },
          "lastUpdatedOn": {
            "type": "integer",
            "description": "The time that corresponds to when the widget was last updated, in epoch format",
            "format": "int64",
            "readOnly": true
          },
          "theme": {
            "type": "string",
            "description": "The color scheme of the widget. Options are: borderPurple | borderGray | borderBlue | solidPurple | solidGray | solidBlue | simplePurple | simpleBlue | simpleGray | newBorderGray | newBorderBlue | newBorderDarkBlue | newSolidGray | newSolidBlue | newSolidDarkBlue | newSimpleGray | newSimpleBlue |newSimpleDarkBlue",
            "example": "newBorderBlue"
          },
          "interval": {
            "type": "integer",
            "description": "The refresh interval of the widget, in minutes",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "description": "The Id of the widget",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "description": "alert | batchjob | flash | gmap | ngraph | ograph | cgraph | sgraph | netflowgraph | groupNetflowGraph | netflow | groupNetflow | html | bigNumber | gauge | pieChart | table | dynamicTable | deviceSLA | text | statsd | deviceStatus | serviceAlert | noc | websiteOverview | websiteOverallStatus | websiteIndividualStatus | websiteSLA | savedMap",
            "example": "bigNumber"
          },
          "timescale": {
            "type": "string",
            "description": "The default timescale of the widget"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DeviceDatasourceGraph": {
        "type": "object",
        "properties": {
          "displayPrio": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "title": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "AzureRecoveryServicesVaultAgentsCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "required": [
              "period"
            ],
            "type": "object",
            "properties": {
              "period": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "AzureReplicationDisasterRecoveryCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "required": [
              "period"
            ],
            "type": "object",
            "properties": {
              "period": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "AlertListPaginationResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "searchId": {
            "type": "string",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlertResponse"
            }
          }
        }
      },
      "EscalationChainPaginationResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "searchId": {
            "type": "string",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EscalatingChain"
            }
          }
        }
      },
      "SnmpTrapEventSource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EventSource"
          },
          {
            "type": "object"
          }
        ],
        "x-discriminator-value": "snmptrap"
      },
      "RestDashboardGroupAsyncCloneResponse": {
        "type": "object",
        "properties": {
          "jobId": {
            "type": "integer",
            "description": "The jobId of the Clone Dashboard Group",
            "format": "int32",
            "readOnly": true
          }
        }
      },
      "DynamicTableWidget": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Widget"
          },
          {
            "required": [
              "columns",
              "dataSourceId",
              "rows"
            ],
            "type": "object",
            "properties": {
              "dataSourceId": {
                "type": "integer",
                "description": "The id of the selected datasource",
                "format": "int32"
              },
              "topX": {
                "type": "integer",
                "format": "int32"
              },
              "dataSourceFullName": {
                "type": "string",
                "description": "The full name of the selected datasource",
                "readOnly": true
              },
              "columns": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DynamicTableWidgetColumn"
                }
              },
              "sortOrder": {
                "type": "string"
              },
              "forecast": {
                "$ref": "#/components/schemas/TableWidgetForecastConfiguration"
              },
              "rows": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DynamicTableWidgetRow"
                }
              }
            }
          }
        ],
        "x-discriminator-value": "dynamictable"
      },
      "LogsWidget": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Widget"
          },
          {
            "required": [
              "logsInfo"
            ],
            "type": "object",
            "properties": {
              "logsInfo": {
                "$ref": "#/components/schemas/LogsInfo"
              }
            }
          }
        ]
      },
      "WidgetPaginationResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "searchId": {
            "type": "string",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Widget"
            }
          }
        }
      },
      "AzureRecoveryServiceRTOCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "required": [
              "period"
            ],
            "type": "object",
            "properties": {
              "period": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "DataSourceUpdateReasonsPaginationResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "searchId": {
            "type": "string",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateReason"
            }
          }
        }
      },
      "WMIAutoDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "required": [
              "namespace",
              "property",
              "wmiClass"
            ],
            "type": "object",
            "properties": {
              "linkedClasses": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LinkedWmiClass"
                }
              },
              "externalResourceID": {
                "type": "string"
              },
              "externalResourceType": {
                "type": "string"
              },
              "wmiClass": {
                "type": "string"
              },
              "property": {
                "type": "string"
              },
              "namespace": {
                "type": "string"
              },
              "ILP": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ILP"
                }
              },
              "enableLinkedClassILP": {
                "type": "boolean"
              },
              "enableWmiClassILP": {
                "type": "boolean"
              }
            }
          }
        ],
        "x-discriminator-value": "ad_wmi"
      },
      "WebPageCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object",
            "properties": {
              "request": {
                "type": "string"
              },
              "port": {
                "type": "string"
              },
              "followRedirect": {
                "type": "boolean"
              },
              "ip": {
                "type": "string"
              },
              "readTimeout": {
                "type": "integer",
                "format": "int32"
              },
              "connectTimeout": {
                "type": "integer",
                "format": "int32"
              },
              "useSSL": {
                "type": "boolean"
              }
            }
          }
        ],
        "x-discriminator-value": "webpage"
      },
      "SaaSZoomStatusDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ]
      },
      "CustomGraph": {
        "required": [
          "dataPoints"
        ],
        "type": "object",
        "properties": {
          "virtualDataPoints": {
            "type": "array",
            "description": "The virtual datapoints added to the widget (note that a virtual datapoint must be referenced in a graph line to be displayed)",
            "items": {
              "$ref": "#/components/schemas/CustomVirtualDataPoint"
            }
          },
          "minValue": {
            "type": "number",
            "description": "The minimum value that should be displayed on the y-axis",
            "format": "double"
          },
          "topX": {
            "type": "integer",
            "description": "The number of lines to display for each configured datapoint",
            "format": "int32"
          },
          "maxValue": {
            "type": "number",
            "description": "The maximum value that should be displayed on the y-axis",
            "format": "double"
          },
          "dataPoints": {
            "type": "array",
            "description": "The datapoints added to the widget (note that a datapoint must be referenced in a graph line to be displayed)",
            "items": {
              "$ref": "#/components/schemas/CustomFlexibleVirtualDataSourceEx"
            }
          },
          "verticalLabel": {
            "type": "string",
            "description": "The label that will be display along the y axis"
          },
          "id": {
            "type": "integer",
            "description": "The unique id of the custom graph displayed by this widget (not to be confused with the widget id)",
            "format": "int32"
          },
          "aggregate": {
            "type": "boolean",
            "description": "true: You can set this field to true to aggregate results into one line.\nfalse: Results will not be aggregated\nthe default value is true"
          },
          "desc": {
            "type": "boolean",
            "description": "Whether the top X are displayed (false) or the bottom X are displayed (true), the default value is true"
          },
          "scaleUnit": {
            "type": "integer",
            "description": "The base scale unit (1000 or 1024)",
            "format": "int32"
          },
          "globalConsolidateFunction": {
            "type": "string",
            "description": "The function for global consolidate"
          }
        }
      },
      "RestAwsRdsPerformanceInsightsEventSource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EventSource"
          },
          {
            "type": "object",
            "properties": {
              "schedule": {
                "type": "integer",
                "description": "The polling interval for the EventSource",
                "format": "int32"
              },
              "num": {
                "type": "integer",
                "description": "Maximum number of items to return",
                "format": "int32"
              },
              "dimension": {
                "type": "string",
                "description": "The dimension to query"
              }
            }
          }
        ]
      },
      "AccessLogPaginationResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "searchId": {
            "type": "string",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditLog"
            }
          }
        }
      },
      "CollectorBase": {
        "type": "object",
        "properties": {
          "userChangeOn": {
            "type": "integer",
            "description": "The last time the Collector was updated, in epoch format",
            "format": "int64",
            "readOnly": true
          },
          "confVersion": {
            "type": "string",
            "description": "The version of the agent.conf configuration file",
            "readOnly": true
          },
          "downloadUrl": {
            "type": "string",
            "description": "Download Url",
            "readOnly": true
          },
          "updatedOnLocal": {
            "type": "string",
            "description": "The time that the Collector was last updated, in local time format",
            "readOnly": true
          },
          "collectorType": {
            "type": "string",
            "description": "Collector type",
            "readOnly": true,
            "example": "external"
          },
          "encodedConfigData": {
            "type": "string",
            "description": "Base 64 encoded config data",
            "readOnly": true
          },
          "hostname": {
            "type": "string",
            "description": "The hostname of the device the Collector is installed on",
            "readOnly": true
          },
          "numberOfInstances": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "description": "The id of the Collector",
            "format": "int32",
            "readOnly": true
          },
          "ea": {
            "type": "boolean",
            "description": "Whether the collector is in EA version",
            "readOnly": true
          },
          "watchdogUpdatedOnLocal": {
            "type": "string",
            "description": "The time that the Collector Watchdog was last updated, in local time format",
            "readOnly": true
          },
          "hasFailOverDevice": {
            "type": "boolean",
            "description": "Whether the collector has failover devices",
            "readOnly": true
          },
          "collectorGroupName": {
            "type": "string",
            "description": "The name of the group the Collector is in",
            "readOnly": true
          },
          "netscanVersion": {
            "type": "string",
            "description": "The Netscan version associated with the Collector",
            "readOnly": true
          },
          "inSDT": {
            "type": "boolean",
            "description": "The SDT status of the collector",
            "readOnly": true
          },
          "isEncoded": {
            "type": "boolean",
            "readOnly": true
          },
          "format": {
            "type": "string",
            "description": "External collector installation format",
            "readOnly": true
          },
          "updatedOn": {
            "type": "integer",
            "description": "The time that the Collector was last updated, in epoch format",
            "format": "int64",
            "readOnly": true
          },
          "automaticUpgradeInfo": {
            "$ref": "#/components/schemas/AutomaticUpgradeInfo"
          },
          "numberOfHosts": {
            "type": "integer",
            "description": "The number of devices monitored by the Collector",
            "format": "int32",
            "readOnly": true
          },
          "collectorConf": {
            "type": "string",
            "description": "The Collector's configuration file",
            "readOnly": true
          },
          "sbproxyConf": {
            "type": "string",
            "description": "The Proxy's configuration",
            "readOnly": true
          },
          "agentConfFields": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "This is key value pairs of collector config properties",
            "readOnly": true
          },
          "lastSentNotificationOnLocal": {
            "type": "string",
            "description": "The time that a notification was last sent for this Collector, in local time format",
            "readOnly": true
          },
          "customProperties": {
            "type": "array",
            "description": "The custom properties defined for the Collector",
            "items": {
              "$ref": "#/components/schemas/NameAndValue"
            }
          },
          "predefinedConfig": {
            "type": "object",
            "properties": {},
            "description": "Collector configurations",
            "readOnly": true
          },
          "onetimeUpgradeInfo": {
            "$ref": "#/components/schemas/OnetimeUpgradeInfo"
          },
          "wrapperConf": {
            "type": "string",
            "description": "The java service wrapper's configuration",
            "readOnly": true
          },
          "clearSent": {
            "type": "boolean",
            "description": "Whether or not an alert clear notifcation has been sent for this Collector",
            "readOnly": true
          },
          "isLmlogsSyslogEnabled": {
            "type": "boolean",
            "description": "Whether collector has isLmlogsSyslogEnabled flag set as true",
            "readOnly": true
          },
          "status": {
            "type": "integer",
            "description": "The registration status of the Collector. Acceptable values are: 0= unregistered, 1= registered, 2= stopped, 3= suspended",
            "format": "int32",
            "readOnly": true
          },
          "backupAgentId": {
            "type": "integer",
            "description": "The Id of the backup Collector assigned to the Collector",
            "format": "int32"
          },
          "specifiedCollectorDeviceGroupId": {
            "type": "integer",
            "description": "The device group id when create a new collector device",
            "format": "int32"
          },
          "escalatingChainId": {
            "type": "integer",
            "description": "The Id of the escalation chain associated with this Collector",
            "format": "int32"
          },
          "collectorSize": {
            "type": "string",
            "description": "The size of the collector",
            "readOnly": true
          },
          "ackedOnLocal": {
            "type": "string",
            "description": "The time that the Collector was acknowledged (if it is in alert), in local time format",
            "readOnly": true
          },
          "watchdogConf": {
            "type": "string",
            "description": "The Watchdog's configuration",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "The Collector's description",
            "example": "Linux Collector"
          },
          "createdOn": {
            "type": "integer",
            "description": "The time that the Collector was created, in epoch format",
            "format": "int64",
            "readOnly": true
          },
          "platform": {
            "type": "string",
            "description": "The OS of the Collector device (e.g. Linux, Windows)",
            "readOnly": true
          },
          "isDown": {
            "type": "boolean",
            "description": "Whether or not the Collector is currently down",
            "readOnly": true
          },
          "userVisibleHostsNum": {
            "type": "integer",
            "description": "The number of devices monitored by the Collector and visible to the user that made the query",
            "format": "int32",
            "readOnly": true
          },
          "canDowngrade": {
            "type": "boolean",
            "description": "Whether the collector can be downgraded to a lower version",
            "readOnly": true
          },
          "ackComment": {
            "type": "string",
            "description": "The comment associated with the Collector acknowledgement (if it is in alert and acknowledged)",
            "readOnly": true
          },
          "nextUpgradeInfo": {
            "$ref": "#/components/schemas/NextUpgradeInfo"
          },
          "enableLMLogs": {
            "type": "boolean",
            "description": "Usage of the Otel Collector - logging or tracing",
            "readOnly": true
          },
          "suppressAlertClear": {
            "type": "boolean",
            "description": "Whether alert clear notifications are suppressed for the Collector",
            "example": true
          },
          "nextRecipient": {
            "type": "integer",
            "description": "The Id of the next recipient to which alert notifications will be sent",
            "format": "int32",
            "readOnly": true
          },
          "ackedOn": {
            "type": "integer",
            "description": "The epoch at which the Collector was acknowledged (if it is in alert)",
            "format": "int64",
            "readOnly": true
          },
          "userChangeOnLocal": {
            "type": "string",
            "description": "The last time the Collector was updated, in the account time zone",
            "readOnly": true
          },
          "collectorDeviceId": {
            "type": "integer",
            "description": "The device id of the collector device",
            "format": "int32",
            "readOnly": true
          },
          "ackedBy": {
            "type": "string",
            "description": "The user that acknowledged the Collector (if it is in alert)",
            "readOnly": true
          },
          "userPermission": {
            "type": "string",
            "description": "The permission level of the user that made the API request to get Collector information",
            "readOnly": true
          },
          "needAutoCreateCollectorDevice": {
            "type": "boolean",
            "description": "Whether to create a collector device when instance collector, the default value is true",
            "example": true
          },
          "watchdogUpdatedOn": {
            "type": "integer",
            "description": "The time that the Watchdog Services was last updated, in epoch format",
            "format": "int64",
            "readOnly": true
          },
          "canDowngradeReason": {
            "type": "string",
            "description": "The reason why the collector can be downgraded",
            "readOnly": true
          },
          "lastSentNotificationOn": {
            "type": "integer",
            "description": "The time, in epoch format, that a notification was last sent for the Collector",
            "format": "int64",
            "readOnly": true
          },
          "syntheticsEnabled": {
            "type": "boolean",
            "description": "Whether the collector can monitor Synthetic devices (Selenium grid property must be defined)",
            "readOnly": true
          },
          "acked": {
            "type": "boolean",
            "description": "Whether or not the Collector is currently acknowledged",
            "readOnly": true
          },
          "onetimeDowngradeInfo": {
            "$ref": "#/components/schemas/OnetimeUpgradeInfo"
          },
          "copyUrl": {
            "type": "string",
            "description": "Copy Command Url",
            "readOnly": true
          },
          "upTime": {
            "type": "integer",
            "description": "The time the Collector has been up, in seconds",
            "format": "int64",
            "readOnly": true
          },
          "otelVersion": {
            "type": "string",
            "description": "Collector Version",
            "readOnly": true
          },
          "bearerToken": {
            "type": "string",
            "description": "Bearer Token",
            "readOnly": true
          },
          "build": {
            "type": "string",
            "description": "The Collector version",
            "readOnly": true
          },
          "previousVersion": {
            "type": "string",
            "description": "The previous version of the collector, used for downgrading",
            "readOnly": true
          },
          "collectorGroupId": {
            "type": "integer",
            "description": "The Id of the group the Collector is in",
            "format": "int32"
          },
          "createdOnLocal": {
            "type": "string",
            "description": "The time that the Collector was created, in local time format",
            "readOnly": true
          },
          "enableFailBack": {
            "type": "boolean",
            "description": "Whether or not automatic failback is enabled for the Collector, the default value is true",
            "example": true
          },
          "resendIval": {
            "type": "integer",
            "description": "The interval, in minutes, after which alert notifications for the Collector will be resent",
            "format": "int32"
          },
          "arch": {
            "type": "string",
            "description": "The collector architecture (Windows | Linux platform followed by 32 | 64 bit)",
            "readOnly": true
          },
          "otelId": {
            "type": "string",
            "description": "Collector Id",
            "readOnly": true
          },
          "enableFailOverOnCollectorDevice": {
            "type": "boolean",
            "description": "Whether or not the device the Collector is installed on is enabled for fail over",
            "example": true
          },
          "config": {
            "type": "string",
            "description": "Collector Config",
            "readOnly": true
          }
        }
      },
      "DataSourceAttribute": {
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "StatsDMetricDefinition": {
        "type": "object",
        "properties": {
          "consolidateFunction": {
            "type": "integer",
            "format": "int32"
          },
          "display": {
            "$ref": "#/components/schemas/StatsDGraphDisplay"
          },
          "name": {
            "type": "string"
          },
          "aggregateFunction": {
            "type": "string"
          }
        }
      },
      "SDT": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "endDateTimeOnLocal": {
            "type": "string",
            "description": "The date, time and time zone that the SDT will end at",
            "readOnly": true
          },
          "timezone": {
            "type": "string",
            "description": "The specific timezone for SDT",
            "example": "America/Los_Angeles"
          },
          "sdtType": {
            "type": "string",
            "description": "The type of sdt. The values can be oneTime|weekly|monthly|daily|monthlyByWeek",
            "example": "oneTime"
          },
          "monthDay": {
            "type": "integer",
            "description": "The values can be 1 | 2....| 31. Specifies the day of the month that the SDT will be active for a monthly SDT",
            "format": "int32"
          },
          "weekOfMonth": {
            "type": "string",
            "description": "The week of the month that the SDT will be active for a monthly SDT",
            "example": "1"
          },
          "admin": {
            "type": "string",
            "description": "The name of the user that created the SDT",
            "readOnly": true
          },
          "endDateTime": {
            "type": "integer",
            "description": "The epoch time, in milliseconds, that the SDT will end",
            "format": "int64"
          },
          "type": {
            "type": "string",
            "description": "The type of resource that this SDT is for. The values can be CollectorSDT | DeviceDataSourceInstanceSDT | DeviceBatchJobSDT | DeviceClusterAlertDefSDT | DeviceDataSourceInstanceGroupSDT | DeviceDataSourceSDT | DeviceEventSourceSDT | ResourceGroupSDT | ResourceSDT | WebsiteCheckpointSDT | WebsiteGroupSDT | WebsiteSDT | DeviceLogPipeLineResourceSDT",
            "example": "ResourceGroupSDT"
          },
          "isEffective": {
            "type": "boolean",
            "description": "The values can be true|false, where true: the SDT is currently active\nfalse: the SDT is currently inactive",
            "readOnly": true
          },
          "minute": {
            "type": "integer",
            "description": "The values can be 1 | 2....| 60. Specifies the minute of the hour that the SDT should begin for a repeating SDT",
            "format": "int32"
          },
          "duration": {
            "type": "integer",
            "description": "The duration of the SDT in minutes",
            "format": "int32"
          },
          "endHour": {
            "type": "integer",
            "description": "The values can be 1 | 2....| 24. Specifies the hour that the SDT ends for a repeating SDT",
            "format": "int32"
          },
          "startDateTime": {
            "type": "integer",
            "description": "The epoch time, in milliseconds, that the SDT will start",
            "format": "int64"
          },
          "hour": {
            "type": "integer",
            "description": "The values can be 1 | 2....| 24. Specifies the hour that the SDT will start for a repeating SDT (daily, weekly, or monthly)",
            "format": "int32"
          },
          "startDateTimeOnLocal": {
            "type": "string",
            "description": "The date, time and time zone that the SDT will end at",
            "readOnly": true
          },
          "weekDay": {
            "type": "string",
            "description": "The week day of sdt. The values can be SUNDAY|MONDAY|TUESDAY|WEDNESDAY|THURSDAY|FRIDAY|SATURDAY",
            "example": "Sunday"
          },
          "comment": {
            "type": "string",
            "description": "The notes associated with the SDT",
            "example": "Emergency prod deployment"
          },
          "id": {
            "type": "string",
            "description": "The Id of the SDT. This value will be in the following format \"XX_##\" where XX will refer to the type of SDT and ## will refer to the number of SDTs of that type",
            "readOnly": true
          },
          "endMinute": {
            "type": "integer",
            "description": "The values can be 1 | 2....| 60. Specifies the minute of the hour that the SDT ends for a repeating SDT",
            "format": "int32"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "AwsMediaConnectOutputDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ],
        "x-discriminator-value": "ad_awsmediaconnectoutput"
      },
      "DeviceInstanceDataPaginationResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "searchId": {
            "type": "string",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeviceInstanceData"
            }
          }
        }
      },
      "SaasZoomPlanUsageCollectorAttributeV3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "required": [
              "planType"
            ],
            "type": "object",
            "properties": {
              "period": {
                "type": "integer",
                "format": "int32"
              },
              "planType": {
                "type": "string"
              }
            }
          }
        ]
      },
      "DeviceProperty": {
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The resource property name"
          },
          "value": {
            "type": "string",
            "description": "The resource property value"
          }
        }
      },
      "AwsBillingReportDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "required": [
              "awsBillingReportAttribute"
            ],
            "type": "object",
            "properties": {
              "awsBillingReportAttribute": {
                "type": "string"
              }
            }
          }
        ],
        "x-discriminator-value": "ad_awsbillingreport"
      },
      "GaugeWidgetData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WidgetData"
          },
          {
            "type": "object",
            "properties": {
              "maxValue": {
                "type": "number",
                "format": "double",
                "readOnly": true
              },
              "legend": {
                "type": "string",
                "readOnly": true
              },
              "peakTime": {
                "type": "integer",
                "format": "int64",
                "readOnly": true
              },
              "historyTimestamps": {
                "type": "array",
                "readOnly": true,
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "displayUnit": {
                "type": "string"
              },
              "peakTimeOnLocal": {
                "type": "string",
                "readOnly": true
              },
              "colorLevel": {
                "type": "integer",
                "format": "int32",
                "readOnly": true
              },
              "peakValue": {
                "type": "number",
                "format": "double",
                "readOnly": true
              },
              "minValue": {
                "type": "number",
                "format": "double",
                "readOnly": true
              },
              "displayType": {
                "type": "integer",
                "format": "int32"
              },
              "showPeak": {
                "type": "boolean",
                "readOnly": true
              },
              "currentValue": {
                "type": "number",
                "format": "double",
                "readOnly": true
              },
              "historyValues": {
                "type": "object",
                "properties": {},
                "readOnly": true
              }
            }
          }
        ],
        "x-discriminator-value": "gauge"
      },
      "RestHighestPriorityCollectorStatus": {
        "type": "object",
        "properties": {
          "inSDT": {
            "type": "boolean",
            "description": "The SDT status of the highest priority sub collector",
            "readOnly": true
          },
          "acked": {
            "type": "boolean",
            "description": "The acked status of the highest priority sub collector",
            "readOnly": true
          },
          "isDown": {
            "type": "boolean",
            "description": "The down status of the highest priority sub collector",
            "readOnly": true
          },
          "status": {
            "type": "integer",
            "description": "The status of the highest priority sub collector",
            "format": "int32",
            "readOnly": true
          }
        }
      },
      "AggregateCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object"
          }
        ]
      },
      "SaasO365ServiceHealthDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ]
      },
      "AwsAccountId": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string"
          }
        }
      },
      "WebsiteIndividualsStatusWidget": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Widget"
          },
          {
            "required": [
              "locations"
            ],
            "type": "object",
            "properties": {
              "isInternal": {
                "type": "boolean",
                "description": "Whether it is an internal website check",
                "readOnly": true
              },
              "websiteName": {
                "type": "string",
                "description": "The name of the website that status is displayed for"
              },
              "websiteId": {
                "type": "integer",
                "description": "The id of the website that status is displayed for",
                "format": "int32"
              },
              "websiteGroupId": {
                "type": "integer",
                "description": "The id of the group associated with the website that status is displayed for",
                "format": "int32"
              },
              "locations": {
                "type": "array",
                "description": "The checkpoint locations for which data is displayed",
                "items": {
                  "$ref": "#/components/schemas/LocationData"
                }
              },
              "websiteGroupName": {
                "type": "string",
                "description": "The group associated with the website that status is displayed for",
                "readOnly": true
              },
              "graph": {
                "type": "string",
                "description": "The website graph name - this should always be checkpointStatus"
              }
            }
          }
        ],
        "x-discriminator-value": "websiteindividualstatus"
      },
      "AwsWebACLWafV2DiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ],
        "x-discriminator-value": "ad_awswebaclwafv2"
      },
      "SNMPAutoDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "required": [
              "OID",
              "discoveryType",
              "lookupOID"
            ],
            "type": "object",
            "properties": {
              "lookupOID": {
                "type": "string"
              },
              "externalResourceID": {
                "type": "string"
              },
              "descriptionOID": {
                "type": "string"
              },
              "externalResourceType": {
                "type": "string"
              },
              "OID": {
                "type": "string"
              },
              "ILP": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SNMPILP"
                }
              },
              "discoveryType": {
                "type": "string"
              },
              "enableSNMPILP": {
                "type": "boolean"
              }
            }
          }
        ],
        "x-discriminator-value": "ad_snmp"
      },
      "SysLogEventSource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EventSource"
          },
          {
            "type": "object"
          }
        ],
        "x-discriminator-value": "syslog"
      },
      "NOCWidgetData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WidgetData"
          },
          {
            "type": "object",
            "properties": {
              "ackChecked": {
                "type": "boolean",
                "readOnly": true
              },
              "sdtChecked": {
                "type": "boolean",
                "readOnly": true
              },
              "items": {
                "uniqueItems": true,
                "type": "array",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/ItemData"
                }
              }
            }
          }
        ],
        "x-discriminator-value": "noc"
      },
      "ResultItem": {
        "type": "object",
        "properties": {
          "bottomLabel": {
            "type": "string",
            "readOnly": true
          },
          "value": {
            "type": "string",
            "readOnly": true
          },
          "colorLevel": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        }
      },
      "AlertSlaReport": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReportBase"
          },
          {
            "type": "object",
            "properties": {
              "hostsValType": {
                "type": "string",
                "description": "host | group. The type of entities specified in the hostsVal field"
              },
              "dateRange": {
                "type": "string",
                "description": "The Time Range configured for the report: Last 2 hours | Last 24 hours | Last calendar day | Last 7 days | Last 14 days | Last 30 days | Last calendar month | Last 365 days | Any custom date range in this format: YYYY-MM-dd hh:mm TO YYYY-MM-dd hh:mm"
              },
              "hostsVal": {
                "type": "string",
                "description": "The devices OR groups (use full path) selected for the report, where multiple entities are separated by commas. Note that glob is supported"
              },
              "dataPoint": {
                "type": "string",
                "description": "The datapoints selected for the report, where multiple datapoints are separated by commas"
              },
              "alertLevel": {
                "type": "string",
                "description": "Warn | Error | Critical. The minimum severity of the alert statuses you’d like to evaluate for the specified devices and device groups"
              },
              "alertRule": {
                "type": "string",
                "description": "The name of the Alert Rule that the datapoint alert you’re evaluating will be routed to. Note that if you do not select the correct alert rule, no matching alerts will be displayed"
              },
              "dataSource": {
                "type": "string",
                "description": "The datasource instance selected for the report, in the format DatasourceName-InstanceName (If it is a single instance datasource you can just leave it at DatasourceName)"
              }
            }
          }
        ],
        "x-discriminator-value": "alert sla"
      },
      "NetAppAutoDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "request": {
                "type": "string"
              },
              "instanceName": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "instanceGroupName": {
                "type": "string"
              },
              "instanceValue": {
                "type": "string"
              },
              "instanceDescription": {
                "type": "string"
              },
              "object": {
                "type": "string"
              },
              "instanceLocator": {
                "type": "string"
              }
            }
          }
        ],
        "x-discriminator-value": "ad_netapp"
      },
      "Website": {
        "required": [
          "name",
          "testLocation",
          "type"
        ],
        "type": "object",
        "properties": {
          "template": {
            "type": "object",
            "properties": {},
            "description": "The website template"
          },
          "testLocation": {
            "$ref": "#/components/schemas/WebsiteLocation"
          },
          "groupId": {
            "type": "integer",
            "description": "The id of the group the website is in",
            "format": "int32",
            "readOnly": true
          },
          "overallAlertLevel": {
            "type": "string",
            "description": "The values can be warn|error|critical\nThe level of alert to trigger if the website fails the number of checks specified by transition from the test locations specified by globalSmAlertCond",
            "example": "warn"
          },
          "pollingInterval": {
            "type": "integer",
            "description": "The values can be 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10\nThe polling interval for the website, in units of minutes. This value indicates how often the website is checked. The minimum is 1 minute, and the maximum is 10 minutes",
            "format": "int32"
          },
          "description": {
            "type": "string",
            "description": "The description of the website",
            "example": "Monitor Ebay site response times"
          },
          "disableAlerting": {
            "type": "boolean",
            "description": "The values can be true|false where\ntrue: alerting is disabled for the website\nfalse: alerting is enabled for the website\nIf stopMonitoring=true, then alerting will also be disabled by default for the website"
          },
          "type": {
            "type": "string",
            "description": "The values can be pingcheck|webcheck\nSpecifies the type of service",
            "example": "webcheck"
          },
          "rolePrivileges": {
            "type": "array",
            "description": "The role privilege operation(s) for this website that are granted to the user who made the API request",
            "readOnly": true,
            "items": {
              "type": "string"
            }
          },
          "lastUpdated": {
            "type": "integer",
            "description": "The time (in epoch format) that the website was updated",
            "format": "int64",
            "readOnly": true
          },
          "stopMonitoringByFolder": {
            "type": "boolean",
            "description": "The values can be true|false where\ntrue: monitoring is disabled for all services in the website's folder\nfalse: monitoring is not disabled for all services in website's folder",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "description": "The id of the website",
            "format": "int32",
            "readOnly": true
          },
          "stopMonitoring": {
            "type": "boolean",
            "description": "The values can be true|false where\ntrue: monitoring is disabled for the website\nfalse: monitoring is enabled for the website\nIf stopMonitoring=true, then alerting will also be disabled by default for the website"
          },
          "userPermission": {
            "type": "string",
            "description": "The values can be write|read|ack. The permission level of the user that made the API request"
          },
          "individualSmAlertEnable": {
            "type": "boolean",
            "description": "The values can be true|false where\ntrue: an alert will be triggered if a check fails from an individual test location\nfalse: an alert will not be triggered if a check fails from an individual test location",
            "example": false
          },
          "checkpoints": {
            "type": "array",
            "description": "The checkpoints from the which the website is monitored. This object should reference each location specified in testLocation in addition to an 'Overall' checkpoint",
            "items": {
              "$ref": "#/components/schemas/WebsiteCheckPoint"
            }
          },
          "steps": {
            "type": "array",
            "description": "Required for type=webcheck , An object comprising one or more steps, see the table below for the properties included in each step",
            "items": {
              "$ref": "#/components/schemas/WebCheckStep"
            }
          },
          "transition": {
            "type": "integer",
            "description": "The values can be 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 30 | 60\nThe number of checks that must fail before an alert is triggered",
            "format": "int32"
          },
          "globalSmAlertCond": {
            "type": "integer",
            "description": "The number of test locations that checks must fail at to trigger an alert, where the alert triggered will be consistent with the value of overallAlertLevel. Possible values and corresponding number of Site Monitor locations are\n0 : all\n1 : half\n2 : more than one\n3 : any",
            "format": "int32"
          },
          "isInternal": {
            "type": "boolean",
            "description": "Whether or not the website is internal",
            "example": false
          },
          "collectors": {
            "type": "array",
            "description": "The collectors that are monitoring the website, if the website is internal",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/WebsiteCollectorInfo"
            }
          },
          "domain": {
            "type": "string",
            "description": "Required for type=webcheck , The domain of the service. This is the base URL of the service",
            "example": "www.ebay.com"
          },
          "name": {
            "type": "string",
            "description": "The name of the website",
            "example": "Ebay"
          },
          "useDefaultLocationSetting": {
            "type": "boolean",
            "description": "The values can be true|false where\ntrue: The checkpoint locations configured in the website Default Settings will be used\nfalse: The checkpoint locations specified in the testLocation will be used",
            "example": false
          },
          "useDefaultAlertSetting": {
            "type": "boolean",
            "description": "The values can be true|false where\ntrue: The alert settings configured in the website Default Settings will be used\nfalse: Service Default Settings will not be used, and you will need to specify individualSMAlertEnable, individualAlertLevel, globalSmAlertConf, overallAlertLevel and pollingInterval",
            "example": true
          },
          "individualAlertLevel": {
            "type": "string",
            "description": "The values can be warn|error|critical\nThe level of alert to trigger if the website fails a check from an individual test location",
            "example": "warn"
          },
          "properties": {
            "type": "array",
            "description": "The properties associated with the website",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/NameAndValue"
            }
          },
          "status": {
            "type": "string",
            "description": "Whether the website is dead (the collector is down) or not",
            "readOnly": true
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "MatchPattern": {
        "type": "object",
        "properties": {
          "pattern": {
            "type": "string",
            "description": "The regex or plain text to look for in the file and trigger alert if found"
          },
          "alertLevel": {
            "type": "string",
            "description": "The level of alert to trigger: warn | error | critical"
          }
        }
      },
      "AlertTrendsMetric": {
        "required": [
          "itemType",
          "itemVal"
        ],
        "type": "object",
        "properties": {
          "itemType": {
            "type": "string"
          },
          "itemVal": {
            "type": "string"
          }
        }
      },
      "TCPCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object",
            "properties": {
              "payload": {
                "type": "string"
              },
              "port": {
                "type": "string"
              },
              "encoding": {
                "type": "string"
              },
              "timeout": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "x-discriminator-value": "tcp"
      },
      "AzureLogAnalyticsReplicationJobCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "required": [
              "period"
            ],
            "type": "object",
            "properties": {
              "period": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "SDTPaginationResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "searchId": {
            "type": "string",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SDT"
            }
          }
        }
      },
      "WidgetData": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The widget data type. The values can be noc|alert|batchjob|gmap|netflow|netflowGroup|bigNumber|serviceNOC|gauge|pieChart|table|deviceNOC|deviceSLA|serviceSLA|dynamicTable|graph|savedMap",
            "readOnly": true
          },
          "title": {
            "type": "string",
            "description": "The widget title"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "NetscanPaginationResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "searchId": {
            "type": "string",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Netscan"
            }
          }
        }
      },
      "AwsBillingCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object"
          }
        ],
        "x-discriminator-value": "awsbilling"
      },
      "AwsClassicElbServiceLimitsCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object",
            "properties": {
              "period": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "x-discriminator-value": "awsclassicelbservicelimits"
      },
      "WebsiteGroup": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "fullPath": {
            "type": "string",
            "description": "The full path of the group",
            "readOnly": true
          },
          "stopMonitoring": {
            "type": "boolean",
            "description": "The values can be true|false where\ntrue: monitoring is disabled for the websites in the group\nfalse: monitoring is enabled for the websites in the group\nIf stopMonitoring=true, then alerting will also be disabled by default for the websites in the group"
          },
          "userPermission": {
            "type": "string",
            "description": "The permission level of the user that made the API request. The values can be write|read|ack",
            "readOnly": true
          },
          "testLocation": {
            "$ref": "#/components/schemas/WebsiteLocation"
          },
          "hasWebsitesDisabled": {
            "type": "boolean",
            "description": "Indicates if there are websites disabled in this group",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "The description of the group",
            "example": "Amazon web and ping checks"
          },
          "disableAlerting": {
            "type": "boolean",
            "description": "The values can be true|false where\ntrue: alerting is disabled for the websites in the group\nfalse: alerting is enabled for the websites in the group\nIf stopMonitoring=true, then alerting will also be disabled by default for the websites in the group",
            "example": false
          },
          "rolePrivileges": {
            "type": "array",
            "description": "The privilege operations of the user's role that made the API request.  The array can contain the values ack, sdt and/or threshold",
            "readOnly": true,
            "items": {
              "type": "string"
            }
          },
          "parentId": {
            "type": "integer",
            "description": "The Id of the parent group. If parentId=1 then the group exists under the root group",
            "format": "int32"
          },
          "numOfDirectWebsites": {
            "type": "integer",
            "description": "The number of direct websites in this group",
            "format": "int32",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "The name of the group",
            "example": "Amazon Website Checks"
          },
          "numOfDirectSubGroups": {
            "type": "integer",
            "description": "The number of direct website groups in this group (excluding those in subgroups)",
            "format": "int32",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "description": "The Id of the group",
            "format": "int32",
            "readOnly": true
          },
          "numOfWebsites": {
            "type": "integer",
            "description": "The number of websites in the service group, including the websites in sub groups",
            "format": "int32",
            "readOnly": true
          },
          "properties": {
            "type": "array",
            "description": "The website folder properties",
            "items": {
              "$ref": "#/components/schemas/NameAndValue"
            }
          }
        }
      },
      "AzureAppServiceEnvironmentMultiRolePoolDiscoverMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ]
      },
      "ObjectNode": {
        "type": "object"
      },
      "GcpVpnTunnelDiscoveryMethodV3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ]
      },
      "AzureBackupProtectedItemHealthCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object"
          }
        ]
      },
      "OverviewGraphWidget": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Widget"
          },
          {
            "required": [
              "dsigId",
              "hId"
            ],
            "type": "object",
            "properties": {
              "hostName": {
                "type": "string",
                "readOnly": true
              },
              "graphName": {
                "type": "string",
                "readOnly": true
              },
              "hId": {
                "type": "integer",
                "format": "int32"
              },
              "dsigId": {
                "type": "integer",
                "format": "int32"
              },
              "dsName": {
                "type": "string",
                "readOnly": true
              },
              "dsId": {
                "type": "integer",
                "format": "int32"
              },
              "dsigName": {
                "type": "string",
                "readOnly": true
              },
              "graphId": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "x-discriminator-value": "ograph"
      },
      "CustomFlexibleVirtualDataSourceEx": {
        "required": [
          "deviceDisplayName",
          "deviceGroupFullPath",
          "display",
          "instanceName",
          "name"
        ],
        "type": "object",
        "properties": {
          "customGraphId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "instanceName": {
            "$ref": "#/components/schemas/GlobMatchToggle"
          },
          "display": {
            "$ref": "#/components/schemas/GraphDisplay"
          },
          "aggregateFunction": {
            "type": "string"
          },
          "deviceDisplayName": {
            "$ref": "#/components/schemas/GlobMatchToggle"
          },
          "dataPointName": {
            "type": "string"
          },
          "dataSourceId": {
            "type": "integer",
            "format": "int32"
          },
          "dataPointId": {
            "type": "integer",
            "format": "int32"
          },
          "dataSourceFullName": {
            "type": "string"
          },
          "consolidateFunction": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "deviceGroupFullPath": {
            "$ref": "#/components/schemas/GlobMatchToggle"
          }
        }
      },
      "Netscan": {
        "required": [
          "duplicate",
          "method",
          "name",
          "schedule"
        ],
        "type": "object",
        "properties": {
          "creator": {
            "type": "string",
            "description": "The user that created the policy",
            "readOnly": true,
            "example": "sarah@logicmonitor.com"
          },
          "collectorGroupName": {
            "type": "string",
            "description": "The name of the group of the Collector associated with this Netscan",
            "readOnly": true,
            "example": "Prod"
          },
          "method": {
            "type": "string",
            "description": "The method that should be used to discover devices. The values can be nmap (ICMP Ping)|nec2 (EC2)|enhancedScript|script",
            "example": "nmap"
          },
          "collectorGroup": {
            "type": "integer",
            "description": "The ID of the group of the Collector associated with this Netscan",
            "format": "int32",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "The description of the Netscan Policy",
            "example": "Discovers devices within the office network for monitoring"
          },
          "nextStart": {
            "type": "string",
            "description": "The date and time of the next start time of the scan - displayed as manual if the scan does not run on a schedule",
            "readOnly": true,
            "example": "2018-09-07 15:12:00 PDT"
          },
          "duplicate": {
            "$ref": "#/components/schemas/ExcludeDuplicateIps"
          },
          "version": {
            "type": "integer",
            "description": "The Id of the device",
            "format": "int32"
          },
          "collector": {
            "type": "integer",
            "description": "The ID of the Collector associated with this Netscan",
            "format": "int32"
          },
          "ignoreSystemIPsDuplicates": {
            "type": "boolean",
            "description": "Ignore system.ips when checking for duplicate resources",
            "readOnly": true
          },
          "schedule": {
            "$ref": "#/components/schemas/RestSchedule"
          },
          "collectorDescription": {
            "type": "string",
            "description": "The description of the Collector associated with this Netscan",
            "readOnly": true,
            "example": "Prod CollectorA"
          },
          "name": {
            "type": "string",
            "description": "The name of the Netscan Policy",
            "example": "Office Network"
          },
          "nextStartEpoch": {
            "type": "integer",
            "description": "The epoch of the next start time of the scan - displayed as 0 if the scan does not run on a schedule",
            "format": "int64",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "description": "The ID of the Netscan Policy",
            "format": "int32",
            "readOnly": true
          },
          "nsgId": {
            "type": "integer",
            "description": "The ID of the group the policy belongs to",
            "format": "int32"
          },
          "group": {
            "type": "string",
            "description": "The group the Netscan policy should belong to",
            "example": "RT_check"
          }
        },
        "discriminator": {
          "propertyName": "method"
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "errorMessage": {
            "type": "string",
            "description": "The error message",
            "readOnly": true
          },
          "errorCode": {
            "type": "integer",
            "description": "The error code",
            "format": "int32",
            "readOnly": true
          },
          "errorDetail": {
            "type": "object",
            "properties": {},
            "description": "The error detail",
            "readOnly": true
          }
        }
      },
      "PieChartWidget": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Widget"
          },
          {
            "required": [
              "pieChartInfo"
            ],
            "type": "object",
            "properties": {
              "pieChartInfo": {
                "$ref": "#/components/schemas/PieChartInfo"
              }
            }
          }
        ],
        "x-discriminator-value": "piechart"
      },
      "AzureBillingDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "required": [
              "azureBillingType"
            ],
            "type": "object",
            "properties": {
              "azureBillingType": {
                "type": "string"
              }
            }
          }
        ],
        "x-discriminator-value": "ad_azurebilling"
      },
      "NTLMAuthentication": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Authentication"
          },
          {
            "type": "object",
            "properties": {
              "domain": {
                "type": "string"
              }
            }
          }
        ],
        "x-discriminator-value": "ntlm"
      },
      "PieChartDataPoint": {
        "required": [
          "deviceDisplayName",
          "deviceGroupFullPath",
          "instanceName",
          "name"
        ],
        "type": "object",
        "properties": {
          "dataSourceId": {
            "type": "integer",
            "format": "int32"
          },
          "dataPointName": {
            "type": "string"
          },
          "top10": {
            "type": "boolean"
          },
          "dataPointId": {
            "type": "integer",
            "format": "int32"
          },
          "instanceName": {
            "type": "string"
          },
          "dataSourceFullName": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "aggregateFunction": {
            "type": "string"
          },
          "deviceGroupFullPath": {
            "type": "string"
          },
          "deviceDisplayName": {
            "type": "string"
          },
          "aggregate": {
            "type": "boolean"
          }
        }
      },
      "AzureVwanVpnConnectionCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object"
          }
        ]
      },
      "DeviceStatus": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Widget"
          },
          {
            "required": [
              "deviceId"
            ],
            "type": "object",
            "properties": {
              "deviceId": {
                "type": "integer",
                "format": "int32"
              },
              "deviceDisplayName": {
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "x-discriminator-value": "devicestatus"
      },
      "WebsiteCheckpointSDT": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SDT"
          },
          {
            "type": "object",
            "properties": {
              "websiteName": {
                "type": "string"
              },
              "checkpointName": {
                "type": "string"
              },
              "checkpointId": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "x-discriminator-value": "websitecheckpointsdt"
      },
      "AzureEABillingCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object"
          }
        ]
      },
      "AzureVwanVpnConnectionMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ]
      },
      "DeviceGroupDataSource": {
        "type": "object",
        "properties": {
          "stopMonitoring": {
            "type": "boolean",
            "description": "Boolean flag for enabling/disabling monitoring of DataSource"
          },
          "dataSourceId": {
            "type": "integer",
            "description": "The ID of the DataSource",
            "format": "int32",
            "readOnly": true
          },
          "dataSourceGroupName": {
            "type": "string",
            "description": "The DataSource Group name",
            "readOnly": true
          },
          "deviceGroupId": {
            "type": "integer",
            "description": "The ID of the Device Group for the DataSource",
            "format": "int32",
            "readOnly": true
          },
          "dataSourceDisplayName": {
            "type": "string",
            "description": "The Display Name of the DataSource",
            "readOnly": true
          },
          "disableAlerting": {
            "type": "boolean",
            "description": "Boolean flag for enabling/disabling alerting for DataSource",
            "readOnly": true
          },
          "dataSourceName": {
            "type": "string",
            "description": "The Name of the DataSource",
            "readOnly": true
          },
          "dataSourceType": {
            "type": "string",
            "description": "The Type of the DataSource",
            "readOnly": true
          }
        }
      },
      "StatsDWidget": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Widget"
          },
          {
            "type": "object",
            "properties": {
              "graphInfo": {
                "$ref": "#/components/schemas/StatsDGraph"
              }
            }
          }
        ],
        "x-discriminator-value": "statsd"
      },
      "SaaSWebexLicenseDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ]
      },
      "AutomaticUpgradeInfo": {
        "required": [
          "dayOfWeek",
          "hour",
          "minute",
          "occurrence",
          "version"
        ],
        "type": "object",
        "properties": {
          "dayOfWeek": {
            "type": "string",
            "example": "MON"
          },
          "hour": {
            "type": "integer",
            "format": "int32"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true
          },
          "level": {
            "type": "string",
            "readOnly": true
          },
          "timezone": {
            "type": "string",
            "example": "Americas/Los Angeles"
          },
          "description": {
            "type": "string",
            "example": "regular MGD updates"
          },
          "occurrence": {
            "type": "string",
            "example": "Any"
          },
          "type": {
            "type": "string",
            "readOnly": true
          },
          "version": {
            "type": "string",
            "example": "MGD"
          },
          "minute": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "GcpAppEngineDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ]
      },
      "OnetimeUpgradeInfo": {
        "required": [
          "majorVersion",
          "minorVersion",
          "startEpoch"
        ],
        "type": "object",
        "properties": {
          "createdBy": {
            "type": "string",
            "readOnly": true
          },
          "level": {
            "type": "string",
            "readOnly": true
          },
          "timezone": {
            "type": "string"
          },
          "endEpoch": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "example": "regular MGD updates"
          },
          "type": {
            "type": "string",
            "readOnly": true
          },
          "majorVersion": {
            "type": "integer",
            "format": "int32"
          },
          "minorVersion": {
            "type": "integer",
            "format": "int32"
          },
          "startEpoch": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "NetflowQoSReportTableRow": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NetflowDataBase"
          },
          {
            "type": "object",
            "properties": {
              "received": {
                "type": "number",
                "description": "the total bytes of this qos type",
                "format": "double",
                "readOnly": true
              },
              "type": {
                "type": "string",
                "description": "this is QoS Type",
                "readOnly": true
              },
              "sent": {
                "type": "number",
                "description": "the total bytes of this qos type",
                "format": "double",
                "readOnly": true
              }
            }
          }
        ],
        "x-discriminator-value": "qosreporttablerow"
      },
      "AwsGlobalNetworkDeviceMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ]
      },
      "NetflowWidget": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Widget"
          },
          {
            "required": [
              "deviceDisplayName"
            ],
            "type": "object",
            "properties": {
              "filter": {
                "type": "string"
              },
              "dataType": {
                "type": "string"
              },
              "netflowFilter": {
                "$ref": "#/components/schemas/NetflowFilters"
              },
              "deviceId": {
                "type": "integer",
                "format": "int32",
                "readOnly": true
              },
              "deviceDisplayName": {
                "type": "string"
              }
            }
          }
        ],
        "x-discriminator-value": "netflow"
      },
      "NetFlowRecord": {
        "type": "object",
        "properties": {
          "srcIP": {
            "type": "string",
            "description": "the source ip of flow record",
            "readOnly": true
          },
          "percentUsage": {
            "type": "number",
            "description": "the percent traffic of the flow record",
            "format": "double",
            "readOnly": true
          },
          "lastEpochInSec": {
            "type": "integer",
            "description": "the end time  of this flow record",
            "format": "int64",
            "readOnly": true
          },
          "ifOut": {
            "type": "integer",
            "description": "the out interface of this flow record",
            "format": "int64",
            "readOnly": true
          },
          "dataType": {
            "type": "string",
            "readOnly": true
          },
          "usage": {
            "type": "number",
            "description": "the total bytes of this flow record (source bytes + destination bytes)",
            "format": "double",
            "readOnly": true
          },
          "srcASN": {
            "type": "integer",
            "description": "source autonomous system number",
            "format": "int64",
            "readOnly": true
          },
          "dstDNS": {
            "type": "string",
            "description": "the dns name of destination ip",
            "readOnly": true
          },
          "srcPort": {
            "type": "integer",
            "description": "the source port of the flow record",
            "format": "int32",
            "readOnly": true
          },
          "firstEpochInSec": {
            "type": "integer",
            "description": "the start time of this flow record",
            "format": "int64",
            "readOnly": true
          },
          "protocol": {
            "type": "string",
            "description": "the protocol name of this flow record",
            "readOnly": true
          },
          "dstPort": {
            "type": "integer",
            "description": "the destination port",
            "format": "int32",
            "readOnly": true
          },
          "ifIn": {
            "type": "integer",
            "description": "the in interface of this flow record",
            "format": "int64",
            "readOnly": true
          },
          "sourceMBytes": {
            "type": "number",
            "description": "the source bytes of this flow record",
            "format": "double",
            "readOnly": true
          },
          "srcAsnName": {
            "type": "string",
            "description": "the name of src ASN number",
            "readOnly": true
          },
          "srcDNS": {
            "type": "string",
            "description": "the dns name of source ip",
            "readOnly": true
          },
          "destinationMBytes": {
            "type": "number",
            "description": "the destination byte of this flow record",
            "format": "double",
            "readOnly": true
          },
          "dstASN": {
            "type": "integer",
            "description": "destination autonomous system number",
            "format": "int64",
            "readOnly": true
          },
          "dstIP": {
            "type": "string",
            "description": "the destination ip of the flow record",
            "readOnly": true
          },
          "destAsnName": {
            "type": "string",
            "description": "the name of dest ASN number",
            "readOnly": true
          }
        },
        "x-discriminator-value": "flowrecord"
      },
      "TreeNode": {
        "type": "object",
        "properties": {
          "userPermission": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "DNSCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object"
          }
        ],
        "x-discriminator-value": "dns"
      },
      "WebsiteSDT": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SDT"
          },
          {
            "type": "object",
            "properties": {
              "websiteName": {
                "type": "string",
                "description": "The name of the website that the SDT applies to"
              },
              "websiteId": {
                "type": "integer",
                "description": "The Id of the website that the SDT applies to",
                "format": "int32"
              }
            }
          }
        ],
        "x-discriminator-value": "websitesdt"
      },
      "DeviceDataSourceData": {
        "type": "object",
        "properties": {
          "instances": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/RawDataValues"
            },
            "readOnly": true
          },
          "dataPoints": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string"
            }
          },
          "nextPageParams": {
            "type": "string",
            "readOnly": true
          },
          "dataSourceName": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "CustomVirtualDataPoint": {
        "type": "object",
        "properties": {
          "rpn": {
            "type": "string"
          },
          "customGraphId": {
            "type": "integer",
            "format": "int32"
          },
          "display": {
            "$ref": "#/components/schemas/GraphDisplay"
          },
          "name": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AwsEbsVolumeSnapshotCollectorAttributeV3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object",
            "properties": {
              "period": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "PDHAutoDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "required": [
              "category",
              "objRegex"
            ],
            "type": "object",
            "properties": {
              "objRegex": {
                "type": "string"
              },
              "category": {
                "type": "string"
              }
            }
          }
        ],
        "x-discriminator-value": "ad_pdh"
      },
      "JDBCCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object",
            "properties": {
              "password": {
                "type": "string"
              },
              "query": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "username": {
                "type": "string"
              }
            }
          }
        ],
        "x-discriminator-value": "jdbc"
      },
      "DeviceDataSourceInstanceGroupSDT": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SDT"
          },
          {
            "type": "object",
            "properties": {
              "deviceDataSourceInstanceGroupId": {
                "type": "integer",
                "description": "The name of the device datasource instance group that the SDT will be associated with",
                "format": "int32"
              },
              "deviceDataSourceInstanceGroupName": {
                "type": "string",
                "description": "The name of the instance group"
              },
              "deviceDataSourceId": {
                "type": "integer",
                "description": "The id of the device datasource instance group that the SDT will be associated with",
                "format": "int32"
              },
              "deviceId": {
                "type": "integer",
                "description": "The id of the device that the SDT will be associated with",
                "format": "int32"
              },
              "deviceDisplayName": {
                "type": "string",
                "description": "The name of the device that the SDT will be associated with"
              },
              "dataSourceName": {
                "type": "string"
              }
            }
          }
        ],
        "x-discriminator-value": "devicedatasourceinstancegroupsdt"
      },
      "UDPCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object",
            "properties": {
              "payload": {
                "type": "string"
              },
              "port": {
                "type": "string"
              }
            }
          }
        ],
        "x-discriminator-value": "udp"
      },
      "DynamicTableWidgetData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WidgetData"
          },
          {
            "type": "object",
            "properties": {
              "columnHeaders": {
                "type": "array",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/ColumnHeader"
                }
              },
              "rows": {
                "type": "array",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/RowData"
                }
              }
            }
          }
        ],
        "x-discriminator-value": "dynamictable"
      },
      "SDTHistory": {
        "type": "object",
        "properties": {
          "duration": {
            "type": "integer",
            "description": "The duration of the SDT, in minutes",
            "format": "int64",
            "readOnly": true
          },
          "itemId": {
            "type": "integer",
            "description": "The ID of the resource in SDT, e.g. the group or device in SDT",
            "format": "int32",
            "readOnly": true
          },
          "approximateEndEpoch": {
            "type": "integer",
            "description": "The end epoch for the SDT",
            "format": "int64",
            "readOnly": true
          },
          "admin": {
            "type": "string",
            "description": "The user that added the SDT",
            "readOnly": true,
            "example": "sarah@logicmonitor.com"
          },
          "comment": {
            "type": "string",
            "description": "The comment associated with the SDT",
            "readOnly": true,
            "example": "migrating devices to new network and new IP addresses"
          },
          "id": {
            "type": "string",
            "description": "The ID of the SDT",
            "readOnly": true,
            "example": "b-nTH4ECTH2rZ-Q548GOKg"
          },
          "type": {
            "type": "string",
            "description": "The SDT type",
            "readOnly": true,
            "example": "DeviceGroupSDT"
          },
          "approximateStartEpoch": {
            "type": "integer",
            "description": "The start epoch for the SDT",
            "format": "int64",
            "readOnly": true
          }
        }
      },
      "DeviceDataSourceInstanceConfig": {
        "type": "object",
        "properties": {
          "instanceName": {
            "type": "string",
            "description": "Device datasource instance name",
            "readOnly": true
          },
          "deviceDataSourceId": {
            "type": "integer",
            "description": "Device datasource id",
            "format": "int32",
            "readOnly": true
          },
          "excludeLines": {
            "type": "array",
            "description": "advanceDiffChecker",
            "readOnly": true,
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "configStatus": {
            "type": "integer",
            "description": "Configuration file collect status",
            "format": "int32",
            "readOnly": true
          },
          "comparedWith": {
            "type": "string",
            "description": "Version compared with and found difference",
            "readOnly": true
          },
          "version": {
            "type": "integer",
            "description": "Config version",
            "format": "int64",
            "readOnly": true
          },
          "deviceId": {
            "type": "integer",
            "description": "Device id",
            "format": "int32",
            "readOnly": true
          },
          "deltaConfig": {
            "type": "array",
            "description": "Configuration file diff",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/DeviceDataSourceInstanceConfigDiff"
            }
          },
          "deviceDisplayName": {
            "type": "string",
            "description": "Device display name",
            "readOnly": true
          },
          "dataSourceName": {
            "type": "string",
            "description": "Datasource name",
            "readOnly": true
          },
          "alerts": {
            "type": "array",
            "description": "Alerts associated to this configuration file",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/DeviceDataSourceInstanceConfigAlert"
            }
          },
          "dataSourceId": {
            "type": "integer",
            "description": "Configsource id",
            "format": "int32",
            "readOnly": true
          },
          "instanceId": {
            "type": "integer",
            "description": "Device datasource instance id",
            "format": "int32",
            "readOnly": true
          },
          "configErrMsg": {
            "type": "string",
            "description": "Configuration file collect error message",
            "readOnly": true
          },
          "changeStatus": {
            "type": "string",
            "description": "Configuration file change status, if the first configuration then it is Added, else Changed, values can be : Add|Change ",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "description": "The id of the datasource",
            "readOnly": true
          },
          "pollTimestamp": {
            "type": "integer",
            "description": "Datasource poll timestamp in milliseconds",
            "format": "int64",
            "readOnly": true
          },
          "config": {
            "type": "string",
            "description": "Configuration file content",
            "readOnly": true
          }
        }
      },
      "RestAzureAccountTestV3": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "secretKey": {
            "type": "string"
          },
          "checkedServices": {
            "type": "string"
          },
          "subscriptionIds": {
            "type": "string"
          },
          "groupId": {
            "type": "integer",
            "format": "int32"
          },
          "tenantId": {
            "type": "string"
          },
          "isChinaAccount": {
            "type": "boolean"
          }
        }
      },
      "ExcludeDuplicateIps": {
        "type": "object",
        "properties": {
          "collectors": {
            "type": "array",
            "description": "The collectors for which monitored devices should be used to identify and exclude duplicate IPs, if duplicate type is 4",
            "example": "[\"ip-172-31-45-179.us-west-2.compute.internal\"]",
            "items": {
              "type": "string"
            }
          },
          "groups": {
            "type": "array",
            "description": "The groups for which devices should be used to identify and exclude duplicate IPs, if duplicate type is 3",
            "example": "[\"Network Devices\"]",
            "items": {
              "type": "string"
            }
          },
          "type": {
            "type": "integer",
            "description": "The types of duplicate IPs that should be excluded. The values can be 1|2|3|4 which denotes\n1: matching any monitored devices\n2: matching devices already discovered by this scan\n3: matching devices in these groups\n4: matching devices assigned to these collectors\n",
            "format": "int32"
          }
        }
      },
      "Role": {
        "required": [
          "name",
          "privileges"
        ],
        "type": "object",
        "properties": {
          "enableRemoteSessionInCompanyLevel": {
            "type": "boolean",
            "description": "Whether Remote Session should be enabled at the account level",
            "readOnly": true
          },
          "privileges": {
            "type": "array",
            "description": "The account privileges associated with the role. Privileges can be added to a role for each area of your account",
            "items": {
              "$ref": "#/components/schemas/Privilege"
            }
          },
          "userPermission": {
            "type": "string",
            "description": "The permission of current role with the admin. The values can be write|read|none",
            "readOnly": true,
            "example": "read"
          },
          "description": {
            "type": "string",
            "description": "The description of the role",
            "example": "Administrator can do everything, including security-sensitive actions"
          },
          "customHelpLabel": {
            "type": "string",
            "description": "The label for the custom help URL as it will appear in the 'Help & Support' dropdown menu",
            "example": "Internal Support Resources"
          },
          "customHelpURL": {
            "type": "string",
            "description": "The URL that should be added to the 'Help & Support' dropdown menu",
            "example": "https://logicmonitor.com/support"
          },
          "associatedUserCount": {
            "type": "integer",
            "description": "The count of the users which are belongs to the role",
            "format": "int32",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "The name of the role",
            "example": "administrator"
          },
          "id": {
            "type": "integer",
            "description": "The Id of the role",
            "format": "int32",
            "readOnly": true
          },
          "twoFARequired": {
            "type": "boolean",
            "description": "Whether Two-Factor Authentication should be required for this role",
            "example": true
          },
          "requireEULA": {
            "type": "boolean",
            "description": "Whether or not users assigned this role should be required to acknowledge the EULA (end user license agreement)",
            "example": true
          },
          "acctRequireTwoFA": {
            "type": "boolean",
            "description": "Whether Two-Factor Authentication should be required for the entire account",
            "readOnly": true
          },
          "roleGroupId": {
            "type": "integer",
            "description": "The group Id of the role",
            "format": "int32"
          }
        }
      },
      "AzureBackupProtectedItemBackupJobDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ]
      },
      "NbarApplicationNames": {
        "type": "object",
        "properties": {
          "operator": {
            "type": "string"
          },
          "applicationName": {
            "type": "string"
          }
        }
      },
      "ReportRecipient": {
        "required": [
          "addr",
          "type"
        ],
        "type": "object",
        "properties": {
          "additionInfo": {
            "type": "string",
            "description": "If the type is admin and the method is email, the field should indicate the actual email address of the admin",
            "readOnly": true
          },
          "method": {
            "type": "string",
            "description": "Specifies the method to get the report. This should always be email",
            "example": "email"
          },
          "type": {
            "type": "string",
            "description": "Specifies the recipient type. The values can be admin|arbitrary|group, where admin refers to a user in the account and arbitrary refers to an email address not associated with a user account.",
            "example": "admin"
          },
          "addr": {
            "type": "string",
            "description": "This should be a username if type=admin, or an email address if type=arbitrary",
            "example": "sarah"
          }
        }
      },
      "AdminPaginationResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "searchId": {
            "type": "string",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Admin"
            }
          }
        }
      },
      "CIMCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object",
            "properties": {
              "ip": {
                "type": "string",
                "readOnly": true
              },
              "namespace": {
                "type": "string"
              },
              "queryClass": {
                "type": "string"
              },
              "queryIndex": {
                "type": "string"
              },
              "queryValue": {
                "type": "string"
              },
              "fields": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DataSourceAttribute"
                }
              }
            }
          }
        ],
        "x-discriminator-value": "cim"
      },
      "ScriptAutoDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "required": [
              "type"
            ],
            "type": "object",
            "properties": {
              "winScript": {
                "type": "string"
              },
              "groovyScript": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "linuxCmdline": {
                "type": "string"
              },
              "linuxScript": {
                "type": "string"
              },
              "winCmdline": {
                "type": "string"
              }
            }
          }
        ],
        "x-discriminator-value": "ad_script"
      },
      "DummyAutoDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "required": [
              "generateCount",
              "getGenerateCount2",
              "maxNumber"
            ],
            "type": "object",
            "properties": {
              "generateCount": {
                "type": "integer",
                "format": "int32"
              },
              "getGenerateCount2": {
                "type": "integer",
                "format": "int32"
              },
              "maxNumber": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "x-discriminator-value": "ad_dummy"
      },
      "CollectorVersion": {
        "type": "object",
        "properties": {
          "feature": {
            "type": "boolean",
            "description": "Specifies if this is a feature version",
            "readOnly": true
          },
          "stable": {
            "type": "boolean",
            "description": "False for early release. True for general release",
            "readOnly": true
          },
          "releaseEpoch": {
            "type": "integer",
            "description": "Release Epoch for official releases",
            "format": "int64",
            "readOnly": true
          },
          "has32bitWindows": {
            "type": "boolean",
            "description": "True if Windows collector available",
            "readOnly": true
          },
          "has32bitLinux": {
            "type": "boolean",
            "description": "True if Linux collector available",
            "readOnly": true
          },
          "majorVersion": {
            "type": "integer",
            "description": "The collector major version",
            "format": "int32",
            "readOnly": true
          },
          "minorVersion": {
            "type": "integer",
            "description": "The collector minor version",
            "format": "int32",
            "readOnly": true
          },
          "mandatory": {
            "type": "boolean",
            "description": "True if collector is a required release",
            "readOnly": true
          }
        }
      },
      "AwsEC2ReservedInstanceDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "required": [
              "instanceName"
            ],
            "type": "object",
            "properties": {
              "instanceName": {
                "type": "string"
              }
            }
          }
        ],
        "x-discriminator-value": "ad_awsec2reservedinstance"
      },
      "AzureCostManagementSubscriptionsDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ]
      },
      "WebsiteGroupPaginationResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "searchId": {
            "type": "string",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebsiteGroup"
            }
          }
        }
      },
      "WebsitePaginationResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "searchId": {
            "type": "string",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Website"
            }
          }
        }
      },
      "AwsCognitoIdentityProvidersDiscoveryMethodV3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ]
      },
      "JMXAutoDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "required": [
              "path",
              "ports",
              "url"
            ],
            "type": "object",
            "properties": {
              "path": {
                "type": "string"
              },
              "ports": {
                "type": "string"
              },
              "url": {
                "type": "string"
              }
            }
          }
        ],
        "x-discriminator-value": "ad_jmx"
      },
      "CustomGraphWidget": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Widget"
          },
          {
            "type": "object",
            "properties": {
              "graphInfo": {
                "$ref": "#/components/schemas/CustomGraph"
              }
            }
          }
        ],
        "x-discriminator-value": "cgraph"
      },
      "ConfigSourceUpdateReasonsPaginationResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "searchId": {
            "type": "string",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateReason"
            }
          }
        }
      },
      "NetflowFilters": {
        "type": "object",
        "properties": {
          "nodeB": {
            "type": "string"
          },
          "qosType": {
            "type": "string"
          },
          "deviceInterfaces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InterfacesFilter"
            }
          },
          "ports": {
            "type": "string"
          },
          "protocol": {
            "type": "string"
          },
          "ipVersion": {
            "type": "string"
          },
          "netflowDevices": {
            "type": "array",
            "description": "Netlow filter netflowDevices expression",
            "items": {
              "$ref": "#/components/schemas/NetflowDeviceInfo"
            }
          },
          "top": {
            "type": "integer",
            "format": "int32"
          },
          "appType": {
            "type": "string"
          },
          "nbarApplicationNames": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NbarApplicationNames"
            }
          },
          "nodeA": {
            "type": "string"
          },
          "conversation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConversationFilter"
            }
          },
          "ifNames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "direction": {
            "type": "string"
          }
        }
      },
      "AzureWebAppInstanceDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ]
      },
      "AzureDimensionDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "required": [
              "dimensionName",
              "period"
            ],
            "type": "object",
            "properties": {
              "period": {
                "type": "string"
              },
              "metricName": {
                "type": "string"
              },
              "dimensionName": {
                "type": "string"
              }
            }
          }
        ]
      },
      "AzureVirtualDesktopHostPoolsCollectorAttributeV3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object",
            "properties": {
              "period": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "AzureServiceRegionDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ],
        "x-discriminator-value": "ad_azureserviceregion"
      },
      "UnmonitoredDevices": {
        "type": "object",
        "properties": {
          "deviceType": {
            "type": "string",
            "readOnly": true
          },
          "nspId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "forwardIp": {
            "type": "string",
            "readOnly": true
          },
          "endDate": {
            "type": "string",
            "readOnly": true
          },
          "ip": {
            "type": "string",
            "readOnly": true
          },
          "dns": {
            "type": "string",
            "readOnly": true
          },
          "collectorId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "ports": {
            "type": "string",
            "readOnly": true
          },
          "nspName": {
            "type": "string",
            "readOnly": true
          },
          "deviceStatus": {
            "type": "string",
            "readOnly": true
          },
          "manufacturer": {
            "type": "string",
            "readOnly": true
          },
          "collectorDescription": {
            "type": "string",
            "readOnly": true
          },
          "displayAs": {
            "type": "string",
            "readOnly": true
          },
          "sysName": {
            "type": "string",
            "readOnly": true
          },
          "nseId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "endTimestamp": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "status": {
            "type": "string",
            "readOnly": true
          },
          "nseScanId": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "RestResponse": {
        "type": "object",
        "properties": {
          "diagnostics": {
            "$ref": "#/components/schemas/ArrayNode"
          },
          "data": {
            "$ref": "#/components/schemas/ObjectNode"
          },
          "successes": {
            "$ref": "#/components/schemas/ArrayNode"
          },
          "meta": {
            "$ref": "#/components/schemas/RestResponseMetaBlock"
          },
          "warnings": {
            "$ref": "#/components/schemas/ArrayNode"
          },
          "errors": {
            "$ref": "#/components/schemas/ArrayNode"
          }
        }
      },
      "OpsNoteGroupAllScope": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OpsNoteScope"
          },
          {
            "type": "object",
            "properties": {
              "groupId": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "x-discriminator-value": "groupall"
      },
      "RestNetscanPorts": {
        "type": "object",
        "properties": {
          "isGlobalDefault": {
            "type": "boolean",
            "description": "Whether or not default ports should be used",
            "example": true
          },
          "value": {
            "type": "string",
            "description": "The ports that should be used in the Netscan",
            "example": "21,22,23"
          }
        }
      },
      "ScriptEventSource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EventSource"
          },
          {
            "type": "object",
            "properties": {
              "schedule": {
                "type": "integer",
                "description": "The polling interval for the EventSource",
                "format": "int32"
              },
              "groovyScript": {
                "type": "string",
                "description": "The groovy script contents, if scriptType = embed"
              },
              "scriptType": {
                "type": "string",
                "description": "The type of script: embed | file"
              },
              "windowsScript": {
                "type": "string",
                "description": "The windows script name, if scriptType = file"
              },
              "linuxScript": {
                "type": "string",
                "description": "The linux script name, if scriptType = file"
              },
              "linuxCmdline": {
                "type": "string",
                "description": "Linux script arguments, if applicable"
              },
              "windowsCmdline": {
                "type": "string",
                "description": "Windows script arguments, if applicable"
              }
            }
          }
        ],
        "x-discriminator-value": "scriptevent"
      },
      "PropertyPaginationResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "searchId": {
            "type": "string",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityProperty"
            }
          }
        }
      },
      "AuditLogReport": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReportBase"
          },
          {
            "type": "object",
            "properties": {
              "filter": {
                "type": "string",
                "description": "The filter setting for the report"
              },
              "sortedBy": {
                "type": "string",
                "description": "The sort option for the repor"
              },
              "dateRange": {
                "type": "string",
                "description": "The Time Range configured for the report: Last 2 hours | Last 24 hours | Last calendar day | Last 7 days | Last 14 days | Last 30 days | Last calendar month | Last 365 days | Any custom date range in this format: YYYY-MM-dd hh:mm TO YYYY-MM-dd hh:mm"
              },
              "columns": {
                "type": "array",
                "description": "The columns displayed in the report",
                "items": {
                  "$ref": "#/components/schemas/DynamicColumn"
                }
              },
              "username": {
                "type": "string",
                "description": "The user name of the user filter setting for the report"
              }
            }
          }
        ],
        "x-discriminator-value": "audit log"
      },
      "Admin": {
        "required": [
          "email",
          "password",
          "roles",
          "username"
        ],
        "type": "object",
        "properties": {
          "lastName": {
            "type": "string",
            "description": "The last name associated with the user",
            "example": "Doe"
          },
          "note": {
            "type": "string",
            "description": "Any notes assocaited with the user",
            "example": "John Doe is an Admin on this Portal"
          },
          "viewPermission": {
            "type": "object",
            "properties": {},
            "description": "The account tabs that will be visible to the user",
            "example": "{\n\n\"Resources\" : true,\n\"Websites\" : true,\n\"Reports\" : true,\n\"Dashboards\" : true,\n\"Alerts\" : true,\n\"Settings\" : true,\n\"Maps\" : true,\n\"Logs\" : true,\n\"Traces\" : true\n\"Modules\" : true\n}"
          },
          "timezone": {
            "type": "string",
            "description": "The timezone of the user",
            "example": "America/Los Angeles"
          },
          "roles": {
            "uniqueItems": true,
            "type": "array",
            "description": "The roles assigned to the user",
            "items": {
              "$ref": "#/components/schemas/Role"
            }
          },
          "lastLoginOn": {
            "type": "integer",
            "description": "The time that the user last logged in, in epoch format",
            "format": "int64",
            "readOnly": true
          },
          "lastActionOnLocal": {
            "type": "string",
            "description": "The time, in local format, of the user's last action",
            "readOnly": true
          },
          "smsEmailFormat": {
            "type": "string",
            "description": "The values can be sms | fullText, where sms = 160 characters and fullText = all characters",
            "example": "sms"
          },
          "apionly": {
            "type": "boolean",
            "description": "Specifies whether the user is an API only user. The values can be true|false",
            "example": false
          },
          "lastAuthIp": {
            "type": "string",
            "description": "The Last User IP",
            "readOnly": true
          },
          "apiTokens": {
            "type": "array",
            "description": "Any API Tokens associated with the user",
            "items": {
              "$ref": "#/components/schemas/APIToken"
            }
          },
          "adminGroupIds": {
            "type": "array",
            "description": "The Id(s) of the groups the admin is in, where multiple group ids are comma separated",
            "example": "[1,2,3]",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "password": {
            "type": "string",
            "description": "The password associated with the user",
            "example": "JohnDoe1"
          },
          "lastAction": {
            "type": "string",
            "description": "The last action taken by the user",
            "readOnly": true
          },
          "trainingEmail": {
            "type": "string",
            "description": "The email address for user's Training account",
            "readOnly": true
          },
          "lastActionOn": {
            "type": "integer",
            "description": "The time, in epoch format, of the user's last action",
            "format": "int64",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "description": "The Id of the user",
            "format": "int32",
            "readOnly": true
          },
          "email": {
            "type": "string",
            "description": "The email address associated with the user",
            "example": "john.doe@logicmonitor.com"
          },
          "contactMethod": {
            "type": "string",
            "description": "The values can be email | smsemail. Specifies the contact method for this admin",
            "example": "email"
          },
          "acceptEULAOn": {
            "type": "integer",
            "description": "The time, in epoch format, that the user accepted the EULA (if required to)",
            "format": "int64",
            "readOnly": true
          },
          "immediateForceLogout": {
            "type": "boolean",
            "description": "Specifies whether the user need to be logged off, if Force Password Change is enabled. The values can be true|false",
            "readOnly": true,
            "example": false
          },
          "userPermission": {
            "type": "string",
            "description": "The permission of current user with the admin. values can be write|read|none",
            "readOnly": true,
            "example": "read"
          },
          "smsEmail": {
            "type": "string",
            "description": "The sms email address associated with the user",
            "example": "8054445555@logicmonitor.com"
          },
          "twoFAEnabled": {
            "type": "boolean",
            "description": "Whether or not two factor authentication is enabled for the user",
            "example": false
          },
          "firstName": {
            "type": "string",
            "description": "The first name associated with the user",
            "example": "John"
          },
          "phone": {
            "type": "string",
            "description": "The phone number associated with the user",
            "example": "8054445555"
          },
          "createdBy": {
            "type": "string",
            "description": "Species who created the user. This may be another user, SAML or LogicMonitor",
            "example": "Chief Admin"
          },
          "forcePasswordChange": {
            "type": "boolean",
            "description": "Whether or not the user should be forced to change their password on the next login",
            "example": true
          },
          "tenantId": {
            "type": "integer",
            "description": "The tenant id of the user",
            "format": "int32",
            "readOnly": true
          },
          "acceptEULA": {
            "type": "boolean",
            "description": "Whether or not the user is required to accept the EULA (end user license agreement)",
            "example": true
          },
          "userType": {
            "type": "string",
            "description": "The type of user",
            "readOnly": true
          },
          "username": {
            "type": "string",
            "description": "The username associated with the user",
            "example": "John"
          },
          "status": {
            "type": "string",
            "description": "The user's status. The values can be active|suspended",
            "example": "active"
          }
        }
      },
      "EventSourcePaginationResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "searchId": {
            "type": "string",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventSource"
            }
          }
        }
      },
      "GenerateReportResult": {
        "required": [
          "reportId",
          "taskId"
        ],
        "type": "object",
        "properties": {
          "reportId": {
            "type": "integer",
            "description": "The id of the report",
            "format": "int32"
          },
          "taskId": {
            "type": "integer",
            "description": "The task id of the generating process",
            "format": "int64"
          },
          "resulturl": {
            "type": "string",
            "description": "The url of the generated report",
            "readOnly": true
          }
        }
      },
      "BatchJobWidget": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Widget"
          },
          {
            "type": "object",
            "properties": {
              "groupDisplayName": {
                "type": "string",
                "description": "The display name of the device group in LogicMonitor that the batchjob is running on"
              },
              "batchJobId": {
                "type": "integer",
                "description": "The id of the batchjob definition in LogicMonitor",
                "format": "int32"
              },
              "batchJobName": {
                "type": "string",
                "description": "The name of the batchjob definition in LogicMonitor"
              },
              "deviceDisplayName": {
                "type": "string",
                "description": "The display name of the device in LogicMonitor that the batchjob is running on"
              }
            }
          }
        ],
        "x-discriminator-value": "batchjob"
      },
      "DashboardPaginationResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "searchId": {
            "type": "string",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Dashboard"
            }
          }
        }
      },
      "Metric": {
        "required": [
          "dataSourceId"
        ],
        "type": "object",
        "properties": {
          "dataSourceId": {
            "type": "integer",
            "format": "int32"
          },
          "dataPointName": {
            "type": "string"
          },
          "dataPointId": {
            "type": "integer",
            "format": "int32"
          },
          "instances": {
            "type": "string"
          },
          "dataSourceFullName": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "TableWidgetColumn": {
        "required": [
          "columnName",
          "dataPoint"
        ],
        "type": "object",
        "properties": {
          "alternateDataPoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TableWidgetDataPoint"
            }
          },
          "rpn": {
            "type": "string"
          },
          "unitLabel": {
            "type": "string",
            "description": "The unit label"
          },
          "dataPoint": {
            "$ref": "#/components/schemas/TableWidgetDataPoint"
          },
          "columnName": {
            "type": "string"
          },
          "enableForecast": {
            "type": "boolean"
          },
          "roundingDecimal": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AppliesToFunction": {
        "required": [
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "installationMetadata": {
            "$ref": "#/components/schemas/IntegrationMetadata"
          },
          "code": {
            "type": "string",
            "description": "The AppliesTo Function code. Note that special characters may need to be escaped."
          },
          "name": {
            "type": "string",
            "description": "The name of the AppliesTo Function"
          },
          "checksum": {
            "type": "string",
            "description": "The metadata checksum for the LMModule content",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "The description of the AppliesTo Function"
          },
          "id": {
            "minimum": 0,
            "type": "integer",
            "description": "The ID of the AppliesTo Function",
            "format": "int32",
            "readOnly": true
          },
          "lineageId": {
            "type": "string",
            "description": "The lineage Id of the LMModule",
            "readOnly": true
          }
        }
      },
      "AzureBackupJobCollectorAttributeV3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "required": [
              "period"
            ],
            "type": "object",
            "properties": {
              "period": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "GraphOpsNoteScope": {
        "type": "object",
        "properties": {
          "serviceGroupIds": {
            "type": "array",
            "description": "The service group Id",
            "readOnly": true,
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "serviceId": {
            "type": "integer",
            "description": "The service Id",
            "format": "int32",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "description": "The values can be device | service | website",
            "readOnly": true
          },
          "deviceGroupIds": {
            "type": "array",
            "description": "The device group Id",
            "readOnly": true,
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "deviceId": {
            "type": "integer",
            "description": "The device Id",
            "format": "int32",
            "readOnly": true
          }
        }
      },
      "OpsNote": {
        "required": [
          "note"
        ],
        "type": "object",
        "properties": {
          "note": {
            "type": "string",
            "description": "The note message",
            "example": "software update from 1.0.0 to 1.2.4"
          },
          "createdBy": {
            "type": "string",
            "description": "The user that created the Ops Note",
            "readOnly": true
          },
          "scopes": {
            "type": "array",
            "description": "The scopes associated with the note. Each scope has a type of device, service, deviceGroup or serviceGroup. A note with no scope will show up for everything in the account",
            "items": {
              "$ref": "#/components/schemas/OpsNoteScope"
            }
          },
          "id": {
            "type": "string",
            "description": "The id associated with the Ops Note",
            "readOnly": true
          },
          "happenOnInSec": {
            "type": "integer",
            "description": "The date and time associated with the note, in epoch seconds format",
            "format": "int64"
          },
          "tags": {
            "type": "array",
            "description": "The tags that should be associated with the note. Each tag has a unique id and a name - you can either include the name of a new or existing tag, or the id of an existing tag",
            "items": {
              "$ref": "#/components/schemas/OpsNoteTagBase"
            }
          }
        }
      },
      "RestGcpAccountTestV3": {
        "type": "object",
        "properties": {
          "serviceAccountKey": {
            "type": "string"
          },
          "checkedServices": {
            "type": "string"
          },
          "groupId": {
            "type": "integer",
            "format": "int32"
          },
          "projectId": {
            "type": "string"
          }
        }
      },
      "DeviceGroupSDTHistoryPaginationResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "searchId": {
            "type": "string",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SDTHistory"
            }
          }
        }
      },
      "AlertPaginationResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "searchId": {
            "type": "string",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Alert"
            }
          }
        }
      },
      "NOCItemBase": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "SyntheticsSeleniumAutoDiscoveryMethodV3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object",
            "properties": {
              "isInternal": {
                "type": "boolean"
              },
              "checkpoints": {
                "type": "string"
              }
            }
          }
        ]
      },
      "AlertThresholdReport": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReportBase"
          },
          {
            "type": "object",
            "properties": {
              "sortedBy": {
                "type": "string",
                "description": "host | datasource | datapoint\nhost: displayed thresholds will be sorted by device\ndatasource: displayed thresholds will be sorted by datasource instance\ndatapoint: displayed thresholds will be sorted by datapoint (metric)"
              },
              "dataSourceInstanceName": {
                "type": "string",
                "description": "The name of the datasource instance to be included in the report, where the syntax should be dataSourceDisplayName-InstanceName. If you're referencing a single instance datasource, you can just specify dataSourceDisplayName. Glob expressions supported"
              },
              "columns": {
                "type": "array",
                "description": "The columns that will be displayed in the report. You should specify the columns in the order in which you'd like them to be displayed",
                "items": {
                  "$ref": "#/components/schemas/DynamicColumn"
                }
              },
              "dataPoint": {
                "type": "string",
                "description": "The datapoint to be included in the report. Glob expressions supported"
              },
              "deviceDisplayName": {
                "type": "string",
                "description": "The display name of the device(s) to be included in the report. Glob expressions supported"
              },
              "excludeGlobal": {
                "type": "boolean",
                "description": "true: only variations from the global thresholds will be displayed\nfalse: all thresholds will be displayed, including global thresholds an custom group and instance level thresholds\nthe default value is true"
              },
              "groupFullPath": {
                "type": "string",
                "description": "The full path of the group whose member devices you are going to include in the report. Glob expressions supported"
              }
            }
          }
        ],
        "x-discriminator-value": "alert threshold"
      },
      "AwsEcsServiceDetailsCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object",
            "properties": {
              "period": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "x-discriminator-value": "awsecsservicedetails"
      },
      "DeviceInstances": {
        "required": [
          "instanceIds"
        ],
        "type": "object",
        "properties": {
          "instanceIds": {
            "type": "string",
            "description": "the ids of the instances, separated by commas",
            "example": "1,2,3,4,5"
          }
        }
      },
      "IntegrationMetadata": {
        "type": "object",
        "properties": {
          "targetLastPublishedId": {
            "type": "string",
            "description": "Specifies the target last published Id",
            "readOnly": true
          },
          "targetLastPublishedChecksum": {
            "type": "string",
            "description": "The metadata checksum for the target last published LMModule content",
            "readOnly": true
          },
          "targetLastPublishedVersion": {
            "type": "string",
            "description": "Specifies the target last published version",
            "readOnly": true
          },
          "originChecksum": {
            "type": "string",
            "description": "The metadata checksum for the LMModule content",
            "readOnly": true
          },
          "originAuthorNamespace": {
            "type": "string",
            "description": "Specifies the origin Author companies namespace",
            "readOnly": true
          },
          "originLocator": {
            "type": "string",
            "description": "Specifies the origin version locator",
            "readOnly": true
          },
          "isChangedFromOrigin": {
            "type": "boolean",
            "description": "Specifies if the Applies To function is changed from origin or not",
            "readOnly": true
          },
          "auditedRegistryId": {
            "type": "string",
            "description": "Specifies the audited registry Id",
            "readOnly": true
          },
          "targetLineageId": {
            "type": "string",
            "description": "Specifies the target lineage Id",
            "readOnly": true
          },
          "logicModuleType": {
            "type": "string",
            "description": "The values can be DataSources | EventSources | PropertySources | ConfigSources | LogSources | TopologySources | Jobmonitors | AppliesTo Functions | SNMP SysOID Maps\nThe type of LogicModule",
            "readOnly": true,
            "enum": [
              "DATASOURCE",
              "EVENTSOURCE",
              "JOBMONITOR",
              "APPLIESTO_FUNCTION",
              "SNMP_SYSOID_MAP",
              "PROPERTYSOURCE",
              "CONFIGSOURCE",
              "TOPOLOGYSOURCE",
              "LOGSOURCE"
            ]
          },
          "isChangedFromTargetLastPublished": {
            "type": "boolean",
            "description": "Specifies if the Applies To function is changed from target last published or not",
            "readOnly": true
          },
          "originLineageId": {
            "type": "string",
            "description": "The origin lineage Id of the LMmodule",
            "readOnly": true
          },
          "originAuthorCompanyUUID": {
            "type": "string",
            "description": "Specifies the origin Author companies unique Id",
            "readOnly": true
          },
          "localModuleId": {
            "type": "integer",
            "description": "The LocalModule Id",
            "format": "int32",
            "readOnly": true
          },
          "originRegistryId": {
            "type": "string",
            "description": "The Registry ID of the Exchange Integration this module is based from",
            "readOnly": true
          },
          "originVersion": {
            "type": "string",
            "description": "Specifies the origin version",
            "readOnly": true
          },
          "auditedVersion": {
            "type": "string",
            "description": "Specifies the audited registry version",
            "readOnly": true
          },
          "originName": {
            "type": "string",
            "description": "Specifies the origin module name",
            "readOnly": true
          }
        }
      },
      "AzureLogAnalyticsWorkspacesCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "required": [
              "query"
            ],
            "type": "object",
            "properties": {
              "query": {
                "type": "string"
              }
            }
          }
        ]
      },
      "Assignment": {
        "type": "object",
        "properties": {
          "groupName": {
            "type": "string",
            "description": "The name of the group that discovered devices should be added into",
            "example": "qapr"
          },
          "tagValue": {
            "type": "string"
          },
          "action": {
            "type": "string",
            "description": "Whether or not specified devices should be included or excluded",
            "example": "Include"
          },
          "disableAlerting": {
            "type": "boolean",
            "description": "Whether or not alerting should be disabled for discovered devices",
            "example": false
          },
          "tagKey": {
            "type": "string"
          },
          "group": {
            "type": "integer",
            "description": "The ID of the group that discovered devices should be added into",
            "format": "int32"
          }
        }
      },
      "BatchScriptCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object",
            "properties": {
              "groovyScript": {
                "type": "string"
              },
              "scriptType": {
                "type": "string"
              },
              "windowsScript": {
                "type": "string"
              },
              "linuxCmdline": {
                "type": "string"
              },
              "linuxScript": {
                "type": "string"
              },
              "windowsCmdline": {
                "type": "string"
              }
            }
          }
        ],
        "x-discriminator-value": "batchscript"
      },
      "WebsiteLocation": {
        "type": "object",
        "properties": {
          "all": {
            "type": "boolean",
            "description": "This field only for the SiteMonitor Groups, does not include Internal Service Groups",
            "example": true
          },
          "collectorIds": {
            "type": "array",
            "description": "The Internal Service Groups Ids",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "collectors": {
            "type": "array",
            "description": "The collector info of the services",
            "items": {
              "$ref": "#/components/schemas/WebsiteCollectorInfo"
            }
          },
          "smgIds": {
            "type": "array",
            "description": "The SiteMonitor Groups Ids",
            "example": "[1, 2, 4, 3, 5, 6]",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "WebsiteSLAWidget": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Widget"
          },
          {
            "required": [
              "items"
            ],
            "type": "object",
            "properties": {
              "daysInWeek": {
                "type": "string",
                "description": "The days that SLA should be computed for, separated by commas. 1=Sunday, 2=Monday, 3=Tuesday, 4=Wednesday, 5=Thursday, 6=Friday, 7=Saturday"
              },
              "timezone": {
                "type": "string",
                "description": "The specific timezone for the widget"
              },
              "periodInOneDay": {
                "type": "string",
                "description": "The period during the selected days that the SLA should be computed for. * = all day, or a time range can be specified in the format of \"hh:mm TO hh:mm\", e.g. \"01:15 TO 17:15\""
              },
              "items": {
                "type": "array",
                "description": "The websites that should be used to compute the SLA",
                "items": {
                  "$ref": "#/components/schemas/WebsiteItemConfig"
                }
              },
              "colorThresholds": {
                "type": "array",
                "description": "The threshold of color changes",
                "items": {
                  "$ref": "#/components/schemas/ColorThreshold"
                }
              }
            }
          }
        ],
        "x-discriminator-value": "websitesla"
      },
      "ScriptNetscan": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Netscan"
          },
          {
            "required": [
              "scriptType"
            ],
            "type": "object",
            "properties": {
              "scriptPath": {
                "type": "string",
                "description": "The script path for an external script",
                "example": "C://scripts"
              },
              "defaultGroupFullPath": {
                "type": "string",
                "description": "The full path of the default group to add discovered devices to",
                "readOnly": true,
                "example": "lm/prod/servers"
              },
              "defaultGroup": {
                "type": "integer",
                "description": "The ID of the default group to add discovered devices to",
                "format": "int32"
              },
              "groovyScript": {
                "type": "string",
                "description": "For embedded script scans, the groovy script contents",
                "example": "testing"
              },
              "linuxScriptParams": {
                "type": "string"
              },
              "scriptType": {
                "type": "string",
                "description": "For script scans, the type of script. Options are embeded and external",
                "example": "embeded"
              },
              "groovyScriptParams": {
                "type": "string",
                "description": "For embedded script scans, the groovy script parameters",
                "example": "prod=true"
              },
              "windowsScript": {
                "type": "string"
              },
              "windowsScriptParams": {
                "type": "string"
              },
              "scriptParams": {
                "type": "string",
                "description": "The parameters for an external script",
                "example": "prod=true"
              },
              "linuxScript": {
                "type": "string"
              }
            }
          }
        ],
        "x-discriminator-value": "script"
      },
      "AzureActiveDirectoryUsersCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object"
          }
        ]
      },
      "TableWidgetRow": {
        "required": [
          "deviceId"
        ],
        "type": "object",
        "properties": {
          "instances": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/TableWidgetInstanceCell"
            }
          },
          "groupId": {
            "type": "integer",
            "format": "int32"
          },
          "label": {
            "type": "string"
          },
          "deviceId": {
            "type": "integer",
            "format": "int32"
          },
          "deviceDisplayName": {
            "type": "string",
            "readOnly": true
          },
          "groupFullPath": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "DeviceDatasourceInstancePaginationResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "searchId": {
            "type": "string",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeviceDataSourceInstance"
            }
          }
        }
      },
      "AlertRulePaginationResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "searchId": {
            "type": "string",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlertRule"
            }
          }
        }
      },
      "RestNMapNetscanPolicyCredential": {
        "type": "object",
        "properties": {
          "deviceGroupId": {
            "type": "integer",
            "description": "The ID of the device group that credentials should be inherited from, for this scan",
            "format": "int32"
          },
          "custom": {
            "type": "array",
            "description": "Custom credentials that should be used for this scan",
            "example": "[{\"snmp.community\":\"test\"}]",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "deviceGroupName": {
            "type": "string",
            "description": "The name of the device group that credentials should be inherited from, for this scan",
            "example": "Network Devices"
          },
          "snmpV3Credentials": {
            "type": "array",
            "description": "Multiple snmpv3 properties that should be used for this scan",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "deviceId": {
            "type": "integer",
            "description": "The ID of the device that credentials should be inherited from, for this scan",
            "format": "int32"
          },
          "deviceName": {
            "type": "string",
            "description": "The name of the device that credentials should be inherited from, for this scan",
            "example": "LinuxDC1"
          }
        }
      },
      "CollectorGroup": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "userPermission": {
            "type": "string",
            "description": "The permission level of the user that made the API request",
            "readOnly": true
          },
          "numOfCollectors": {
            "type": "integer",
            "description": "The number of collectors that belong to the group",
            "format": "int32",
            "readOnly": true
          },
          "autoBalanceInstanceCountThreshold": {
            "type": "integer",
            "description": "Threshold for instance count strategy to check if a collector has high load",
            "format": "int32"
          },
          "description": {
            "type": "string",
            "description": "The description of the collector group",
            "example": "Group for collectors dedicated to Network Devices"
          },
          "highestPriorityCollectorStatus": {
            "$ref": "#/components/schemas/RestHighestPriorityCollectorStatus"
          },
          "platform": {
            "type": "string",
            "description": "The platform limitation",
            "readOnly": true
          },
          "autoBalance": {
            "type": "boolean",
            "description": "Whether the collector has autoBalance set as true or false"
          },
          "customProperties": {
            "type": "array",
            "description": "The custom properties defined for the collector group",
            "items": {
              "$ref": "#/components/schemas/NameAndValue"
            }
          },
          "numOfHosts": {
            "type": "integer",
            "description": "The number of hosts that belong to the group",
            "format": "int64",
            "readOnly": true
          },
          "numOfInstances": {
            "type": "integer",
            "description": "The number of instances that belong to the group",
            "format": "int64",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "The name of the Collector Group",
            "example": "Collector (Network Devices)"
          },
          "autoBalanceStrategy": {
            "type": "string",
            "description": "The auto balance strategy"
          },
          "createOn": {
            "type": "integer",
            "description": "The time at which the group was created in epoch format",
            "format": "int64",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "description": "The id of the Collector Group",
            "format": "int32",
            "readOnly": true
          },
          "mismatchVersion": {
            "type": "boolean",
            "description": "Specifies if the version of all collectors in group is same",
            "readOnly": true
          }
        }
      },
      "GcpPubSubSubscriptionDiscoveryMethodV3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ]
      },
      "AzureWebJobCollectorAttributeV3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "required": [
              "period"
            ],
            "type": "object",
            "properties": {
              "period": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "WebsiteOverallStatusWidget": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Widget"
          },
          {
            "required": [
              "items"
            ],
            "type": "object",
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/WebsiteGroupData"
                }
              }
            }
          }
        ],
        "x-discriminator-value": "websiteoverallstatus"
      },
      "DeviceDatasourceInstanceConfigPaginationResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "searchId": {
            "type": "string",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeviceDataSourceInstanceConfig"
            }
          }
        }
      },
      "SaaSO365SharePointSiteDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ]
      },
      "DeviceDatasourcePaginationResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "searchId": {
            "type": "string",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeviceDataSource"
            }
          }
        }
      },
      "RecipientGroupPaginationResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "searchId": {
            "type": "string",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecipientGroup"
            }
          }
        }
      },
      "AwsEC2ReservedInstanceCoverageCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object",
            "properties": {
              "period": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "x-discriminator-value": "awsec2reservedinstancecoverage"
      },
      "DeviceInstanceData": {
        "type": "object",
        "properties": {
          "instanceId": {
            "type": "string",
            "readOnly": true
          },
          "values": {
            "type": "array",
            "description": "Datapoint values 2-D list",
            "readOnly": true,
            "items": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "errMsg": {
            "type": "string",
            "readOnly": true
          },
          "time": {
            "type": "array",
            "description": "Timestamp list",
            "readOnly": true,
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "nextPageParams": {
            "type": "string",
            "description": "The next page parameters",
            "readOnly": true
          },
          "dataSourceName": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "RestSavedMapWidgetV3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Widget"
          },
          {
            "type": "object",
            "properties": {
              "scale": {
                "type": "number",
                "format": "double"
              },
              "savedMapName": {
                "type": "string"
              },
              "savedMapId": {
                "type": "integer",
                "format": "int32"
              },
              "savedMapGroupName": {
                "type": "string"
              }
            }
          }
        ]
      },
      "WebsiteOverviewReport": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReportBase"
          },
          {
            "required": [
              "itemsType"
            ],
            "type": "object",
            "properties": {
              "includeTypes": {
                "type": "array",
                "description": "The information that should be included in the report. Options include 1: availability, 2: alerts, 3: graphs",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "exclude100Availability": {
                "type": "boolean",
                "description": "Whether or not websites with 100% availability should be ignored"
              },
              "displayType": {
                "type": "integer",
                "description": "1 | 2\n1: Display overall locations\n2: Display overall and individual locations",
                "format": "int32"
              },
              "excludeSDT": {
                "type": "boolean",
                "description": "Whether or not SDTs periods should be considered for the website's availability"
              },
              "dateRange": {
                "type": "string",
                "description": "The Time Range configured for the report: Last 2 hours | Last 24 hours | Last calendar day | Last 7 days | Last 14 days | Last 30 days | Last calendar month | Last 365 days | Any custom date range in this format: YYYY-MM-dd hh:mm TO YYYY-MM-dd hh:mm"
              },
              "itemsType": {
                "type": "string",
                "description": "The type of entities specified in the servicesVal field. Acceptable values are: website, group"
              },
              "items": {
                "type": "string",
                "description": "The websites OR website groups (full path) selected for the report, where multiple entities are separated by commas"
              }
            }
          }
        ],
        "x-discriminator-value": "website service overview"
      },
      "Chain": {
        "required": [
          "stages",
          "type"
        ],
        "type": "object",
        "properties": {
          "period": {
            "$ref": "#/components/schemas/Period"
          },
          "stages": {
            "type": "array",
            "description": "List of recipients list",
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Recipient"
              }
            }
          },
          "type": {
            "type": "string",
            "description": "Type of stages in this chain. The values can be timebased|simple"
          }
        }
      },
      "GraphVirtualDataPoint": {
        "type": "object",
        "properties": {
          "rpn": {
            "type": "string",
            "description": "The graph virtual data point rpn expression"
          },
          "name": {
            "type": "string",
            "description": "The graph virtual data point name"
          }
        }
      },
      "WebsiteGraphWidget": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Widget"
          },
          {
            "required": [
              "checkpointId"
            ],
            "type": "object",
            "properties": {
              "websiteName": {
                "type": "string",
                "description": "The name of the website this graph is associated with",
                "readOnly": true
              },
              "geoInfo": {
                "type": "string",
                "description": "The checkpoint location this graph is associated with",
                "readOnly": true
              },
              "checkpointId": {
                "type": "integer",
                "description": "The id of the checkpoint this graph is associated with",
                "format": "int32"
              },
              "graph": {
                "type": "string",
                "description": "The name of the graph that was added as a widget"
              }
            }
          }
        ],
        "x-discriminator-value": "sgraph"
      },
      "WebCheck": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Website"
          },
          {
            "type": "object",
            "properties": {
              "schema": {
                "type": "string",
                "description": "The scheme or protocol associated with the URL to check. Acceptable values are: http, https",
                "example": "https"
              },
              "triggerSSLExpirationAlert": {
                "type": "boolean",
                "description": "Whether or not SSL expiration alerts should be triggered",
                "example": false
              },
              "triggerSSLStatusAlert": {
                "type": "boolean",
                "description": "Whether or not SSL status alerts should be triggered",
                "example": false
              },
              "pageLoadAlertTimeInMS": {
                "type": "integer",
                "description": "The time in milliseconds that the page must load within for each step to avoid triggering an alert",
                "format": "int64"
              },
              "ignoreSSL": {
                "type": "boolean",
                "description": "Whether or not SSL should be ignored, the default value is true",
                "example": true
              },
              "alertExpr": {
                "type": "string",
                "description": "The threshold (in days) for triggering SSL certification alerts",
                "example": "< 200 100 50"
              }
            }
          }
        ],
        "x-discriminator-value": "webcheck"
      },
      "AlertFilters": {
        "type": "object",
        "properties": {
          "severity": {
            "type": "string",
            "description": "Displayed alerts must have a severity that satisfies this criteria. Multiple severities are separated by commas"
          },
          "sdted": {
            "type": "string",
            "description": "Displayed alerts must have an SDT status that meets this criteria"
          },
          "chain": {
            "type": "string",
            "description": "Displayed alerts must be routed to an escalation chain that satisfies this filter. Glob is accepted, and * and an empty string both match all escalation chains"
          },
          "instance": {
            "type": "string",
            "description": "Displayed alerts must be associated with instances that meet this filter criteria. Glob is accepted, and * and an empty string both match all instances"
          },
          "anomaly": {
            "type": "string"
          },
          "dataPoint": {
            "type": "string",
            "description": "Displayed alerts must be associated with datapoints that meet this filter criteria. Glob is accepted, and * and an empty string both match all datapoints"
          },
          "rule": {
            "type": "string",
            "description": "Displayed alerts must match a rule that satisfies this filter. Glob is accepted, and * and an empty string both match all rules"
          },
          "acked": {
            "type": "string",
            "description": "Displayed alerts must have an acknowledgement status that satisfies this criteria"
          },
          "dependencyRoutingState": {
            "type": "string"
          },
          "dependencyRole": {
            "type": "string"
          },
          "host": {
            "type": "string",
            "description": "Displayed alerts must be associated with devices that meet this filter criteria. Glob is accepted, and * and an empty string both indicate all devices"
          },
          "keyword": {
            "type": "string",
            "description": "The key word for free search"
          },
          "dataSource": {
            "type": "string",
            "description": "Displayed alerts must be associated with datasources that meet this filter criteria. Glob is accepted, and * and an empty string both indicate all datasources"
          },
          "cleared": {
            "type": "string",
            "description": "Displayed alerts must be active if cleared=no,  display alerts must be closed if cleared=yes, and must have cleared in the past 7 days if cleared=all"
          },
          "group": {
            "type": "string",
            "description": "Displayed alerts must be associated with groups that meet this filter criteria. Glob is accepted, and * and an empty string both indicate all groups"
          }
        }
      },
      "AzureEABillingDiscoveryMethodV3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "required": [
              "azureEABillingType"
            ],
            "type": "object",
            "properties": {
              "azureEABillingType": {
                "type": "string"
              }
            }
          }
        ]
      },
      "IntegrationAuditLogPaginationResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IntegrationAuditLog"
            }
          }
        }
      },
      "NetflowGroupGraphWidget": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Widget"
          },
          {
            "type": "object",
            "properties": {
              "deviceGroupId": {
                "type": "integer",
                "format": "int32"
              },
              "deviceGroupName": {
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "x-discriminator-value": "groupnetflowgraph"
      },
      "SaasOffice365HealthCollectorAttributeV3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object"
          }
        ]
      },
      "EnhancedScriptNetscan": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Netscan"
          },
          {
            "required": [
              "scriptType"
            ],
            "type": "object",
            "properties": {
              "scriptPath": {
                "type": "string",
                "description": "The script path for an external script",
                "example": "C://scripts"
              },
              "defaultGroupFullPath": {
                "type": "string",
                "description": "The full path of the default group to add discovered devices to",
                "readOnly": true,
                "example": "lm/prod/servers"
              },
              "groovyScript": {
                "type": "string",
                "description": "For embedded script scans, the groovy script contents",
                "example": "testing"
              },
              "credentials": {
                "$ref": "#/components/schemas/RestNMapNetscanPolicyCredential"
              },
              "linuxScriptParams": {
                "type": "string"
              },
              "groovyScriptParams": {
                "type": "string",
                "description": "For embedded script scans, the groovy script parameters",
                "example": "prod=true"
              },
              "windowsScript": {
                "type": "string"
              },
              "filters": {
                "type": "array",
                "description": "The filter to be applied to filter out the reported devices",
                "items": {
                  "$ref": "#/components/schemas/DeviceFilter"
                }
              },
              "defaultGroup": {
                "type": "integer",
                "description": "The ID of the default group to add discovered devices to",
                "format": "int32"
              },
              "scriptType": {
                "type": "string",
                "description": "For script scans, the type of script. Options are embeded and external",
                "example": "embeded"
              },
              "windowsScriptParams": {
                "type": "string"
              },
              "scriptParams": {
                "type": "string",
                "description": "The parameters for an external script",
                "example": "prod=true"
              },
              "linuxScript": {
                "type": "string"
              }
            }
          }
        ]
      },
      "SlaMetric": {
        "type": "object",
        "properties": {
          "websiteName": {
            "type": "string"
          },
          "groupName": {
            "type": "string"
          },
          "excludeSDT": {
            "type": "boolean"
          }
        }
      },
      "NetflowBgpTable": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NetflowDataBase"
          },
          {
            "type": "object",
            "properties": {
              "percentUsage": {
                "type": "number",
                "description": "percentage of traffic through this asn",
                "format": "double",
                "readOnly": true
              },
              "asNumber": {
                "type": "integer",
                "description": "autonomous system number",
                "format": "int64",
                "readOnly": true
              },
              "usage": {
                "type": "number",
                "description": "total bytes through this asn",
                "format": "double",
                "readOnly": true
              },
              "description": {
                "type": "string",
                "description": "the description of the asNumber",
                "readOnly": true
              }
            }
          }
        ]
      },
      "LogFile": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "The path of the log file to monitor"
          },
          "originId": {
            "type": "string"
          },
          "excludes": {
            "type": "array",
            "description": "The regex or plain text to look for in the file and not trigger alert if found",
            "items": {
              "type": "string"
            }
          },
          "useGlob": {
            "type": "boolean",
            "description": "Whether or not glob is used in the path"
          },
          "encoding": {
            "type": "string",
            "description": "The file encoding: default | auto | UTF-8 | UTF-16"
          },
          "matches": {
            "type": "array",
            "description": "The regex or plain text to look for in the file and trigger alert if found",
            "items": {
              "$ref": "#/components/schemas/MatchPattern"
            }
          }
        }
      },
      "SDKScriptDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "required": [
              "groovyScript",
              "sdkName",
              "sdkVersion"
            ],
            "type": "object",
            "properties": {
              "groovyScript": {
                "type": "string"
              },
              "sdkVersion": {
                "type": "string"
              },
              "sdkName": {
                "type": "string"
              }
            }
          }
        ],
        "x-discriminator-value": "ad_sdkscript"
      },
      "RowData": {
        "type": "object",
        "properties": {
          "cells": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/CellData"
            }
          },
          "deviceId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "deviceDisplayName": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "GcpComputeServiceLimitsCollectorAttributeV3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object",
            "properties": {
              "period": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "OpsNoteDeviceGroupScope": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OpsNoteScope"
          },
          {
            "type": "object",
            "properties": {
              "fullPath": {
                "type": "string"
              },
              "groupId": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "x-discriminator-value": "devicegroup"
      },
      "AlertTrendsReport": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReportBase"
          },
          {
            "required": [
              "metrics"
            ],
            "type": "object",
            "properties": {
              "dateRange": {
                "type": "string",
                "description": "The Time Range configured for the report: Last 2 hours | Last 24 hours | Last calendar day | Last 7 days | Last 14 days | Last 30 days | Last calendar month | Last 365 days | Any custom date range in this format: YYYY-MM-dd hh:mm TO YYYY-MM-dd hh:mm"
              },
              "metrics": {
                "type": "array",
                "description": "The devices and groups that will be included in the report, where each device/group should be represented with two fields: itemType and itemVal",
                "items": {
                  "$ref": "#/components/schemas/AlertTrendsMetric"
                }
              }
            }
          }
        ],
        "x-discriminator-value": "alert trends"
      },
      "WebsiteCheckpointRawData": {
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "description": "Datapoint values 2-D list",
            "readOnly": true,
            "items": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "time": {
            "type": "array",
            "description": "Timestamp list",
            "readOnly": true,
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "nextPageParams": {
            "type": "string",
            "description": "The next page parameters",
            "readOnly": true
          }
        }
      },
      "OpenMetricDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "required": [
              "followRedirect",
              "headers",
              "instanceLabel",
              "metricName",
              "url"
            ],
            "type": "object",
            "properties": {
              "headers": {
                "type": "string"
              },
              "metricName": {
                "type": "string"
              },
              "readTimeout": {
                "type": "integer",
                "format": "int32"
              },
              "followRedirect": {
                "type": "boolean"
              },
              "connectTimeout": {
                "type": "integer",
                "format": "int32"
              },
              "groupLabel": {
                "type": "string"
              },
              "instanceLabel": {
                "type": "string"
              },
              "instancePropertyTags": {
                "type": "string"
              },
              "url": {
                "type": "string"
              }
            }
          }
        ]
      },
      "ArrayNode": {
        "type": "object"
      },
      "AwsServiceLimitsFromTrustedAdvisorCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object",
            "properties": {
              "period": {
                "type": "integer",
                "format": "int32"
              },
              "awsServiceName": {
                "type": "string"
              }
            }
          }
        ],
        "x-discriminator-value": "awsservicelimitsfromtrustedadvisor"
      },
      "NetflowNbarApplication": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NetflowDataBase"
          },
          {
            "type": "object",
            "properties": {
              "percentUsage": {
                "type": "number",
                "format": "double",
                "readOnly": true
              },
              "usage": {
                "type": "number",
                "format": "double",
                "readOnly": true
              },
              "name": {
                "type": "string",
                "readOnly": true
              },
              "type": {
                "type": "string",
                "readOnly": true
              },
              "applicationTag": {
                "type": "integer",
                "format": "int64",
                "readOnly": true
              }
            }
          }
        ]
      },
      "InternalCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object"
          }
        ],
        "x-discriminator-value": "internal"
      },
      "Usage": {
        "type": "object",
        "properties": {
          "numOfStoppedAzureDevices": {
            "type": "integer",
            "description": "Number of stopped Azure resources",
            "format": "int32",
            "readOnly": true
          },
          "numOfServices": {
            "type": "integer",
            "description": "Number of services (created via LM Service Insight)",
            "format": "int32",
            "readOnly": true
          },
          "numOfTerminatedAzureDevices": {
            "type": "integer",
            "description": "Number of terminated Azure resources",
            "format": "int32",
            "readOnly": true
          },
          "numberOfStandardDevices": {
            "type": "integer",
            "description": "Number of standard devices",
            "format": "int32",
            "readOnly": true
          },
          "numOfStoppedGcpDevices": {
            "type": "integer",
            "description": "Number of stopped GCP resources not monitored with a local Collector",
            "format": "int32",
            "readOnly": true
          },
          "numOfCombinedGcpDevices": {
            "type": "integer",
            "description": "Number of GCP resources monitored with a local Collector",
            "format": "int32",
            "readOnly": true
          },
          "numOfAWSDevices": {
            "type": "integer",
            "description": "Number of AWS resources not monitored with a local Collector",
            "format": "int32",
            "readOnly": true
          },
          "numberOfKubernetesDevices": {
            "type": "integer",
            "description": "Number of monitored Kubernetes Nodes, Pods, and Services",
            "format": "int32",
            "readOnly": true
          },
          "numOfGcpDevices": {
            "type": "integer",
            "description": "Number of GCP resources",
            "format": "int32",
            "readOnly": true
          },
          "numOfAzureDevices": {
            "type": "integer",
            "description": "Number of Azure resources not monitored with a local Collector",
            "format": "int32",
            "readOnly": true
          },
          "numOfCombinedAzureDevices": {
            "type": "integer",
            "description": "Number of Azure resources monitored with a local Collector",
            "format": "int32",
            "readOnly": true
          },
          "numOfTerminatedAWSDevices": {
            "type": "integer",
            "description": "Number of terminated AWS resources",
            "format": "int32",
            "readOnly": true
          },
          "numOfTerminatedGcpCloudDevices": {
            "type": "integer",
            "description": "Number of terminated GCP resources",
            "format": "int32",
            "readOnly": true
          },
          "numOfStoppedAWSDevices": {
            "type": "integer",
            "description": "Number of stopped AWS resources",
            "format": "int32",
            "readOnly": true
          },
          "numberOfDevices": {
            "type": "integer",
            "description": "Sum of numOfStandardDevices, numOfCombinedAWSDevices, numOfCombinedAzureDevices, and numOfCombinedGCPDevices",
            "format": "int32",
            "readOnly": true
          },
          "numOfConfigSourceDevices": {
            "type": "integer",
            "description": "Number of devices with active ConfigSources",
            "format": "int32",
            "readOnly": true
          },
          "numOfWebsites": {
            "type": "integer",
            "description": "Number of websites",
            "format": "int32",
            "readOnly": true
          },
          "numOfCombinedAWSDevices": {
            "type": "integer",
            "description": "Number of AWS resources monitored with a local Collector",
            "format": "int32",
            "readOnly": true
          }
        }
      },
      "DeviceDataSourceInstanceGroup": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "deviceDataSourceId": {
            "type": "integer",
            "description": "The device datasource id",
            "format": "int32",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Name of the datasource instance group",
            "example": "Ping Checks at HQ"
          },
          "description": {
            "type": "string",
            "description": "The description of the datasource instance group",
            "example": "Test the availability of HQ"
          },
          "createOn": {
            "type": "integer",
            "description": "Time when the group was created.",
            "format": "int64",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "description": "The instance group id",
            "format": "int32",
            "readOnly": true
          },
          "deviceId": {
            "type": "integer",
            "description": "The id of associated device",
            "format": "int32",
            "readOnly": true
          },
          "deviceDisplayName": {
            "type": "string",
            "description": "The display name of the device",
            "readOnly": true
          }
        }
      },
      "TableWidgetInstanceCell": {
        "required": [
          "instanceId"
        ],
        "type": "object",
        "properties": {
          "validationStatusCode": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "dataPointName": {
            "type": "string",
            "readOnly": true
          },
          "instanceId": {
            "type": "integer",
            "format": "int32"
          },
          "dataPointId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "instanceName": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "GaugeDataPoint": {
        "required": [
          "deviceDisplayName",
          "deviceGroupFullPath",
          "instanceName"
        ],
        "type": "object",
        "properties": {
          "rpn": {
            "type": "string"
          },
          "dataSourceId": {
            "type": "integer",
            "format": "int32"
          },
          "dataPointName": {
            "type": "string"
          },
          "dataPointId": {
            "type": "integer",
            "format": "int32"
          },
          "instanceName": {
            "type": "string"
          },
          "dataSourceFullName": {
            "type": "string"
          },
          "dataSeries": {
            "type": "string"
          },
          "aggregateFunction": {
            "type": "string"
          },
          "deviceGroupFullPath": {
            "type": "string"
          },
          "deviceDisplayName": {
            "type": "string"
          }
        }
      },
      "DeviceDataSourceInstanceData": {
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "description": "Datapoint values 2-D list",
            "readOnly": true,
            "items": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "time": {
            "type": "array",
            "description": "Timestamp list",
            "readOnly": true,
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "nextPageParams": {
            "type": "string",
            "description": "The next page parameters",
            "readOnly": true
          },
          "dataSourceName": {
            "type": "string",
            "description": "Datasource name",
            "readOnly": true
          }
        }
      },
      "AzureServiceBusTopic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ]
      },
      "RolePaginationResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "searchId": {
            "type": "string",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Role"
            }
          }
        }
      },
      "AwsEcsServiceDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ],
        "x-discriminator-value": "ad_awsecsservice"
      },
      "CellData": {
        "type": "object",
        "properties": {
          "alertStatus": {
            "type": "string",
            "readOnly": true
          },
          "forecastDay": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "instanceId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "instanceName": {
            "type": "string",
            "readOnly": true
          },
          "alertSeverity": {
            "type": "string"
          },
          "isPropertyValue": {
            "type": "boolean",
            "readOnly": true
          },
          "daysUntilAlertList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DaysUntilAlert"
            }
          },
          "propValue": {
            "type": "string",
            "readOnly": true
          },
          "value": {
            "type": "number",
            "format": "double",
            "readOnly": true
          }
        }
      },
      "AwsApiGatewayStageDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ],
        "x-discriminator-value": "ad_awsapigatewaystage"
      },
      "SLAReport": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReportBase"
          },
          {
            "required": [
              "metrics"
            ],
            "type": "object",
            "properties": {
              "calculationMethod": {
                "type": "integer",
                "description": "Calculation method: 0 = percent all resources available, 1 = average of all SLA metrics",
                "format": "int32"
              },
              "dateRange": {
                "type": "string",
                "description": "The Time Range configured for the report: Last 2 hours | Last 24 hours | Last calendar day | Last 7 days | Last 14 days | Last 30 days | Last calendar month | Last 365 days | Any custom date range in this format: YYYY-MM-dd hh:mm TO YYYY-MM-dd hh:mm"
              },
              "timezone": {
                "type": "string",
                "description": "The specific timezone for the report"
              },
              "displayWithAvailability": {
                "type": "boolean",
                "description": "If true, only devices with less than 100% availability will be displayed in the report"
              },
              "columns": {
                "type": "array",
                "description": "The columns displayed in the report",
                "items": {
                  "$ref": "#/components/schemas/DynamicColumn"
                }
              },
              "displaySummary": {
                "type": "boolean",
                "description": "If true, the SLA summary (total %) will be displayed"
              },
              "dayInOneWeek": {
                "type": "string",
                "description": "The days of the week that the SLA report should take into account, where multiple values are separated by commas and * refers to all days of the week"
              },
              "periodInOneDay": {
                "type": "string",
                "description": "The hours of each selected day that the SLA report should take into account, where * refers to all hours"
              },
              "metrics": {
                "type": "array",
                "description": "The datapoints and corresponding SLA thresholds that will be included in the report, where each metric includes seven fields: groupName, deviceName, dataSourceFullName, dataSourceId, instances, metric and threshold. Threshold should comprise of an operator and a number separated by a space, where valid operators are >, <, !=, =, >= and <=",
                "items": {
                  "$ref": "#/components/schemas/SlaMetric"
                }
              },
              "unmonitoredTime": {
                "type": "integer",
                "description": "0|1|2 - How the time we have no data for the device should be counted, where 1 = ignore no data (subtract from total time), 2 = count as violation (subtract from uptime), 3 = count as available (add to uptime)",
                "format": "int32"
              }
            }
          }
        ],
        "x-discriminator-value": "service level agreement"
      },
      "WebsiteNOCItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NOCItemBase"
          },
          {
            "required": [
              "name",
              "websiteGroupName",
              "websiteName"
            ],
            "type": "object",
            "properties": {
              "websiteName": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "websiteGroupName": {
                "type": "string"
              },
              "groupBy": {
                "type": "string"
              }
            }
          }
        ],
        "x-discriminator-value": "website"
      },
      "AzureActiveDirectoryAppSecretDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ]
      },
      "DeviceDataSourceInstanceConfigDiff": {
        "type": "object",
        "properties": {
          "rowNo": {
            "type": "integer",
            "description": "Diff row number",
            "format": "int32",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "description": "Diff type. The values can be : add|remove",
            "readOnly": true
          },
          "content": {
            "type": "string",
            "description": "Configuration content",
            "readOnly": true
          }
        }
      },
      "RestAppliesToFunctionPaginationResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "searchId": {
            "type": "string",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppliesToFunction"
            }
          }
        }
      },
      "BigNumberInfo": {
        "required": [
          "bigNumberItems",
          "dataPoints"
        ],
        "type": "object",
        "properties": {
          "virtualDataPoints": {
            "type": "array",
            "description": "The virtual datapoints included in the widget. Note that a virtual datapoint must be referenced in the bigNumberItems object in order to be displayed",
            "items": {
              "$ref": "#/components/schemas/VirtualDataPoint"
            }
          },
          "counters": {
            "type": "array",
            "description": "The counter is used for saving applyTo expression, it's mainly used for count device",
            "items": {
              "$ref": "#/components/schemas/Counter"
            }
          },
          "dataPoints": {
            "type": "array",
            "description": "The datapoints included in the widget. Note that a datapoint must be referenced in the bigNumberItems object in order to be displayed",
            "items": {
              "$ref": "#/components/schemas/BigNumberDataPoint"
            }
          },
          "bigNumberItems": {
            "type": "array",
            "description": "The datapoints and virtual datapoints whose values should be displayed in the big number widget",
            "items": {
              "$ref": "#/components/schemas/BigNumberItem"
            }
          }
        }
      },
      "NOCWidget": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Widget"
          },
          {
            "required": [
              "items"
            ],
            "type": "object",
            "properties": {
              "ackChecked": {
                "type": "boolean",
                "description": "Whether or not acknowledgements are displayed in the NOC widget, the default value is true"
              },
              "displayErrorAlert": {
                "type": "boolean",
                "description": "Whether or not error alerts are displayed in the NOC widget, the default value is true"
              },
              "displayColumn": {
                "type": "integer",
                "description": "The maximum number columns displayed in the NOC widget",
                "format": "int32"
              },
              "displayWarnAlert": {
                "type": "boolean",
                "description": "Whether or not warning alerts are displayed in the NOC widget, the default value is true"
              },
              "displayCriticalAlert": {
                "type": "boolean",
                "description": "Whether or not critical alerts are displayed in the NOC widget, the default value is true"
              },
              "sortBy": {
                "type": "string",
                "description": "How NOC items are sorted"
              },
              "sdtChecked": {
                "type": "boolean",
                "description": "Whether or not SDTs are displayed in the NOC widget, the default value is true"
              },
              "items": {
                "type": "array",
                "description": "The NOC items",
                "items": {
                  "$ref": "#/components/schemas/NOCItemBase"
                }
              }
            }
          }
        ],
        "x-discriminator-value": "noc"
      },
      "AlertAck": {
        "required": [
          "ackComment"
        ],
        "type": "object",
        "properties": {
          "ackComment": {
            "type": "string",
            "description": "your comment on the alert",
            "example": "looking into this alert"
          }
        }
      },
      "OpsNotePaginationResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "searchId": {
            "type": "string",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpsNote"
            }
          }
        }
      },
      "InterfaceType": {
        "type": "object",
        "properties": {
          "ifPosition": {
            "type": "string"
          },
          "ifId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "Counter": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "appliesTo": {
            "type": "string"
          }
        }
      },
      "CloudWatchAutoDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "required": [
              "clusterDimension",
              "namespace",
              "nodeDimension"
            ],
            "type": "object",
            "properties": {
              "clusterDimension": {
                "type": "string"
              },
              "period": {
                "type": "string"
              },
              "metricName": {
                "type": "string"
              },
              "nodeDimension": {
                "type": "string"
              },
              "namespace": {
                "type": "string"
              },
              "clusterDimensionValue": {
                "type": "string"
              }
            }
          }
        ],
        "x-discriminator-value": "ad_cloudwatch"
      },
      "ColorThreshold": {
        "required": [
          "level",
          "relation",
          "threshold"
        ],
        "type": "object",
        "properties": {
          "level": {
            "type": "integer",
            "format": "int32"
          },
          "threshold": {
            "type": "number",
            "format": "double"
          },
          "relation": {
            "type": "string"
          }
        }
      },
      "AwsGlobalNetworkAttachmentMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ]
      },
      "NetAppCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object",
            "properties": {
              "netAppType": {
                "type": "string"
              },
              "ip": {
                "type": "string",
                "readOnly": true
              },
              "netAppInstance": {
                "type": "string"
              },
              "netAppXMLBulkLocator": {
                "type": "string"
              },
              "netAppXML": {
                "type": "string"
              },
              "netAppAPI": {
                "type": "string"
              },
              "params": {
                "type": "object",
                "properties": {}
              },
              "netAppAggregate": {
                "type": "string"
              },
              "netAppXMLIndex": {
                "type": "string"
              },
              "netAppXMLInstance": {
                "type": "string"
              },
              "netAppIndex": {
                "type": "string"
              },
              "netAppXMLBulk": {
                "type": "string"
              },
              "netAppObject": {
                "type": "string"
              },
              "netAppXMLLocator": {
                "type": "string"
              }
            }
          }
        ],
        "x-discriminator-value": "netapp"
      },
      "GcpAtomEventSource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EventSource"
          },
          {
            "type": "object",
            "properties": {
              "schedule": {
                "type": "integer",
                "description": "The polling interval for the EventSource",
                "format": "int32"
              }
            }
          }
        ],
        "x-discriminator-value": "gcpatom"
      },
      "EC2NetscanPolicyCredential": {
        "type": "object",
        "properties": {
          "deviceGroupId": {
            "type": "integer",
            "description": "The ID of the device group that credentials should be inherited from, for this scan",
            "format": "int32"
          },
          "custom": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Custom credentials that should be used for this scan",
            "example": "[{\"snmp.community\":\"test\"}]"
          },
          "deviceGroupName": {
            "type": "string",
            "description": "The name of the device group that credentials should be inherited from, for this scan",
            "example": "Network Devices"
          }
        }
      },
      "AzureRecoveryServiceVaultSRCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object"
          }
        ]
      },
      "APIToken": {
        "type": "object",
        "properties": {
          "note": {
            "type": "string",
            "description": "The note associated with the API Tokens",
            "example": "John Doe's API Token"
          },
          "lastUsedOn": {
            "type": "integer",
            "description": "The epoch at which the API Tokens were last used",
            "format": "int64",
            "readOnly": true
          },
          "userPermission": {
            "type": "string",
            "description": "The permission of current apiToken with the admin. The values can be write|read|none",
            "readOnly": true,
            "example": "read"
          },
          "roles": {
            "uniqueItems": true,
            "type": "array",
            "description": "The roles assigned to the user that is associated with the API Tokens",
            "readOnly": true,
            "items": {
              "type": "string"
            }
          },
          "createdOn": {
            "type": "integer",
            "description": "The epoch at which the API Tokens were created",
            "format": "int64",
            "readOnly": true
          },
          "accessId": {
            "type": "string",
            "description": "The access Id associated with the API Tokens",
            "readOnly": true
          },
          "adminName": {
            "type": "string",
            "description": "The name of the user associated with the API Tokens",
            "readOnly": true
          },
          "lastAuthIp": {
            "type": "string",
            "description": "The IP from which the API Tokens were last used",
            "readOnly": true
          },
          "accessKey": {
            "type": "string",
            "description": "The secret key associated with the API Tokens",
            "readOnly": true
          },
          "createdBy": {
            "type": "string",
            "description": "The user who is the API Tokens created by",
            "readOnly": true
          },
          "adminId": {
            "type": "integer",
            "description": "The id of the user associated with the API Tokens",
            "format": "int32",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "description": "The id of the API Token",
            "format": "int32",
            "readOnly": true
          },
          "status": {
            "type": "integer",
            "description": "The values can be 1 | 2. Specifies whether or not the API Tokens are enabled, where 2 = enabled",
            "format": "int32"
          }
        }
      },
      "DeviceDataSourceSDTHistoryPaginationResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "searchId": {
            "type": "string",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SDTHistory"
            }
          }
        }
      },
      "GcpBillingBigQuerySourceDiscoveryMethodV3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "required": [
              "gcpBillingPeriodType",
              "gcpBillingType"
            ],
            "type": "object",
            "properties": {
              "gcpBillingPeriodType": {
                "type": "string"
              },
              "gcpBillingType": {
                "type": "string"
              }
            }
          }
        ]
      },
      "RestAwsAccountTestV3": {
        "type": "object",
        "properties": {
          "accessId": {
            "type": "string"
          },
          "accountId": {
            "type": "string"
          },
          "newBillingBucket": {
            "type": "string"
          },
          "assumedRoleArn": {
            "type": "string"
          },
          "bucketNameForBillingFiles": {
            "type": "string"
          },
          "accessKey": {
            "type": "string"
          },
          "checkedServices": {
            "type": "string"
          },
          "groupId": {
            "type": "integer",
            "format": "int32"
          },
          "newBillingPath": {
            "type": "string"
          },
          "externalId": {
            "type": "string"
          }
        }
      },
      "AwsServiceRegionDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "required": [
              "awsServiceName"
            ],
            "type": "object",
            "properties": {
              "awsServiceName": {
                "type": "string"
              }
            }
          }
        ],
        "x-discriminator-value": "ad_awsserviceregion"
      },
      "SaaSSlackHealthDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ]
      },
      "TableWidgetForecastConfiguration": {
        "type": "object",
        "properties": {
          "severity": {
            "type": "string",
            "description": "\tThe minimum alert severity the forecasting should include, one of warn | error | critical",
            "readOnly": true
          },
          "confidence": {
            "type": "integer",
            "description": "The percent confidence that should be required for a forecasted alert.",
            "format": "int32",
            "readOnly": true
          },
          "timeRange": {
            "type": "string",
            "description": "The training data time range (the data on which forecasting is calculated). Options are Last 7 days, Last 14 days, Last 30 days, Last calendar month, Last 365 days or a custom time range",
            "readOnly": true
          },
          "algorithm": {
            "type": "string",
            "description": "Forecast method for the widget :Linear | ARIMA",
            "readOnly": true
          }
        }
      },
      "UserFilter": {
        "type": "object",
        "properties": {
          "apiOnlyUser": {
            "type": "string",
            "description": "If the user is API only user. Acceptable values are: all, yes, no"
          },
          "firstName": {
            "type": "string",
            "description": "The first name of the user"
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the user"
          },
          "enable2fa": {
            "type": "string",
            "description": "Whether does the user enabled 2FA. Acceptable values are: all, yes, no"
          },
          "roleAssignment": {
            "type": "string",
            "description": "Which roles is the user belongs to"
          },
          "email": {
            "type": "string",
            "description": "The emails of the user"
          },
          "status": {
            "type": "string",
            "description": "The user status. Acceptable values are: all, active, suspended"
          },
          "username": {
            "type": "string",
            "description": "The username of the user"
          }
        }
      },
      "Recipient": {
        "required": [
          "method",
          "type"
        ],
        "type": "object",
        "properties": {
          "method": {
            "type": "string",
            "description": "Recipient method for each type. \nThe values can be EMAIL|SMEMAIL|VOICE|SMS \n            group: \"method\" not used\n            arbitrary: The method should be email.\n            admin: The method should be email, smsEmail, voice, sms, or defaultMethod;\n",
            "example": "EMAIL"
          },
          "contact": {
            "type": "string",
            "description": "Contact details, email address or phone number"
          },
          "type": {
            "type": "string",
            "description": "The recipient type. \nThe values can be GROUP|ARBITRARY|ADMIN, where Admin = a user, and Arbitrary = an arbitrary email",
            "example": "Admin"
          },
          "addr": {
            "type": "string",
            "description": "The recipient address. \nThe value will be user name if method = admin, or the email address if method = arbitrary",
            "example": "john.doe@logicmonitor.com"
          }
        }
      },
      "AzureSynapseDiscoveryMethodV3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "required": [
              "azureSynapseType"
            ],
            "type": "object",
            "properties": {
              "azureSynapseType": {
                "type": "string"
              }
            }
          }
        ]
      },
      "NetflowAlertModulesCollectorAttributeV3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object",
            "properties": {
              "typeOfAlert": {
                "type": "string"
              },
              "thresholdValueUnit": {
                "type": "string"
              },
              "netflowFilters": {
                "type": "string"
              },
              "trafficType": {
                "type": "string"
              },
              "alertEnable": {
                "type": "boolean"
              },
              "topThresholdExpression": {
                "type": "string"
              },
              "dataDuration": {
                "type": "string"
              },
              "enabled": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "AzureVMBackupStatusCollectorAttributeV3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object",
            "properties": {
              "period": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "SNMPILP": {
        "required": [
          "OID",
          "name"
        ],
        "type": "object",
        "properties": {
          "method": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "OID": {
            "type": "string"
          }
        }
      },
      "RestAwsHealthEventSource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EventSource"
          },
          {
            "type": "object",
            "properties": {
              "schedule": {
                "type": "integer",
                "description": "The polling interval for the EventSource",
                "format": "int32"
              }
            }
          }
        ]
      },
      "DeviceGroupDataSourceDataPointConfig": {
        "required": [
          "alertExpr",
          "dataPointId",
          "dataPointName"
        ],
        "type": "object",
        "properties": {
          "globalAlertExpr": {
            "type": "string",
            "readOnly": true
          },
          "alertForNoData": {
            "type": "integer",
            "description": "The triggered alert level if we cannot collect data for this datapoint. The values can be 1-4 (1:no alert, 2:warn alert, 3:error alert, 4:critical alert)",
            "format": "int32"
          },
          "enableAnomalyAlertSuppression": {
            "type": "string"
          },
          "globalAlertForNoData": {
            "type": "integer",
            "description": "The triggered alert level if we cannot collect data for this datapoint. The values can be 1-4 (1:no alert, 2:warn alert, 3:error alert, 4:critical alert)",
            "format": "int32",
            "readOnly": true
          },
          "criticalAdAdvSetting": {
            "type": "string"
          },
          "disableAlerting": {
            "type": "boolean"
          },
          "alertClearTransitionInterval": {
            "type": "integer",
            "description": "The count that the alert must exist for this many poll cycles before the alert will be cleared (0-60)",
            "format": "int32"
          },
          "globalAlertTransitionInterval": {
            "type": "integer",
            "description": "The count that the alert must exist for this many poll cycles before it will be triggered",
            "format": "int32",
            "readOnly": true
          },
          "alertExprNote": {
            "type": "string"
          },
          "adAdvSettingEnabled": {
            "type": "boolean"
          },
          "errorAdAdvSetting": {
            "type": "string"
          },
          "dataPointDescription": {
            "type": "string",
            "readOnly": true
          },
          "globalEnableAnomalyAlertGeneration": {
            "type": "string"
          },
          "enableAnomalyAlertGeneration": {
            "type": "string"
          },
          "warnAdAdvSetting": {
            "type": "string"
          },
          "dataPointName": {
            "type": "string"
          },
          "dataPointId": {
            "type": "integer",
            "format": "int32"
          },
          "globalEnableAnomalyAlertSuppression": {
            "type": "string"
          },
          "globalAlertClearTransitionInterval": {
            "type": "integer",
            "description": "The count that the alert must exist for this many poll cycles before the alert will be cleared",
            "format": "int32",
            "readOnly": true
          },
          "collectionInterval": {
            "type": "integer",
            "description": "Collection Interval",
            "format": "int64",
            "readOnly": true
          },
          "alertExpr": {
            "type": "string"
          },
          "alertTransitionInterval": {
            "type": "integer",
            "description": "The count that the alert must exist for this many poll cycles before it will be triggered (0-60)",
            "format": "int32"
          }
        }
      },
      "VirtualDataPoint": {
        "type": "object",
        "properties": {
          "rpn": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "NetflowGroupWidget": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Widget"
          },
          {
            "required": [
              "deviceGroupId"
            ],
            "type": "object",
            "properties": {
              "rowFilters": {
                "type": "string"
              },
              "deviceGroupId": {
                "type": "integer",
                "format": "int32"
              },
              "dataType": {
                "type": "string"
              },
              "netflowFilter": {
                "$ref": "#/components/schemas/NetflowFilters"
              },
              "deviceGroupName": {
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "x-discriminator-value": "groupnetflow"
      },
      "ESXAutoDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "required": [
              "entity"
            ],
            "type": "object",
            "properties": {
              "entity": {
                "type": "string"
              }
            }
          }
        ],
        "x-discriminator-value": "ad_esx"
      },
      "CollectorAutoDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "required": [
              "collectorId"
            ],
            "type": "object",
            "properties": {
              "collectorId": {
                "type": "string"
              }
            }
          }
        ],
        "x-discriminator-value": "ad_collector"
      },
      "AzureServiceBusQueue": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ]
      },
      "DeviceGroupDataSourceAlertConfig": {
        "type": "object",
        "properties": {
          "datasourceType": {
            "type": "string"
          },
          "dpConfig": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeviceGroupDataSourceDataPointConfig"
            }
          }
        }
      },
      "XENCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object",
            "properties": {
              "counters": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DataSourceAttribute"
                }
              },
              "xenEntity": {
                "type": "string"
              }
            }
          }
        ],
        "x-discriminator-value": "xen"
      },
      "AwsLBTargetGroupDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ],
        "x-discriminator-value": "ad_awslbtargetgroups"
      },
      "AzureBackupJobDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ]
      },
      "AlertReport": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReportBase"
          },
          {
            "type": "object",
            "properties": {
              "activeOnly": {
                "type": "boolean",
                "description": "true: only alerts that are still alerting (i.e. haven't yet cleared) will be displayed in the report\nfalse: active alerts and cleared alerts will both be displayed in the report"
              },
              "sortedBy": {
                "type": "string",
                "description": "count | host | dataPoint | level | startOn | ackedOn. How displayed alerts will be sorted in the report. Note that if summaryOnly is set to true, you are limited to sortedBy= count | host | dataPoint. If summaryOnly is set to false, you cannot set sortedBy = count"
              },
              "chain": {
                "type": "string",
                "description": "All alerts displayed in the report must have been routed to the Escalation Chains specified in this filter"
              },
              "anomaly": {
                "type": "string",
                "description": "all|yes|no|yes,no|no,yes\nall: return all anomaly, non anomaly and unknown anomaly alerts\nyes: only alerts which has anomaly will be displayed\nno: only alerts which has no anomaly will be displayed\nyes,no:  return all anomaly and non anomaly alerts"
              },
              "dateRange": {
                "type": "string",
                "description": "The Time Range configured for the report. Options include: Last 2 hours | Last 24 hours | Last calendar day | Last 7 days | Last 14 days | Last 30 days | Last calendar month | Last 365 days | Any custom date range in this format: YYYY-MM-dd hh:mm TO YYYY-MM-dd hh:mm"
              },
              "level": {
                "type": "string",
                "description": "all | error | critical\nall: alerts of all severity levels will be displayed if they match the filter criteria\nerror: only error and critical alerts that match the filter criteria will be displayed\ncritical: only critical alerts that match the filter criteria will be displayed"
              },
              "timing": {
                "type": "string",
                "description": "overlap | start - Any alerts active during the specified dateRange will be displayed in the report if time=overlap. If time=start, only alerts that started during the specified dateRange will be displayed in the report"
              },
              "columns": {
                "type": "array",
                "description": "The columns that will be displayed in the report. You should specify the columns in the order in which you'd like them to be displayed. All column names need to be included in this object, but each column should have an associated isHidden field that indicates whether it is displayed or not. NOTE that if summaryOnly is set to true you can only include these columns: Alerts, Group, Device, Instance, Datapoint. If summaryOnly is set to false you can include these columns: Severity, Group, Device, Instance, Datapoint, Thresholds, Value, Began, End, Rule, Chain, Acked, Acked By, Acked On, Notes, In SDT",
                "items": {
                  "$ref": "#/components/schemas/DynamicColumn"
                }
              },
              "dataPoint": {
                "type": "string",
                "description": "The group filter used to determine which alerts will appear in the report. Glob expression supported"
              },
              "sdtFilter": {
                "type": "string",
                "description": "all | sdt | nonsdt\nall: alerts that are in SDT and that aren't in SDT that meet the report criteria will be displayed\nsdt: only alerts that are in SDT and that meet the report criteria will be displayed\nnonsdt: only alerts that aren't in SDT and that meet the report criteria will be displayed"
              },
              "rule": {
                "type": "string",
                "description": "All alerts displayed in the report must have been routed to the Rules specified in this filter"
              },
              "ackFilter": {
                "type": "string",
                "description": "all | acked | nonacked\nall: both acknowledged and non-acknowledged alerts that meet the report criteria will be displayed\nacked: only acknowledged alerts that meet the report criteria will be displayed\nnonacked: only non-acknowledged alerts that meet the report criteria will be displayed"
              },
              "sortedDirection": {
                "type": "string",
                "description": "asc | desc"
              },
              "deviceDisplayName": {
                "type": "string",
                "description": "The device filter used to determine which alerts will appear in the report. Glob expressions supported"
              },
              "summaryOnly": {
                "type": "boolean",
                "description": "true: a column will be added to the report detailing the number of times each alert occurred\nfalse: the number of times each alert occurred will not be displayed in the report"
              },
              "dependencyRoutingState": {
                "type": "string"
              },
              "dependencyRole": {
                "type": "string"
              },
              "dataSourceInstanceName": {
                "type": "string",
                "description": "The instance filter used to determine which alerts will appear in the report. Glob expressions supported"
              },
              "dataSource": {
                "type": "string",
                "description": "All alerts displayed in the report must have been triggered for the Datasources specified in this filter"
              },
              "groupFullPath": {
                "type": "string",
                "description": "The group filter used to determine which alerts will appear in the report. Glob expressions supported"
              },
              "includePreexist": {
                "type": "boolean",
                "description": "true: alerts that started prior to the specified dateRange but that meet all other criteria will be displayed in the report\nfalse: only alerts that started during the specified dateRange will be displayed in the report\nthe default value is true"
              }
            }
          }
        ],
        "x-discriminator-value": "alert"
      },
      "AccessGroupPaginationResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessGroup"
            }
          }
        }
      },
      "EC2ScheduledEventAutoDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ],
        "x-discriminator-value": "ad_awsec2scheduledevents"
      },
      "RestSchedule": {
        "type": "object",
        "properties": {
          "cron": {
            "type": "string",
            "description": "The cron schedule for when the scan should be run",
            "example": "12 * * * *"
          },
          "recipients": {
            "type": "array",
            "description": "The recipients that should receive the notification of the scan finish",
            "example": "[\"sarah@logicmonitor.com\" ]",
            "items": {
              "type": "string"
            }
          },
          "timezone": {
            "type": "string",
            "description": "The timezone for the schedule",
            "example": "America/Los_Angeles"
          },
          "type": {
            "type": "string",
            "description": "The type of schedule. The values can be manual (no schedule)|hourly|daily|weekly|monthly",
            "example": "manual"
          },
          "notify": {
            "type": "boolean",
            "description": "Whether or not an email should be sent when the scan finishes",
            "example": false
          }
        }
      },
      "ResourceSDT": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SDT"
          },
          {
            "type": "object",
            "properties": {
              "deviceId": {
                "type": "integer",
                "description": "The id of the device that the SDT will be associated with",
                "format": "int32"
              },
              "deviceDisplayName": {
                "type": "string",
                "description": "The name of the device that this SDT will be associated with"
              }
            }
          }
        ],
        "x-discriminator-value": "resourcesdt"
      },
      "WebCheckStep": {
        "type": "object",
        "properties": {
          "schema": {
            "type": "string",
            "description": "HTTP schema"
          },
          "respType": {
            "type": "string",
            "description": "The values can be Plain Text/String|Glob expression|JSON|XML|Multi line key value pair\nStep Response Type"
          },
          "HTTPHeaders": {
            "type": "string",
            "description": "HTTP header"
          },
          "auth": {
            "$ref": "#/components/schemas/Authentication"
          },
          "matchType": {
            "type": "string",
            "description": "Body match type",
            "example": "plain"
          },
          "description": {
            "type": "string",
            "description": "The description of the Step"
          },
          "type": {
            "type": "string",
            "description": "The values can be script|config\nThe type of service step",
            "readOnly": true,
            "example": "config"
          },
          "timeout": {
            "type": "integer",
            "description": "Request timeout measured in seconds",
            "format": "int32"
          },
          "useDefaultRoot": {
            "type": "boolean",
            "description": "The values can be true|false\nCheck if using the default root",
            "example": true
          },
          "path": {
            "type": "string",
            "description": "Path for JSON, XPATH"
          },
          "HTTPMethod": {
            "type": "string",
            "description": "The values can be GET|HEAD|POST\nSpecifies the type of HTTP method",
            "example": "GET"
          },
          "enable": {
            "type": "boolean",
            "description": "The values can be true|false\nSpecifies whether to enable step or not"
          },
          "HTTPVersion": {
            "type": "string",
            "description": "The values can be 1.1|1\nSpecifies HTTP version",
            "example": "1.1"
          },
          "keyword": {
            "type": "string",
            "description": "Keyword that matches the body"
          },
          "respScript": {
            "type": "string",
            "description": "The Step Response Script"
          },
          "label": {
            "type": "string",
            "description": "The Label of the Step"
          },
          "url": {
            "type": "string",
            "description": "The URL of service step",
            "example": "/"
          },
          "invertMatch": {
            "type": "boolean",
            "description": "The values can be true|false\nChecks if invert matches or not",
            "example": false
          },
          "reqScript": {
            "type": "string",
            "description": "The Request Script"
          },
          "HTTPBody": {
            "type": "string",
            "description": "HTTP Body"
          },
          "followRedirection": {
            "type": "boolean",
            "description": "The values can be true|false\nSpecifies whether to follow redirection or not",
            "example": true
          },
          "postDataEditType": {
            "type": "string",
            "description": "The values can be Raw|Formatted Data\nSpecifies POST data type",
            "example": "raw"
          },
          "name": {
            "type": "string",
            "description": "The name of the Step"
          },
          "requireAuth": {
            "type": "boolean",
            "description": "The values can be true|false\nChecks if authorization required or not",
            "example": false
          },
          "reqType": {
            "type": "string",
            "description": "The values can be script|config\nStep Request Type"
          },
          "fullpageLoad": {
            "type": "boolean",
            "description": "The values can be true|false\nChecks if full page should be loaded or not",
            "example": false
          },
          "statusCode": {
            "type": "string",
            "description": "The expected status code"
          }
        }
      },
      "DeviceClusterAlertDefSDT": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SDT"
          },
          {
            "required": [
              "deviceClusterAlertDefId"
            ],
            "type": "object",
            "properties": {
              "deviceClusterAlertDefId": {
                "type": "integer",
                "format": "int32"
              },
              "deviceGroupId": {
                "type": "integer",
                "format": "int32",
                "readOnly": true
              },
              "dataSourceName": {
                "type": "string",
                "readOnly": true
              },
              "deviceGroupFullPath": {
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "x-discriminator-value": "deviceclusteralertdefsdt"
      },
      "DashboardData": {
        "type": "object",
        "properties": {
          "userPermission": {
            "type": "string",
            "description": "The permission of the user that made the API call",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "The name of the dashboard",
            "readOnly": true
          },
          "sharable": {
            "type": "boolean",
            "description": "Whether or not the dashboard is sharable. This value will always be true unless the dashboard is a private dashboard",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "description": "The Id of the dashboard",
            "format": "int32",
            "readOnly": true
          }
        }
      },
      "DeviceDataSourceInstanceConfigAlert": {
        "type": "object",
        "properties": {
          "alertLevel": {
            "type": "integer",
            "description": "Alert level, 0 - alert is cleared, 2 - warn alert, 3 - error alert, 4 - critical alert",
            "format": "int32",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "description": "Alert id",
            "readOnly": true
          },
          "alertId": {
            "type": "string",
            "description": "Alert internal id",
            "readOnly": true
          },
          "alertSummary": {
            "type": "string",
            "description": "Summary of this config source alert",
            "readOnly": true
          },
          "timestamp": {
            "type": "integer",
            "description": "Timestamp of alert start or clear",
            "format": "int64",
            "readOnly": true
          }
        }
      },
      "PingCheck": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Website"
          },
          {
            "required": [
              "host"
            ],
            "type": "object",
            "properties": {
              "percentPktsNotReceiveInTime": {
                "type": "integer",
                "description": "The percentage of packets that should be returned in the time period specified by timeoutInMSPktsNotReceive for each ping check",
                "format": "int32"
              },
              "count": {
                "type": "integer",
                "description": "The number of packets to send",
                "format": "int32"
              },
              "host": {
                "type": "string",
                "description": "The URL to check, without the scheme or protocol (e.g http or https)\nE.g. if the URL is \"http://www.google.com, then the host=\"www.google.com\""
              },
              "timeoutInMSPktsNotReceive": {
                "type": "integer",
                "description": "The time period that the percentage of packets specified by percentPktsNotReceiveInTime must be returned in for each ping check",
                "format": "int64"
              }
            }
          }
        ],
        "x-discriminator-value": "pingcheck"
      },
      "GlobMatchToggle": {
        "type": "object",
        "properties": {
          "isGlob": {
            "type": "boolean"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "RoleReport": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReportBase"
          },
          {
            "type": "object",
            "properties": {
              "columns": {
                "type": "array",
                "description": "The columns displayed in the report",
                "items": {
                  "$ref": "#/components/schemas/DynamicColumn"
                }
              },
              "displayFormat": {
                "type": "string",
                "description": "The display format for the report. Acceptable values are: list, detail"
              }
            }
          }
        ],
        "x-discriminator-value": "role"
      },
      "Debug": {
        "type": "object",
        "properties": {
          "output": {
            "type": "string",
            "description": "The value of the debug command",
            "readOnly": true
          },
          "cmdline": {
            "type": "string",
            "description": "The debug command to execute"
          },
          "cmdContext": {
            "type": "string",
            "description": "The session prefix name",
            "readOnly": true
          },
          "sessionId": {
            "type": "string",
            "description": "The session id",
            "readOnly": true
          }
        }
      },
      "CollectorVersionPaginationResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "searchId": {
            "type": "string",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CollectorVersion"
            }
          }
        }
      },
      "JDBCAutoDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "required": [
              "ports",
              "query",
              "type",
              "url"
            ],
            "type": "object",
            "properties": {
              "query": {
                "type": "string"
              },
              "ports": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "separator": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "sid": {
                "type": "string"
              }
            }
          }
        ],
        "x-discriminator-value": "ad_jdbc"
      },
      "SiteMonitorCheckPointPaginationResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "searchId": {
            "type": "string",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SiteMonitorCheckpoint"
            }
          }
        }
      },
      "SaasSalesforceInstanceStatusCollectorAttributeV3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object"
          }
        ]
      },
      "DeviceSLAWidget": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Widget"
          },
          {
            "required": [
              "metrics"
            ],
            "type": "object",
            "properties": {
              "calculationMethod": {
                "type": "integer",
                "description": "Calculation method: 0 = percent all resources available, 1 = average of all SLA metrics",
                "format": "int32"
              },
              "daysInWeek": {
                "type": "string",
                "description": "The days that SLA should be computed for, separated by commas. 1=Sunday, 2=Monday, 3=Tuesday, 4=Wednesday, 5=Thursday, 6=Friday, 7=Saturday."
              },
              "displayType": {
                "type": "integer",
                "description": "Whether or not selected metrics should be combined into one number (displayType:0) or should be displayed individually, up to four metrics (displayType:1)",
                "format": "int32"
              },
              "topX": {
                "type": "integer",
                "description": "Top list size for each point, 1 means aggregate",
                "format": "int32"
              },
              "timezone": {
                "type": "string",
                "description": "The specific timezone for the widget"
              },
              "bottomLabel": {
                "type": "string",
                "description": "The services that should be used to compute the SLA, where each service should include serviceGroup and service"
              },
              "displayPercentageBar": {
                "type": "boolean",
                "description": "Whether a progress bar is displayed in list mode"
              },
              "periodInOneDay": {
                "type": "string",
                "description": "The period during the selected days that the SLA should be computed for. * = all day, or a time range can be specified in the format of \"hh:mm TO hh:mm\", e.g. \"01:15 TO 17:15\""
              },
              "metrics": {
                "type": "array",
                "description": "The metrics (datapoints) that should be used to compute the SLA, where each service should include groupName (can be *), deviceName (can be *), dataSourceId or dataSourceFullName, instances (can be *), metric (datapoint), threshold, and exclusionSDTType (empty string means SDT periods will not be excluded, \"group\" means SDT periods at the device group level will be excluded, and \"device\" means SDT periods at the device level will be excluded)",
                "items": {
                  "$ref": "#/components/schemas/SlaMetric"
                }
              },
              "unmonitoredTimeType": {
                "type": "integer",
                "description": "How no data should be treated: 0 = unmonitored time will be ignored & subtracted from the total possible time, 1 = unmonitored time will be subtracted from uptime and counted as a violation, 2 = unmonitored time will be added to uptime and counted as available",
                "format": "int32"
              },
              "colorThresholds": {
                "type": "array",
                "description": "The threshold of color changes",
                "items": {
                  "$ref": "#/components/schemas/ColorThreshold"
                }
              }
            }
          }
        ],
        "x-discriminator-value": "devicesla"
      },
      "AzureVirtualDesktopSessionHostsDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ],
        "x-discriminator-value": "ad_azurevirtualdesktopsessionhosts"
      },
      "NetflowPort": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NetflowDataBase"
          },
          {
            "type": "object",
            "properties": {
              "percentUsage": {
                "type": "number",
                "format": "double",
                "readOnly": true
              },
              "port": {
                "type": "integer",
                "format": "int32",
                "readOnly": true
              },
              "usage": {
                "type": "number",
                "format": "double",
                "readOnly": true
              },
              "description": {
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "x-discriminator-value": "port"
      },
      "SaasStatusDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ]
      },
      "GroupNetFlowRecord": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NetflowDataBase"
          },
          {
            "type": "object",
            "properties": {
              "srcIP": {
                "type": "string",
                "description": "the source ip of flow record",
                "readOnly": true
              },
              "percentUsage": {
                "type": "number",
                "description": "the percent traffic of the flow record",
                "format": "double",
                "readOnly": true
              },
              "lastEpochInSec": {
                "type": "integer",
                "description": "the end time  of this flow record",
                "format": "int64",
                "readOnly": true
              },
              "ifOut": {
                "type": "integer",
                "description": "the out interface of this flow record",
                "format": "int64",
                "readOnly": true
              },
              "usage": {
                "type": "number",
                "description": "the total bytes of this flow record (source bytes + destination bytes)",
                "format": "double",
                "readOnly": true
              },
              "srcASN": {
                "type": "integer",
                "description": "source autonomous system number",
                "format": "int64",
                "readOnly": true
              },
              "dstDNS": {
                "type": "string",
                "description": "the dns name of destination ip",
                "readOnly": true
              },
              "srcPort": {
                "type": "integer",
                "description": "the source port of the flow record",
                "format": "int32",
                "readOnly": true
              },
              "deviceDisplayName": {
                "type": "string"
              },
              "ifInDisplayName": {
                "type": "string"
              },
              "firstEpochInSec": {
                "type": "integer",
                "description": "the start time of this flow record",
                "format": "int64",
                "readOnly": true
              },
              "protocol": {
                "type": "string",
                "description": "the protocol name of this flow record",
                "readOnly": true
              },
              "dstPort": {
                "type": "integer",
                "description": "the destination port",
                "format": "int32",
                "readOnly": true
              },
              "ifIn": {
                "type": "integer",
                "description": "the in interface of this flow record",
                "format": "int64",
                "readOnly": true
              },
              "sourceMBytes": {
                "type": "number",
                "description": "the source bytes of this flow record",
                "format": "double",
                "readOnly": true
              },
              "srcAsnName": {
                "type": "string",
                "description": "the name of src ASN number",
                "readOnly": true
              },
              "srcDNS": {
                "type": "string",
                "description": "the dns name of source ip",
                "readOnly": true
              },
              "destinationMBytes": {
                "type": "number",
                "description": "the destination byte of this flow record",
                "format": "double",
                "readOnly": true
              },
              "dstASN": {
                "type": "integer",
                "description": "destination autonomous system number",
                "format": "int64",
                "readOnly": true
              },
              "dstIP": {
                "type": "string",
                "description": "the destination ip of the flow record",
                "readOnly": true
              },
              "ifOutDisplayName": {
                "type": "string"
              },
              "destAsnName": {
                "type": "string",
                "description": "the name of dest ASN number",
                "readOnly": true
              }
            }
          }
        ],
        "x-discriminator-value": "groupflowrecord"
      },
      "NormalGraphWidget": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Widget"
          },
          {
            "required": [
              "dsiId",
              "graphId"
            ],
            "type": "object",
            "properties": {
              "graphName": {
                "type": "string",
                "description": "The id of the datasource graph this widget was pinned from",
                "readOnly": true
              },
              "hostName": {
                "type": "string",
                "description": "The display name of the device the graph was pinned from",
                "readOnly": true
              },
              "hId": {
                "type": "integer",
                "description": "The id of the device the graph was pinned from",
                "format": "int32"
              },
              "dsiId": {
                "type": "integer",
                "description": "The id of the datasource instance the graph was pinned from",
                "format": "int32"
              },
              "dsName": {
                "type": "string",
                "description": "The name (not display name) of the datasource the graph is associated with",
                "readOnly": true
              },
              "graphId": {
                "type": "integer",
                "description": "The id of the datasource graph this widget was pinned from",
                "format": "int32"
              },
              "dsiName": {
                "type": "string",
                "description": "The name of the instance the graph was pinned from",
                "readOnly": true
              }
            }
          }
        ],
        "x-discriminator-value": "ngraph"
      },
      "NMapDDR": {
        "type": "object",
        "properties": {
          "changeName": {
            "type": "string"
          },
          "assignment": {
            "type": "array",
            "description": "Information about how discovered devices are included in or excluded from monitoring. Assignment objects can be created for different types of discovered devices",
            "items": {
              "$ref": "#/components/schemas/Assignment"
            }
          }
        }
      },
      "SaasO365SkusDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ]
      },
      "AzureWebJobDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ]
      },
      "NetflowBandwidth": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NetflowDataBase"
          },
          {
            "type": "object",
            "properties": {
              "receive": {
                "type": "number",
                "description": "the total bytes of received",
                "format": "double",
                "readOnly": true
              },
              "percentUsage": {
                "type": "number",
                "description": "the total bytes of send and received in percentage",
                "format": "double",
                "readOnly": true
              },
              "usage": {
                "type": "number",
                "description": "the total bytes of send and received",
                "format": "double",
                "readOnly": true
              },
              "deviceId": {
                "type": "integer",
                "description": "this is device id",
                "format": "int32",
                "readOnly": true
              },
              "send": {
                "type": "number",
                "description": "the total bytes of the endpoint sends",
                "format": "double",
                "readOnly": true
              },
              "deviceDisplayName": {
                "type": "string",
                "description": "the device display name",
                "readOnly": true
              }
            }
          }
        ],
        "x-discriminator-value": "bandwidth"
      },
      "PaaSMongoDbCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "required": [
              "resourceUrl"
            ],
            "type": "object",
            "properties": {
              "resourceUrl": {
                "type": "string"
              }
            }
          }
        ]
      },
      "XENAutoDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "required": [
              "entity"
            ],
            "type": "object",
            "properties": {
              "entity": {
                "type": "string"
              }
            }
          }
        ],
        "x-discriminator-value": "ad_xen"
      },
      "SaasSalesforceJsonCollectorAttributeV3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "required": [
              "endpointUrlSuffix"
            ],
            "type": "object",
            "properties": {
              "endpointUrlSuffix": {
                "type": "string"
              },
              "period": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "SaasOffice365CsvReportCollectorAttributeV3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "required": [
              "reportName"
            ],
            "type": "object",
            "properties": {
              "period": {
                "type": "integer",
                "format": "int32"
              },
              "reportName": {
                "type": "string"
              },
              "instanceColumnName": {
                "type": "string"
              }
            }
          }
        ]
      },
      "RawDataValues": {
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "description": "Datapoint values 2-D list",
            "readOnly": true,
            "items": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "time": {
            "type": "array",
            "description": "Timestamp list",
            "readOnly": true,
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "nextPageParams": {
            "type": "string",
            "description": "The next page parameters",
            "readOnly": true
          }
        }
      },
      "SaasSlackHealthCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "required": [
              "endpointUrlSuffix"
            ],
            "type": "object",
            "properties": {
              "endpointUrlSuffix": {
                "type": "string"
              },
              "period": {
                "type": "integer",
                "format": "int32"
              },
              "endpointUrlPrefix": {
                "type": "string"
              }
            }
          }
        ]
      },
      "AzureResourceHealthCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object",
            "properties": {
              "period": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "x-discriminator-value": "azureresourcehealth"
      },
      "GcpPubSubSnapshotDiscoveryMethodV3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ]
      },
      "NameAndValue": {
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of a property",
            "example": "addr"
          },
          "value": {
            "type": "string",
            "description": "The value of a property",
            "example": "127.0.0.1"
          }
        }
      },
      "AutoDiscoveryConfiguration": {
        "required": [
          "method"
        ],
        "type": "object",
        "properties": {
          "persistentInstance": {
            "type": "boolean",
            "description": "Persist discovered instance"
          },
          "scheduleInterval": {
            "type": "integer",
            "description": "Auto discovery schedule interval in minutes. 0 means host or data source changed. The values can be 0|15|60|1440",
            "format": "int32"
          },
          "deleteInactiveInstance": {
            "type": "boolean",
            "description": "Delete inactive instance"
          },
          "method": {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          "instanceAutoGroupMethod": {
            "type": "string",
            "description": "Auto group method. The values can be none|netscaler|netscalerservicegroup|regex|esx|ilp"
          },
          "instanceAutoGroupMethodParams": {
            "type": "string",
            "description": "Auto group method's parameters"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AutoDiscoveryFilter"
            }
          },
          "disableInstance": {
            "type": "boolean",
            "description": "Disable discovered instance"
          }
        }
      },
      "ApiPerfMetrics": {
        "type": "object",
        "properties": {
          "summary": {
            "type": "string",
            "description": "api's summary defined in swagger.json",
            "readOnly": true,
            "example": "get alert list"
          },
          "totalWaitingRequests": {
            "type": "integer",
            "description": "total waiting requests",
            "format": "int64",
            "readOnly": true
          },
          "totalRejectedGetAPICount": {
            "type": "integer",
            "description": "api's summary defined in swagger.json",
            "format": "int64",
            "readOnly": true
          },
          "totNanoTime": {
            "type": "integer",
            "description": "total time taken to process requests",
            "format": "int64",
            "readOnly": true
          },
          "totalProcessedRequests": {
            "type": "integer",
            "description": "total processed requests",
            "format": "int64",
            "readOnly": true
          },
          "totalRequests": {
            "type": "integer",
            "description": "total requests",
            "format": "int64",
            "readOnly": true
          },
          "api": {
            "type": "string",
            "description": "api name",
            "readOnly": true,
            "example": "10"
          },
          "maxNanoTime": {
            "type": "integer",
            "description": "Max time taken to process a request",
            "format": "int64",
            "readOnly": true
          },
          "tags": {
            "type": "array",
            "description": "api tags",
            "readOnly": true,
            "example": "Devices, Device Groups",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GcpStackDriverCollectorAttributeV3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object",
            "properties": {
              "period": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "AwsExternalId": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string"
          },
          "externalId": {
            "type": "string"
          }
        }
      },
      "IPMICollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object",
            "properties": {
              "ipmiSensor": {
                "type": "string"
              }
            }
          }
        ],
        "x-discriminator-value": "ipmi"
      },
      "AlertRule": {
        "required": [
          "escalatingChainId",
          "name",
          "priority",
          "sendAnomalySuppressedAlert"
        ],
        "type": "object",
        "properties": {
          "datapoint": {
            "type": "string",
            "description": "The datapoint for which the alert rule is configured to match",
            "example": "*"
          },
          "instance": {
            "type": "string",
            "description": "The instance for which the alert rule is configured to match",
            "example": "*"
          },
          "devices": {
            "uniqueItems": true,
            "type": "array",
            "description": "The device names and service names for which the alert rule is configured to match",
            "example": "[\"Cisco Router\"]",
            "items": {
              "type": "string"
            }
          },
          "escalatingChainId": {
            "type": "integer",
            "description": "The id of the escalation chain associated with the alert rule",
            "format": "int32"
          },
          "resourceProperties": {
            "type": "array",
            "description": "The resource property filters list",
            "items": {
              "$ref": "#/components/schemas/DeviceProperty"
            }
          },
          "sendAnomalySuppressedAlert": {
            "type": "boolean",
            "description": "Whether or not send anomaly suppressed alert",
            "example": true
          },
          "priority": {
            "type": "integer",
            "description": "The priority associated with the alert rule",
            "format": "int32"
          },
          "suppressAlertAckSdt": {
            "type": "boolean",
            "description": "Whether or not status notifications for acknowledgements and SDTs should be sent to the alert rule",
            "example": true
          },
          "datasource": {
            "type": "string",
            "description": "The datasource for which the alert rule is configured to match",
            "example": "Port-"
          },
          "suppressAlertClear": {
            "type": "boolean",
            "description": "Whether or not alert clear notifications should be sent to the alert rule",
            "example": true
          },
          "name": {
            "type": "string",
            "description": "The name of the alert rule",
            "example": "Warning"
          },
          "id": {
            "type": "integer",
            "description": "The Id of the alert rule",
            "format": "int32",
            "readOnly": true
          },
          "levelStr": {
            "type": "string",
            "description": "The alert severity levels for which the alert rule is configured to match. \nThe values can be All|Warn|Error|Critical",
            "example": "Warn"
          },
          "deviceGroups": {
            "uniqueItems": true,
            "type": "array",
            "description": "The device groups and service groups for which the alert rule is configured to match",
            "example": "[ \"Devices by Type\"]",
            "items": {
              "type": "string"
            }
          },
          "escalatingChain": {
            "type": "object",
            "properties": {},
            "description": "The escalation chain associated with the alert rule",
            "readOnly": true
          },
          "escalationInterval": {
            "type": "integer",
            "description": "The escalation interval associated with the alert rule, in minutes",
            "format": "int32"
          }
        }
      },
      "SDKScriptCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "required": [
              "groovyScript",
              "sdkName",
              "sdkVersion"
            ],
            "type": "object",
            "properties": {
              "groovyScript": {
                "type": "string"
              },
              "sdkVersion": {
                "type": "string"
              },
              "sdkName": {
                "type": "string"
              }
            }
          }
        ],
        "x-discriminator-value": "sdkscript"
      },
      "DeviceFilter": {
        "required": [
          "attribute"
        ],
        "type": "object",
        "properties": {
          "comment": {
            "type": "string"
          },
          "attribute": {
            "type": "string"
          },
          "operation": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "AlertResponse": {
        "type": "object",
        "properties": {
          "resourceId": {
            "type": "integer",
            "description": "The device specific LogicModule Id",
            "format": "int32",
            "readOnly": true
          },
          "endEpoch": {
            "type": "integer",
            "description": "The time (in epoch format) that the alert ended",
            "format": "int64",
            "readOnly": true
          },
          "threshold": {
            "type": "string",
            "description": "The threshold associated with the object in alert",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "description": "The type of alert",
            "readOnly": true
          },
          "startEpoch": {
            "type": "integer",
            "description": "The time (in epoch format) that the alert started",
            "format": "int64",
            "readOnly": true
          },
          "enableAnomalyAlertGeneration": {
            "type": "string",
            "description": "Indicates dynamic threshold alert generation setting. Expression is comma separated\n0 denotes OFF, 1 denotes ON, -1 denotes INVALID\n1,0,1 =   warn : ON     error: OFF   critical: ON\nEmpty value on this parameter means : 0,0,0",
            "readOnly": true
          },
          "internalId": {
            "type": "string",
            "description": "The internal id for the alert",
            "readOnly": true
          },
          "monitorObjectName": {
            "type": "string",
            "description": "The name of the object that the alert is associated with",
            "readOnly": true
          },
          "dataPointName": {
            "type": "string",
            "description": "The name of the datapoint in alert",
            "readOnly": true
          },
          "dataPointId": {
            "type": "integer",
            "description": "The id of the datapoint in alert",
            "format": "int32",
            "readOnly": true
          },
          "suppressor": {
            "type": "string",
            "description": "The component (For example: SDT, HostClusterAlert) which suppressed the alert",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "description": "The alert id",
            "readOnly": true
          },
          "ruleId": {
            "type": "integer",
            "description": "The id of the rule the alert matches",
            "format": "int32",
            "readOnly": true
          },
          "alertExternalTicketUrl": {
            "$ref": "#/components/schemas/JSONObject"
          },
          "tenant": {
            "type": "string",
            "description": "Tenant to which this alert belongs to. ",
            "readOnly": true
          },
          "alertValue": {
            "type": "string",
            "description": "The value that triggered the alert",
            "readOnly": true
          },
          "sdted": {
            "type": "boolean",
            "description": "It specifies if the SDT is set for an active alert or not. However, the sdted is set to false for cleared alert as you cannot apply SDT to a cleared alert.",
            "readOnly": true
          },
          "SDT": {
            "type": "object",
            "properties": {},
            "description": "The active SDT, if one exists",
            "readOnly": true
          },
          "enableAnomalyAlertSuppression": {
            "type": "string",
            "description": "Indicates anomaly detection alert suppression setting, expression is comma separated\n0 denotes OFF, 1 denotes ON, -1 denotes INVALID\n1,0,1 =   warn : ON     error: OFF   critical: ON\nEmpty value on this parameter means : 0,0,0",
            "readOnly": true
          },
          "receivedList": {
            "type": "string",
            "description": "The recipients that have received the alert",
            "readOnly": true
          },
          "monitorObjectGroups": {
            "type": "object",
            "properties": {},
            "description": "Information about the groups the object is a member of",
            "readOnly": true
          },
          "chainId": {
            "type": "integer",
            "description": "The id of the escalation chain the alert was routed to",
            "format": "int32",
            "readOnly": true
          },
          "resourceTemplateId": {
            "type": "integer",
            "description": "The id of the datasource in alert",
            "format": "int32",
            "readOnly": true
          },
          "cleared": {
            "type": "boolean",
            "description": "Whether or not the alert has cleared",
            "readOnly": true
          },
          "adAlertDesc": {
            "type": "string",
            "description": "The description for dynamic threshold based alert",
            "readOnly": true
          },
          "resourceTemplateName": {
            "type": "string",
            "description": "The name of the datasource in alert",
            "readOnly": true
          },
          "anomaly": {
            "type": "boolean",
            "description": "Indicates the anomaly alert, value can be true/false/null. If alert value lies within confidence band then false, otherwise true. If confidence band is not available then value will be null.",
            "readOnly": true
          },
          "instanceName": {
            "type": "string",
            "description": "The name of the instance in alert",
            "readOnly": true
          },
          "monitorObjectId": {
            "type": "integer",
            "description": "The id of the object that the alert is associated with",
            "format": "int32",
            "readOnly": true
          },
          "rule": {
            "type": "string",
            "description": "The rule the alert matches",
            "readOnly": true
          },
          "ackComment": {
            "type": "string",
            "description": "The comment submitted with the acknowledgement",
            "readOnly": true
          },
          "alertGroupEntityValue": {
            "type": "string",
            "description": "Alert group entity value for stateful log alerts",
            "readOnly": true
          },
          "instanceId": {
            "type": "integer",
            "description": "The id of the instance in alert",
            "format": "int32",
            "readOnly": true
          },
          "suppressDesc": {
            "type": "string",
            "description": "The description for suppressed alert",
            "readOnly": true
          },
          "nextRecipient": {
            "type": "integer",
            "description": "The next recipient in the escalation chain for this alert",
            "format": "int32",
            "readOnly": true
          },
          "adAlert": {
            "type": "boolean",
            "description": "Specifies whether alert is dynamic threshold based or not",
            "readOnly": true
          },
          "ackedBy": {
            "type": "string",
            "description": "The user that acknowledged the alert",
            "readOnly": true
          },
          "severity": {
            "type": "integer",
            "description": "The alert severity, where 2=warning, 3=error and 4=critical",
            "format": "int32",
            "readOnly": true
          },
          "ackedEpoch": {
            "type": "integer",
            "description": "The time (in epoch format) that the alert was acknowledged",
            "format": "int64",
            "readOnly": true
          },
          "chain": {
            "type": "string",
            "description": "The escalation chain the alert was routed to",
            "readOnly": true
          },
          "subChainId": {
            "type": "integer",
            "description": "The id of the sub time based chain",
            "format": "int32",
            "readOnly": true
          },
          "logMetaData": {
            "type": "string",
            "description": "Specified log alert metadata fields value",
            "readOnly": true
          },
          "monitorObjectType": {
            "type": "string",
            "readOnly": true
          },
          "acked": {
            "type": "boolean",
            "description": "Whether or not the alert has been acknowledged",
            "readOnly": true
          },
          "resourceTemplateType": {
            "type": "string",
            "description": "The type of the logicmodule in alert",
            "readOnly": true
          },
          "clearValue": {
            "type": "string",
            "description": "The value that cleared the alert",
            "readOnly": true
          },
          "instanceDescription": {
            "type": "string",
            "description": "The description of the instance in alert",
            "readOnly": true
          },
          "dependencyRoutingState": {
            "type": "string",
            "description": "The dependency routing state",
            "readOnly": true
          },
          "dependencyRole": {
            "type": "string",
            "description": "The dependency role",
            "readOnly": true
          }
        }
      },
      "PerfmonCounter": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "GcpBackendServiceHealthCollectorAttributeV3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object",
            "properties": {
              "period": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "SyntheticsSeleniumCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "required": [
              "checkType",
              "configs",
              "syntheticScript"
            ],
            "type": "object",
            "properties": {
              "checkType": {
                "type": "string"
              },
              "configs": {
                "type": "string"
              },
              "syntheticScript": {
                "type": "string"
              }
            }
          }
        ]
      },
      "ReportGroupPaginationResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "searchId": {
            "type": "string",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportGroup"
            }
          }
        }
      },
      "HostInventoryMetric": {
        "required": [
          "dataSourceId"
        ],
        "type": "object",
        "properties": {
          "dataSourceId": {
            "type": "integer",
            "format": "int32"
          },
          "instances": {
            "type": "string"
          },
          "dataSourceFullName": {
            "type": "string"
          }
        }
      },
      "HostCpuReport": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReportBase"
          },
          {
            "required": [
              "hostsVal"
            ],
            "type": "object",
            "properties": {
              "dateRange": {
                "type": "string",
                "description": "The Time Range configured for the report: Last 2 hours | Last 24 hours | Last calendar day | Last 7 days | Last 14 days | Last 30 days | Last calendar month | Last 365 days | Any custom date range in this format: YYYY-MM-dd hh:mm TO YYYY-MM-dd hh:mm"
              },
              "hostsVal": {
                "type": "string",
                "description": "The groups selected for the report, where multiple devices are separated by commas"
              },
              "top10Only": {
                "type": "boolean",
                "description": "true | false\nfalse: CPU metrics will be displayed for all selected devices or groups\ntrue: CPU metrics will only be displayed for the top ten device or groups"
              },
              "displayGraphs": {
                "type": "boolean",
                "description": "true | false. Whether or not CPU graphs should be displayed at the end of the report"
              }
            }
          }
        ],
        "x-discriminator-value": "host cpu"
      },
      "DataSource": {
        "required": [
          "collectInterval",
          "collectMethod",
          "collectorAttribute",
          "name"
        ],
        "type": "object",
        "properties": {
          "eriDiscoveryConfig": {
            "$ref": "#/components/schemas/ScriptERIDiscoveryAttributeV3"
          },
          "displayName": {
            "type": "string",
            "description": "The data source display name"
          },
          "description": {
            "type": "string",
            "description": "The description for the LMModule"
          },
          "appliesTo": {
            "type": "string",
            "description": "The Applies To for the LMModule"
          },
          "lineageId": {
            "type": "string",
            "description": "The lineageId the LMModule belongs to",
            "readOnly": true
          },
          "collectMethod": {
            "type": "string",
            "description": "The  method to collect data. The values can be snmp|ping|exs|webpage|wmi|cim|datadump|dns|ipmi|jdbb|script|udp|tcp|xen"
          },
          "checksum": {
            "type": "string",
            "description": "The metadata checksum for the LMModule content",
            "readOnly": true
          },
          "dataPoints": {
            "type": "array",
            "description": "The data point list",
            "items": {
              "$ref": "#/components/schemas/DataPoint"
            }
          },
          "id": {
            "type": "integer",
            "description": "The ID of the LMModule",
            "format": "int32",
            "readOnly": true
          },
          "group": {
            "type": "string",
            "description": "The group the LMModule is in"
          },
          "collectorAttribute": {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          "autoDiscoveryConfig": {
            "$ref": "#/components/schemas/AutoDiscoveryConfiguration"
          },
          "payloadVersion": {
            "type": "integer",
            "description": "The DataSource payload version for custom metrics",
            "format": "int32",
            "readOnly": true
          },
          "useWildValueAsUUID": {
            "type": "boolean",
            "description": "Use wild-value as unique identifier in case of multi instance datasource: true|false",
            "readOnly": true
          },
          "enableAutoDiscovery": {
            "type": "boolean",
            "description": "Enable Auto Discovery or not when this data source has multi instance: false|true"
          },
          "technology": {
            "type": "string",
            "description": "The Technical Notes for the LMModule"
          },
          "version": {
            "type": "integer",
            "description": "The data source version",
            "format": "int64",
            "readOnly": true
          },
          "tags": {
            "type": "string",
            "description": "The Tags for the LMModule"
          },
          "auditVersion": {
            "type": "integer",
            "description": "The data source audit version",
            "format": "int64",
            "readOnly": true
          },
          "hasMultiInstances": {
            "type": "boolean",
            "description": "If the DataSource has multi instance: true|false",
            "readOnly": true
          },
          "installationMetadata": {
            "$ref": "#/components/schemas/IntegrationMetadata"
          },
          "eriDiscoveryInterval": {
            "type": "integer",
            "description": "The DataSource data collect interval",
            "format": "int32"
          },
          "enableEriDiscovery": {
            "type": "boolean",
            "description": "Enable ERI Discovery or not: false|true"
          },
          "collectInterval": {
            "type": "integer",
            "description": "The DataSource data collect interval",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "The data source name"
          }
        }
      },
      "RestSaaSAccountTestV3": {
        "type": "object",
        "properties": {
          "privateKey": {
            "type": "string"
          },
          "accountId": {
            "type": "string"
          },
          "clientId": {
            "type": "string"
          },
          "secretKey": {
            "type": "string"
          },
          "statusType": {
            "type": "string"
          },
          "accountType": {
            "type": "string"
          },
          "tenantId": {
            "type": "string"
          },
          "serviceName": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "statusUrls": {
            "type": "string"
          }
        }
      },
      "WidgetToken": {
        "type": "object",
        "properties": {
          "inheritList": {
            "type": "array",
            "description": "The widget token inherit list",
            "items": {
              "$ref": "#/components/schemas/WidgetTokenInheritance"
            }
          },
          "name": {
            "type": "string",
            "description": "This is the name of the parent group of devices, if there is one established",
            "example": "Default Device Group"
          },
          "type": {
            "type": "string",
            "description": "The values can be owned | inherit\nSpecifies the type of the widget",
            "readOnly": true
          },
          "value": {
            "type": "string",
            "description": "This is the name of the child group of devices, if there is one",
            "example": "Devices by Type/Network"
          }
        }
      },
      "IntegrationAuditLog": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "string",
            "description": "HTTP request headers used in alert delivery",
            "readOnly": true
          },
          "alertType": {
            "type": "integer",
            "description": "The type of the alert",
            "format": "int32",
            "readOnly": true
          },
          "integrationName": {
            "type": "string",
            "description": "The name of integration",
            "readOnly": true
          },
          "numRetries": {
            "type": "integer",
            "description": "The number of times delivery was retried",
            "format": "int32",
            "readOnly": true
          },
          "integrationAlertStatus": {
            "type": "string",
            "description": "The Integration Alert Status used for delivery",
            "readOnly": true
          },
          "errorMessage": {
            "type": "string",
            "description": "Error message (if any) from ADC",
            "readOnly": true
          },
          "externalTicketId": {
            "type": "string",
            "description": "The parsed External Ticket ID from alert delivery",
            "readOnly": true
          },
          "payloadFormat": {
            "type": "string",
            "description": "The outbound payload format",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "description": "The URL where the alert was delivered to",
            "readOnly": true
          },
          "happenedOnMs": {
            "type": "integer",
            "description": "When the delivery result was saved in LMES",
            "format": "int64",
            "readOnly": true
          },
          "integrationType": {
            "type": "string",
            "description": "The type of integration",
            "readOnly": true
          },
          "alertInstanceId": {
            "type": "string",
            "description": "The id of the alert instance",
            "readOnly": true
          },
          "payload": {
            "type": "string",
            "description": "The HTTP Request payload",
            "readOnly": true
          },
          "httpResponseCode": {
            "type": "integer",
            "description": "The HTTP Response Code received from 3rd party API",
            "format": "int32",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "description": "The id of audit log record",
            "readOnly": true
          },
          "alertId": {
            "type": "string",
            "description": "The id of the alert",
            "readOnly": true
          },
          "httpResponse": {
            "type": "string",
            "description": "The HTTP Response Body received after alert delivery",
            "readOnly": true
          }
        }
      },
      "JSONObject": {
        "type": "object",
        "properties": {
          "empty": {
            "type": "boolean"
          }
        }
      },
      "AzureNetAppVolumesDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ]
      },
      "AzureVNGConnectionCollectorAttributeV3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "required": [
              "period"
            ],
            "type": "object",
            "properties": {
              "period": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "WebsiteCheckPoint": {
        "type": "object",
        "properties": {
          "geoInfo": {
            "type": "string",
            "description": "The geographical information (location) of the SiteMonitor Checkpoint",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "description": "The Id of the SiteMonitor Checkpoint",
            "format": "int32",
            "readOnly": true
          },
          "smgId": {
            "type": "integer",
            "description": "The sitemonitor group id",
            "format": "int32",
            "readOnly": true
          }
        }
      },
      "WindowsEventLogEventSource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EventSource"
          },
          {
            "type": "object"
          }
        ],
        "x-discriminator-value": "wineventlog"
      },
      "AzureCostManagementTagsDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "required": [
              "azureTagKeys"
            ],
            "type": "object",
            "properties": {
              "azureTagKeys": {
                "type": "string"
              }
            }
          }
        ]
      },
      "BasicAuthentication": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Authentication"
          },
          {
            "type": "object"
          }
        ],
        "x-discriminator-value": "basic"
      },
      "NetflowGroupWidgetData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WidgetData"
          },
          {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer",
                "format": "int32",
                "readOnly": true
              },
              "items": {
                "type": "array",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/NetflowDataBase"
                }
              }
            }
          }
        ],
        "x-discriminator-value": "groupnetflow"
      },
      "AzureReplicationJobCollectorAttributeV3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "required": [
              "period"
            ],
            "type": "object",
            "properties": {
              "period": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "AzureAppServiceEnvironmentMultiRolePoolCollectorAttributeV3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object",
            "properties": {
              "period": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "AzureAutomationAccountCertificateCollectorAttributeV3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "required": [
              "period"
            ],
            "type": "object",
            "properties": {
              "period": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "OpsNoteDeviceScope": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OpsNoteScope"
          },
          {
            "type": "object",
            "properties": {
              "fullPath": {
                "type": "string"
              },
              "groupId": {
                "type": "integer",
                "format": "int32"
              },
              "deviceId": {
                "type": "integer",
                "format": "int32"
              },
              "deviceName": {
                "type": "string"
              }
            }
          }
        ],
        "x-discriminator-value": "device"
      },
      "DeviceDataSourceInstanceAlertSettingPaginationResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeviceDataSourceInstanceAlertSetting"
            }
          }
        }
      },
      "RestAzureSubscriptionsDiscoverV3": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "secretKey": {
            "type": "string"
          },
          "groupId": {
            "type": "integer",
            "format": "int32"
          },
          "tenantId": {
            "type": "string"
          },
          "isChinaAccount": {
            "type": "boolean"
          }
        }
      },
      "StatsDGraphDisplay": {
        "type": "object",
        "properties": {
          "color": {
            "type": "string"
          },
          "legend": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "option": {
            "type": "string"
          }
        }
      },
      "DeviceBatchJobSDT": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SDT"
          },
          {
            "type": "object",
            "properties": {
              "deviceBatchJobId": {
                "type": "integer",
                "description": "The id of the device batchjob that the SDT will be associated with",
                "format": "int32"
              },
              "batchJobName": {
                "type": "string",
                "description": "The name of the batchjob that the SDT will apply to"
              },
              "deviceId": {
                "type": "integer",
                "description": "The id of the device associated with the batchjob that the SDT will apply to",
                "format": "int32"
              },
              "deviceDisplayName": {
                "type": "string",
                "description": "The display name of the device associated with the batchjob that the SDT will apply to"
              }
            }
          }
        ],
        "x-discriminator-value": "devicebatchjobsdt"
      },
      "DeviceGroupAlertThresholdInfo": {
        "type": "object",
        "properties": {
          "enableAnomalyAlertGeneration": {
            "type": "string",
            "description": "enable anomaly alert generation",
            "readOnly": true
          },
          "alertForNoData": {
            "type": "integer",
            "description": "The triggered alert level if we cannot collect data for this datapoint. The values can be 1-4 (1:no alert, 2:warn alert, 3:error alert, 4:critical alert)",
            "format": "int32"
          },
          "userPermission": {
            "type": "string",
            "readOnly": true
          },
          "enableAnomalyAlertSuppression": {
            "type": "string",
            "description": "enable anomaly alert suppression",
            "readOnly": true
          },
          "groupId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "alertClearTransitionInterval": {
            "type": "integer",
            "description": "The count that the alert must exist for this many poll cycles before the alert will be cleared",
            "format": "int32"
          },
          "alertEnabled": {
            "type": "boolean",
            "readOnly": true
          },
          "groupFullPath": {
            "type": "string",
            "readOnly": true
          },
          "alertExpr": {
            "type": "string",
            "readOnly": true
          },
          "alertTransitionInterval": {
            "type": "integer",
            "description": "The count that the alert must exist for this many poll cycles before it will be triggered",
            "format": "int32"
          }
        }
      },
      "AwsBillingReportCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object"
          }
        ],
        "x-discriminator-value": "awsbillingreport"
      },
      "SaasAirbrakeCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object"
          }
        ]
      },
      "AzureSubscriptionDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ],
        "x-discriminator-value": "ad_azuresubscription"
      },
      "ServiceAlert": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Widget"
          },
          {
            "required": [
              "deviceId"
            ],
            "type": "object",
            "properties": {
              "deviceId": {
                "type": "integer",
                "format": "int32"
              },
              "deviceDisplayName": {
                "type": "string",
                "readOnly": true
              }
            }
          }
        ]
      },
      "GraphPlot": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WidgetData"
          },
          {
            "type": "object",
            "properties": {
              "missinglines": {
                "type": "array",
                "description": "The Missing lines of the graph",
                "readOnly": true,
                "items": {
                  "type": "string"
                }
              },
              "timeScale": {
                "type": "string",
                "description": "The specified timescale for the graph",
                "readOnly": true
              },
              "instances": {
                "uniqueItems": true,
                "type": "array",
                "description": "The matched instances of graph",
                "readOnly": true,
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "timestamps": {
                "type": "array",
                "description": "The timestamps of the graph",
                "readOnly": true,
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "minValue": {
                "type": "object",
                "properties": {},
                "description": "Specifies the minimum value of the graph",
                "readOnly": true
              },
              "startTime": {
                "type": "integer",
                "description": "Specifies the start-time of the graph",
                "format": "int64",
                "readOnly": true
              },
              "id": {
                "type": "integer",
                "description": "The Id of the graph",
                "format": "int32",
                "readOnly": true
              },
              "rigid": {
                "type": "boolean",
                "description": "true | false\nSpecifies if the graph is rigid or not",
                "readOnly": true
              },
              "lines": {
                "type": "array",
                "description": "The properties of the graph and graph lines",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/GraphPlotLine"
                }
              },
              "height": {
                "type": "integer",
                "description": "Specifies the height of graph",
                "format": "int32",
                "readOnly": true
              },
              "endTZOffset": {
                "type": "integer",
                "description": "Specifies the end TimeZone Offset of the graph",
                "format": "int32",
                "readOnly": true
              },
              "base1024": {
                "type": "boolean",
                "description": "true | false\nChanges base scale from 1000 to 1024 if value is set to true",
                "readOnly": true
              },
              "dsName": {
                "type": "string",
                "description": "The name of the DataSource to be used to plot the graph",
                "readOnly": true
              },
              "maxValue": {
                "type": "object",
                "properties": {},
                "description": "Specifies the maximum value of the graph",
                "readOnly": true
              },
              "displayPrio": {
                "type": "integer",
                "description": "The display priority of the graph in your LogicMonitor portal",
                "format": "int32",
                "readOnly": true
              },
              "timeZoneId": {
                "type": "string",
                "description": "The Id of selected Time Zone",
                "readOnly": true
              },
              "timeZone": {
                "type": "string",
                "description": "The selected timezone for the graph",
                "readOnly": true
              },
              "startTZOffset": {
                "type": "integer",
                "description": "Specifies the start TimeZone Offset of the graph",
                "format": "int32",
                "readOnly": true
              },
              "xAxisName": {
                "type": "string",
                "description": "The label that will be displayed along the X axis",
                "readOnly": true
              },
              "width": {
                "type": "integer",
                "description": "Specifies the width of graph",
                "format": "int32",
                "readOnly": true
              },
              "name": {
                "type": "string",
                "description": "The Name of the Graph",
                "readOnly": true
              },
              "verticalLabel": {
                "type": "string",
                "description": "The label that will be displayed along the y axis (Vertical Label)",
                "readOnly": true
              },
              "step": {
                "type": "integer",
                "description": "The Step of the graph",
                "format": "int64",
                "readOnly": true
              },
              "endTime": {
                "type": "integer",
                "description": "Specifies the end-time of the graph",
                "format": "int64",
                "readOnly": true
              },
              "scopes": {
                "type": "array",
                "description": "Scopes: use this field to find match opsnote",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/GraphOpsNoteScope"
                }
              },
              "base": {
                "type": "integer",
                "description": "The Base of the graph",
                "format": "int64",
                "readOnly": true
              },
              "exportFileName": {
                "type": "string",
                "description": "The export file name",
                "readOnly": true
              }
            }
          }
        ],
        "x-discriminator-value": "graph"
      },
      "UnmonitoredDevicePaginationResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "searchId": {
            "type": "string",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UnmonitoredDevices"
            }
          }
        }
      },
      "AwsRdsPerformanceInsightsCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object",
            "properties": {
              "period": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "PieChartInfo": {
        "required": [
          "pieChartItems"
        ],
        "type": "object",
        "properties": {
          "maxSlicesCanBeShown": {
            "type": "integer",
            "description": "The maximum number of slices you'd like displayed in the pie chart",
            "format": "int32"
          },
          "virtualDataPoints": {
            "type": "array",
            "description": "The virtual datapoints added to the widget. Note that virtual datapoints must be included in the pieChartItems object to be displayed in the widget",
            "items": {
              "$ref": "#/components/schemas/VirtualDataPoint"
            }
          },
          "showLabelsAndLinesOnPC": {
            "type": "boolean",
            "description": "Whether or not labels and lines should be displayed on the pie chart"
          },
          "counters": {
            "type": "array",
            "description": "The counter is used for saving applyTo expression, it's mainly used for count device",
            "items": {
              "$ref": "#/components/schemas/Counter"
            }
          },
          "dataPoints": {
            "type": "array",
            "description": "The datapoints added to the widget. Note that datapoints must be included in the pieChartItems object to be displayed in the widget",
            "items": {
              "$ref": "#/components/schemas/PieChartDataPoint"
            }
          },
          "hideZeroPercentSlices": {
            "type": "boolean",
            "description": "Whether items at 0% should be hidden"
          },
          "groupRemainingAsOthers": {
            "type": "boolean",
            "description": "If the number of slices exceeds the maxSlicesCanBeShown, this value indicates whether the remaining slices should be grouped together"
          },
          "pieChartItems": {
            "type": "array",
            "description": "The datapoints and virtual datapoints that will be displayed in the pie chart",
            "items": {
              "$ref": "#/components/schemas/PieChartItem"
            }
          },
          "title": {
            "type": "string",
            "description": "The title that will be displayed above the pie chart"
          }
        }
      },
      "AwsRssEventSource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EventSource"
          },
          {
            "type": "object",
            "properties": {
              "schedule": {
                "type": "integer",
                "description": "The polling interval for the EventSource",
                "format": "int32"
              }
            }
          }
        ],
        "x-discriminator-value": "awsrss"
      },
      "DynamicColumn": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "isHidden": {
            "type": "boolean"
          }
        }
      },
      "StatsDGraph": {
        "type": "object",
        "properties": {
          "minValue": {
            "type": "number",
            "format": "double"
          },
          "maxValue": {
            "type": "number",
            "format": "double"
          },
          "namespace": {
            "type": "string"
          },
          "verticalLabel": {
            "type": "string"
          },
          "metrics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatsDMetricDefinition"
            }
          },
          "scaleUnit": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "BigNumberDataPoint": {
        "required": [
          "deviceDisplayName",
          "deviceGroupFullPath",
          "instanceName",
          "name"
        ],
        "type": "object",
        "properties": {
          "dataSourceId": {
            "type": "integer",
            "format": "int32"
          },
          "dataPointName": {
            "type": "string"
          },
          "dataPointId": {
            "type": "integer",
            "format": "int32"
          },
          "instanceName": {
            "type": "string"
          },
          "dataSourceFullName": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "aggregateFunction": {
            "type": "string"
          },
          "deviceGroupFullPath": {
            "type": "string"
          },
          "deviceDisplayName": {
            "type": "string"
          }
        }
      },
      "EchoEventSource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EventSource"
          },
          {
            "type": "object"
          }
        ],
        "x-discriminator-value": "echo"
      },
      "AlertForecastingReport": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReportBase"
          },
          {
            "required": [
              "confidenceLevel",
              "hostsValType",
              "metrics"
            ],
            "type": "object",
            "properties": {
              "sortedBy": {
                "type": "integer",
                "description": "The sort option for the alert forecast report",
                "format": "int32"
              },
              "confidenceLevel": {
                "type": "integer",
                "description": "The confidence level when do forecasting",
                "format": "int32"
              },
              "hostsValType": {
                "type": "string",
                "description": "The type of the resource selection. Acceptable values are: host, group"
              },
              "dateRange": {
                "type": "string",
                "description": "The Time Range configured for the report: Last 2 hours | Last 24 hours | Last calendar day | Last 7 days | Last 14 days | Last 30 days | Last calendar month | Last 365 days | Any custom date range in this format: YYYY-MM-dd hh:mm TO YYYY-MM-dd hh:mm"
              },
              "hostsVal": {
                "type": "string",
                "description": "The group or device name selected for the report"
              },
              "top10Only": {
                "type": "boolean",
                "description": "true | false\nfalse: CPU metrics will be displayed for all selected devices or groups\ntrue: CPU metrics will only be displayed for the top ten device or groups"
              },
              "columns": {
                "type": "array",
                "description": "The columns displayed in the report",
                "items": {
                  "$ref": "#/components/schemas/DynamicColumn"
                }
              },
              "metrics": {
                "type": "array",
                "description": "The datapoints that needs to do forecasting",
                "items": {
                  "$ref": "#/components/schemas/Metric"
                }
              },
              "algorithm": {
                "type": "string",
                "description": "Forecast method for the report. Acceptable values are: Linear, ARIMA"
              }
            }
          }
        ],
        "x-discriminator-value": "alert forecasting"
      },
      "AwsVpnTunnelDiscoveryMethodV3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ]
      },
      "AzureLogAnalyticsReplicationJobDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ]
      },
      "AckCollectorDown": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string",
            "example": "Collector Down Acknowledged"
          }
        }
      },
      "AzureRecoveryServiceRTODiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ]
      },
      "AzureRedisCacheDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ],
        "x-discriminator-value": "ad_azurerediscache"
      },
      "WidgetTokenInheritance": {
        "type": "object",
        "properties": {
          "fullpath": {
            "type": "string",
            "description": "The fullpath for the widget token",
            "readOnly": true
          },
          "value": {
            "type": "string",
            "description": "The property value for the group",
            "readOnly": true
          }
        }
      },
      "OpsNoteWebsiteGroupScope": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OpsNoteScope"
          },
          {
            "type": "object",
            "properties": {
              "fullPath": {
                "type": "string"
              },
              "groupId": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "x-discriminator-value": "websitegroup"
      },
      "CustomReport": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReportBase"
          },
          {
            "type": "object",
            "properties": {
              "macros": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Macro"
                }
              },
              "dateRange": {
                "type": "string"
              }
            }
          }
        ],
        "x-discriminator-value": "word template"
      },
      "WebsiteSLAWidgetData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WidgetData"
          },
          {
            "type": "object",
            "properties": {
              "availability": {
                "type": "number",
                "format": "double",
                "readOnly": true
              },
              "colorLevel": {
                "type": "integer",
                "format": "int32",
                "readOnly": true
              }
            }
          }
        ],
        "x-discriminator-value": "websitesla"
      },
      "SaasWebexCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "required": [
              "endpointUrlSuffix"
            ],
            "type": "object",
            "properties": {
              "endpointUrlSuffix": {
                "type": "string"
              },
              "period": {
                "type": "integer",
                "format": "int32"
              },
              "endpointUrlPrefix": {
                "type": "string"
              },
              "instanceColumnName": {
                "type": "string"
              }
            }
          }
        ]
      },
      "BigNumberData": {
        "required": [
          "useCommaSeparators"
        ],
        "type": "object",
        "properties": {
          "useCommaSeparators": {
            "type": "boolean"
          },
          "bottomLabel": {
            "type": "string",
            "readOnly": true
          },
          "errorMessage": {
            "type": "string",
            "readOnly": true
          },
          "rounding": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "position": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "value": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "rightLabel": {
            "type": "string",
            "readOnly": true
          },
          "colorLevel": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        }
      },
      "AzureVirtualDesktopSessionHostsCollectorAttributeV3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object",
            "properties": {
              "period": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "AzureBillingCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object"
          }
        ],
        "x-discriminator-value": "azurebilling"
      },
      "AzureLogAnalyticsWorkspacesDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "required": [
              "columnInstanceName",
              "query"
            ],
            "type": "object",
            "properties": {
              "query": {
                "type": "string"
              },
              "columnInstanceName": {
                "type": "string"
              }
            }
          }
        ]
      },
      "RestAzureAdvisorEventSource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EventSource"
          },
          {
            "type": "object",
            "properties": {
              "schedule": {
                "type": "integer",
                "description": "The polling interval for the EventSource",
                "format": "int32"
              }
            }
          }
        ]
      },
      "Dashboard": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "This field will be empty unless the dashboard is a private dashboard, in which case the owner will be listed"
          },
          "template": {
            "type": "object",
            "properties": {},
            "description": "The template which is used for importing dashboard"
          },
          "userPermission": {
            "type": "string",
            "description": "The permission of the user that made the API call",
            "readOnly": true
          },
          "groupId": {
            "type": "integer",
            "description": "The id of the group the dashboard belongs to",
            "format": "int32"
          },
          "fullName": {
            "type": "string",
            "description": "Full name of the dashboard, including group path",
            "readOnly": true,
            "example": "a new group//Collector Health/"
          },
          "description": {
            "type": "string",
            "description": "The description of the dashboard",
            "example": "Windows Servers Performance"
          },
          "sharable": {
            "type": "boolean",
            "description": "Whether or not the dashboard is sharable. This value will always be true unless the dashboard is a private dashboard",
            "example": true
          },
          "widgetsConfig": {
            "type": "object",
            "properties": {},
            "description": "Information about widget configuration used by the UI"
          },
          "groupName": {
            "type": "string",
            "description": "The name of group where created dashboard will reside",
            "example": "Server Dashboard"
          },
          "widgetTokens": {
            "type": "array",
            "description": "If useDynamicWidget=true, this field must at least contain tokens defaultDeviceGroup and defaultServiceGroup",
            "example": "[{\"name\":\"defaultDeviceGroup\",\"value\":\"*\"},{\"name\":\"defaultServiceGroup\",\"value\":\"*\"}]",
            "items": {
              "$ref": "#/components/schemas/WidgetToken"
            }
          },
          "name": {
            "type": "string",
            "description": "The name of the dashboard",
            "example": "Default Device Group"
          },
          "overwriteGroupFields": {
            "type": "boolean",
            "description": "Overwrite existing Resource/Website Group fields with ##defaultResourceGroup## and/or ##defaultWebsiteGroup## tokens. This value of this attribute is only considered while updating the Dashboard configuration. While creating the new Dashboard, this value will always be considered as false irrespective of the passed value.",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "description": "The Id of the dashboard",
            "format": "int32",
            "readOnly": true
          },
          "groupFullPath": {
            "type": "string",
            "description": "The full path (excluding root group) of the group the dashboard belongs to",
            "readOnly": true
          }
        }
      },
      "GcpBillingCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object"
          }
        ]
      },
      "TableWidgetData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WidgetData"
          },
          {
            "type": "object",
            "properties": {
              "columnHeaders": {
                "type": "array",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/ColumnHeader"
                }
              },
              "rows": {
                "type": "array",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/RowData"
                }
              }
            }
          }
        ],
        "x-discriminator-value": "table"
      },
      "PortAutoDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "required": [
              "ports"
            ],
            "type": "object",
            "properties": {
              "ports": {
                "type": "string"
              },
              "timeout": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "x-discriminator-value": "ad_port"
      },
      "AwsEC2ScheduledEventsCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object",
            "properties": {
              "period": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "x-discriminator-value": "awsec2scheduledevents"
      },
      "DeviceSLAWidgetData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WidgetData"
          },
          {
            "type": "object",
            "properties": {
              "resultList": {
                "type": "array",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/ResultItem"
                }
              }
            }
          }
        ],
        "x-discriminator-value": "devicesla"
      },
      "PingCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object",
            "properties": {
              "ip": {
                "type": "string"
              },
              "sendPkts": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "x-discriminator-value": "ping"
      },
      "Ec2Netscan": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Netscan"
          },
          {
            "required": [
              "accessibility",
              "credentials"
            ],
            "type": "object",
            "properties": {
              "ddr": {
                "$ref": "#/components/schemas/Ec2DDR"
              },
              "credentials": {
                "$ref": "#/components/schemas/EC2NetscanPolicyCredential"
              },
              "accessibility": {
                "type": "string",
                "description": "Which IP the EC2 instance should be monitored with for nec2 scans: private or public",
                "example": "private"
              },
              "deadOperation": {
                "type": "string",
                "description": "How dead EC2 instances should be handled for nec2 scans. Must be Manually",
                "example": "MANUALLY"
              },
              "ports": {
                "$ref": "#/components/schemas/RestNetscanPorts"
              }
            }
          }
        ],
        "x-discriminator-value": "nec2"
      },
      "TextWidget": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Widget"
          },
          {
            "required": [
              "content"
            ],
            "type": "object",
            "properties": {
              "content": {
                "type": "string",
                "description": "The html content that the text widget should display"
              }
            }
          }
        ],
        "x-discriminator-value": "text"
      },
      "AzureVMServiceLimitsCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object",
            "properties": {
              "period": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "x-discriminator-value": "azurevmservicelimits"
      },
      "AwsGlobalNetworkEdgeMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ]
      },
      "WebsiteOverviewWidget": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Widget"
          },
          {
            "required": [
              "graph"
            ],
            "type": "object",
            "properties": {
              "websiteName": {
                "type": "string",
                "readOnly": true
              },
              "websiteId": {
                "type": "integer",
                "format": "int32"
              },
              "geoInfo": {
                "type": "string",
                "readOnly": true
              },
              "graph": {
                "type": "string"
              }
            }
          }
        ],
        "x-discriminator-value": "websiteoverview"
      },
      "GoogleMapWidgetData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WidgetData"
          },
          {
            "type": "object",
            "properties": {
              "items": {
                "type": "array",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/MapItemInfo"
                }
              }
            }
          }
        ],
        "x-discriminator-value": "gmap"
      },
      "AwsGlobalWebACLDiscoveryMethodV3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ]
      },
      "ApiTokenPaginationResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "searchId": {
            "type": "string",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/APIToken"
            }
          }
        }
      },
      "ResourceGroupSDT": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SDT"
          },
          {
            "type": "object",
            "properties": {
              "dataSourceId": {
                "type": "integer",
                "description": "The id of the datasource that this SDT will be associated with, for the specified group. dataSourceId 0 indicates all datasources",
                "format": "int32"
              },
              "deviceGroupId": {
                "type": "integer",
                "description": "The id of the device group that the SDT will be associated with",
                "format": "int32"
              },
              "dataSourceName": {
                "type": "string",
                "description": "The name of the datasource that this SDT will be associated with, for the specified group. dataSourceName \"All\" indicates all datasources"
              },
              "deviceGroupFullPath": {
                "type": "string",
                "description": "The full path of the device group that this SDT will be associated with"
              }
            }
          }
        ],
        "x-discriminator-value": "resourcegroupsdt"
      },
      "RestAzureStorageAccountVerify": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "secretKey": {
            "type": "string"
          },
          "chinaAccount": {
            "type": "boolean"
          },
          "tenantId": {
            "type": "string"
          },
          "storageAccountName": {
            "type": "string"
          },
          "storageAccountContainerName": {
            "type": "string"
          },
          "isChinaAccount": {
            "type": "boolean"
          }
        }
      },
      "DeviceDataSourceAssociated": {
        "type": "object",
        "properties": {
          "instance": {
            "type": "array",
            "description": "The instance list associated to the datasource",
            "items": {
              "$ref": "#/components/schemas/DeviceDataSourceAssociatedInstance"
            }
          },
          "displayName": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "hasMore": {
            "type": "integer",
            "description": "Whether has more instance. 0 no more, 1 has more",
            "format": "int32",
            "readOnly": true
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "hasActiveInstance": {
            "type": "boolean",
            "description": "Whether has active instance.",
            "readOnly": true
          }
        }
      },
      "AzureActiveDirectorySyncCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object"
          }
        ]
      },
      "AzureCostManagementDimensionsDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "required": [
              "azureCostManagementType"
            ],
            "type": "object",
            "properties": {
              "azureCostManagementType": {
                "type": "string"
              }
            }
          }
        ]
      },
      "ScriptERIDiscoveryAttributeV3": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "winScript": {
            "type": "string",
            "description": "The Windows script"
          },
          "groovyScript": {
            "type": "string",
            "description": "The Groovy script"
          },
          "name": {
            "type": "string",
            "description": "ERI detection name"
          },
          "type": {
            "type": "string",
            "description": "The script type"
          },
          "linuxCmdline": {
            "type": "string",
            "description": "The Linux script command line"
          },
          "linuxScript": {
            "type": "string",
            "description": "The Linux script file"
          },
          "winCmdline": {
            "type": "string",
            "description": "The Windows script command line"
          }
        }
      },
      "OverviewGraphDataPoint": {
        "type": "object",
        "properties": {
          "aggregateMethod": {
            "type": "string",
            "description": "The graph line data point aggregate method.\nThe values can be average|min|max|sum"
          },
          "dataPointName": {
            "type": "string",
            "description": "The graph line data point name"
          },
          "dataPointId": {
            "type": "integer",
            "description": "The graph line data point Id",
            "format": "int32"
          },
          "consolidateFunc": {
            "type": "integer",
            "description": "The graph line data point consolidate function.\nThe values can be 1|2|3\nwhere,\n      1=avg, 2=max, 3=min",
            "format": "int32"
          },
          "dataSourceDataPointId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AzureNetworkServiceLimitsCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object",
            "properties": {
              "period": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "x-discriminator-value": "azurenetworkservicelimits"
      },
      "NetflowWidgetData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WidgetData"
          },
          {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer",
                "format": "int32",
                "readOnly": true
              },
              "items": {
                "type": "array",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/NetflowDataBase"
                }
              }
            }
          }
        ],
        "x-discriminator-value": "netflow"
      },
      "DeviceDataSourceInstance": {
        "required": [
          "displayName",
          "wildValue"
        ],
        "type": "object",
        "properties": {
          "isUNCInstance": {
            "type": "boolean",
            "description": "Whether or not UNC Monitoring enabled for device",
            "example": true
          },
          "stopMonitoring": {
            "type": "boolean",
            "description": "Whether or not monitoring is disabled for the instance",
            "example": true
          },
          "deviceDataSourceId": {
            "type": "integer",
            "description": "The id of the unique device-datasource the instance is associated with",
            "format": "int32",
            "readOnly": true
          },
          "displayName": {
            "type": "string",
            "description": "The instance alias. This is the descriptive name of the instance, and should be unique for the device/datasource combination",
            "example": "Ping"
          },
          "wildValue2": {
            "type": "string",
            "description": "Only used for two dimensional active discovery. When used, during Active Discovery runs, the token ##WILDVALUE## is replaces with the value of ALIAS and the token ##WILDVALUE2## is replaced with the value of the second part alias. This value must be unique for the device/datasource/WILDVALUE combination",
            "example": "1"
          },
          "groupId": {
            "type": "integer",
            "description": "The id of the instance group associated with the datasource instance",
            "format": "int32"
          },
          "description": {
            "type": "string",
            "description": "The description of the datasource instance",
            "example": "Ping Test"
          },
          "collectorId": {
            "type": "integer",
            "description": "The id of the collector the datasource instance is associated with",
            "format": "int32",
            "readOnly": true
          },
          "disableAlerting": {
            "type": "boolean",
            "description": "Whether or not alerting is disabled for the instance",
            "example": true
          },
          "deviceId": {
            "type": "integer",
            "description": "The id of the device the datasource instance is associated with",
            "format": "int32",
            "readOnly": true
          },
          "deviceDisplayName": {
            "type": "string",
            "description": "The display name of the device the datasource instance is associated with",
            "readOnly": true
          },
          "systemProperties": {
            "type": "array",
            "description": "Any instance level system properties assigned to the instance",
            "items": {
              "$ref": "#/components/schemas/NameAndValue"
            }
          },
          "autoProperties": {
            "type": "array",
            "description": "Any instance level auto properties assigned to the instance",
            "items": {
              "$ref": "#/components/schemas/NameAndValue"
            }
          },
          "dataSourceId": {
            "type": "integer",
            "description": "The id of the datasource definition that the instance represents",
            "format": "int32",
            "readOnly": true
          },
          "groupName": {
            "type": "string",
            "description": "The name of the instance group associated with the datasource instance",
            "readOnly": true
          },
          "customProperties": {
            "type": "array",
            "description": "Any instance level properties assigned to the instance",
            "items": {
              "$ref": "#/components/schemas/NameAndValue"
            }
          },
          "lockDescription": {
            "type": "boolean",
            "description": "Whether or not Active Discovery is enabled, and thus whether or not the instance description is editable",
            "example": true
          },
          "name": {
            "type": "string",
            "description": "The name of the datasource instance, in the format of: datasourceName-instanceAlias",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "description": "The Id of the datasource instance",
            "format": "int32",
            "readOnly": true
          },
          "wildValue": {
            "type": "string",
            "description": "The variable part of the instance, used to query data from a device. For example, variable part of the SNMP OID tree. This value must be unique for the device/datasource combination, unless two-dimensional active discovery is used",
            "example": "1"
          },
          "dataSourceType": {
            "type": "string",
            "description": "The type of LogicModule, e.g. DS (datasource)",
            "readOnly": true
          }
        }
      },
      "IPMIAutoDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object",
            "properties": {
              "method": {
                "type": "string"
              }
            }
          }
        ],
        "x-discriminator-value": "ad_ipmi"
      },
      "SaasZoomRoomDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "required": [
              "zoomRoomIssueType"
            ],
            "type": "object",
            "properties": {
              "zoomRoomIssueType": {
                "type": "string"
              }
            }
          }
        ]
      },
      "PieChartWidgetData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WidgetData"
          },
          {
            "type": "object",
            "properties": {
              "maxSlicesCanBeShown": {
                "type": "integer",
                "format": "int32",
                "readOnly": true
              },
              "data": {
                "type": "array",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/PieChartData"
                }
              },
              "hideZeroPercentSlices": {
                "type": "boolean"
              },
              "groupRemainingAsOthers": {
                "type": "boolean",
                "readOnly": true
              }
            }
          }
        ],
        "x-discriminator-value": "piechart"
      },
      "ReportPaginationResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "searchId": {
            "type": "string",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportBase"
            }
          }
        }
      },
      "EventSource": {
        "required": [
          "alertEffectiveIval",
          "name"
        ],
        "type": "object",
        "properties": {
          "suppressDuplicatesES": {
            "type": "boolean",
            "description": "Whether or not duplicate alerts have to be suppressed"
          },
          "alertSubjectTemplate": {
            "type": "string",
            "description": "The alert message subject for the EventSource"
          },
          "alertLevel": {
            "type": "string",
            "description": "The default alert level. The values can be warn | error | critical | doMapping"
          },
          "description": {
            "type": "string",
            "description": "The description for the LMModule"
          },
          "appliesTo": {
            "type": "string",
            "description": "The Applies To for the LMModule"
          },
          "technology": {
            "type": "string",
            "description": "The Technical Notes for the LMModule"
          },
          "filters": {
            "type": "array",
            "description": "The filters for the EventSource",
            "items": {
              "$ref": "#/components/schemas/RestEventSourceFilter"
            }
          },
          "version": {
            "type": "integer",
            "description": "The epoch time of the last update to the EventSource",
            "format": "int64",
            "readOnly": true
          },
          "lineageId": {
            "type": "string",
            "description": "The lineageId the LMModule belongs to",
            "readOnly": true
          },
          "collector": {
            "type": "string",
            "description": "The EventSource collector type. The values can be wineventlog | syslog | snmptrap | echo | logfile | scriptevent | awsrss | azurerss | azureadvisor | gcpatom | awsrdspievent | azureresourcehealthevent | azureemergingissue | azureloganalyticsworkspacesevent | awstrustedadvisor | awshealth | awsorganizationalhealth | ipmievent"
          },
          "tags": {
            "type": "string",
            "description": "The Tags for the LMModule"
          },
          "auditVersion": {
            "type": "integer",
            "description": "The auditVersion of the EventSource",
            "format": "int64",
            "readOnly": true
          },
          "installationMetadata": {
            "$ref": "#/components/schemas/IntegrationMetadata"
          },
          "alertBodyTemplate": {
            "type": "string",
            "description": "The alert message body for the EventSource"
          },
          "checksum": {
            "type": "string",
            "description": "The metadata checksum for the LMModule content",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "The name of the EventSource"
          },
          "clearAfterAck": {
            "type": "boolean",
            "description": "Whether or not the alert should clear after acknowledgement"
          },
          "id": {
            "type": "integer",
            "description": "The ID of the LMModule",
            "format": "int32",
            "readOnly": true
          },
          "alertEffectiveIval": {
            "type": "integer",
            "description": "The time in minutes after which the alert should clear",
            "format": "int32"
          },
          "group": {
            "type": "string",
            "description": "The group the LMModule is in"
          }
        },
        "discriminator": {
          "propertyName": "collector"
        }
      },
      "AzureSubscriptionIdPaginationResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "searchId": {
            "type": "string",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RestAzureSubscriptionV3"
            }
          }
        }
      },
      "GcpBillingDiscoveryMethodV3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "required": [
              "gcpBillingType"
            ],
            "type": "object",
            "properties": {
              "gcpBillingType": {
                "type": "string"
              }
            }
          }
        ]
      },
      "SiteMonitorCheckpoint": {
        "required": [
          "description"
        ],
        "type": "object",
        "properties": {
          "geoInfo": {
            "type": "string",
            "description": "The geographical information (location) of the SiteMonitor Checkpoint",
            "readOnly": true
          },
          "displayPrio": {
            "type": "integer",
            "description": "The display priority of the SiteMonitor Checkpoint in your LogicMonitor portal",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "The SiteMonitor checkPoint name",
            "readOnly": true
          },
          "isEnabledInRoot": {
            "type": "boolean",
            "description": "Checks if sitemonitor enabled in root service group",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "Check point description"
          },
          "id": {
            "type": "integer",
            "description": "The Id of the SiteMonitor Checkpoint",
            "format": "int32",
            "readOnly": true
          }
        }
      },
      "DatasourcePaginationResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "searchId": {
            "type": "string",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataSource"
            }
          }
        }
      },
      "AzureAutomationAccountCertificateDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ]
      },
      "DynamicTableWidgetColumn": {
        "required": [
          "columnName",
          "dataPointId"
        ],
        "type": "object",
        "properties": {
          "rpn": {
            "type": "string",
            "description": "The expression in this field will be performed on the datapoint. The Column name should be referenced as the datapoint"
          },
          "dataPointName": {
            "type": "string",
            "description": "The name of the datapoint",
            "readOnly": true
          },
          "displayType": {
            "type": "string",
            "description": "The display type, it includes three options: raw|percent|colorBar"
          },
          "minValue": {
            "type": "number",
            "description": "The minimum value of the table widget",
            "format": "double"
          },
          "dataPointId": {
            "type": "integer",
            "description": "The id of the datapoint",
            "format": "int32"
          },
          "unitLabel": {
            "type": "string",
            "description": "The unit label"
          },
          "maxValue": {
            "type": "number",
            "description": "The maximum value of the table widget",
            "format": "double"
          },
          "colorThresholds": {
            "type": "array",
            "description": "The threshold of color changes",
            "items": {
              "$ref": "#/components/schemas/ColorThreshold"
            }
          },
          "columnName": {
            "type": "string",
            "description": "The name for the column"
          },
          "enableForecast": {
            "type": "boolean",
            "description": "Whether or not forecasting is enabled"
          },
          "roundingDecimal": {
            "type": "integer",
            "description": "The number of decimal points to round the value to. Options are 0, 1 and 2",
            "format": "int32"
          }
        }
      },
      "AwsEC2ReservedInstanceCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object",
            "properties": {
              "period": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "x-discriminator-value": "awsec2reservedinstance"
      },
      "GraphPlotLine": {
        "type": "object",
        "properties": {
          "colorName": {
            "type": "string",
            "description": "The color name",
            "readOnly": true
          },
          "std": {
            "type": "object",
            "properties": {},
            "description": "The standard deviation value",
            "readOnly": true
          },
          "visible": {
            "type": "boolean",
            "description": "true | false\nSpecifies whether the graph will be visible or not",
            "readOnly": true
          },
          "color": {
            "type": "string",
            "description": "The color of the graph",
            "readOnly": true
          },
          "data": {
            "type": "array",
            "description": "The polled data used to plot the graph",
            "readOnly": true,
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "max": {
            "type": "object",
            "properties": {},
            "description": "The max value of datapoint or instance",
            "readOnly": true
          },
          "legend": {
            "type": "string",
            "description": "The legend of the datapoint or instance",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "The description for the datapoint or instance",
            "readOnly": true
          },
          "label": {
            "type": "string",
            "description": "The label for the datapoint or instance",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "description": "Specifies how the data of the datapoint or instance will be plotted\nThe values can be line | area | stack | column | statusBar",
            "readOnly": true
          },
          "min": {
            "type": "object",
            "properties": {},
            "description": "The min value of the datapoint or instance",
            "readOnly": true
          },
          "avg": {
            "type": "object",
            "properties": {},
            "description": "The average value of the datapoint or instance",
            "readOnly": true
          },
          "decimal": {
            "type": "integer",
            "description": "The decimal value\nThe values can be -1 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8",
            "format": "int32",
            "readOnly": true
          },
          "useYMax": {
            "type": "boolean",
            "description": "true | false\nSpecifies whether to use YMax or not",
            "readOnly": true
          }
        }
      },
      "DeviceDatasourceInstanceGroupPaginationResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "searchId": {
            "type": "string",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeviceDataSourceInstanceGroup"
            }
          }
        }
      },
      "HostMetricsReport": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReportBase"
          },
          {
            "required": [
              "hostsValType",
              "isBase1024",
              "metrics",
              "rowFormat",
              "sortedBy",
              "top10Only"
            ],
            "type": "object",
            "properties": {
              "sortedBy": {
                "type": "string",
                "description": "host | instance | metric\nhost: Information displayed in the report will be sorted by device\ninstance: Information displayed in the report will be sorted by instance\nmetric: Information displayed in the report will be sorted by datapoint (metric)"
              },
              "hostsValType": {
                "type": "string",
                "description": "host | group. The type of entities specified in the hostsVal field"
              },
              "dateRange": {
                "type": "string",
                "description": "The Time Range configured for the report: Last 2 hours | Last 24 hours | Last calendar day | Last 7 days | Last 14 days | Last 30 days | Last calendar month | Last 365 days | Any custom date range in this format: YYYY-MM-dd hh:mm TO YYYY-MM-dd hh:mm"
              },
              "hostsVal": {
                "type": "string",
                "description": "The name of the devices OR groups selected for the report, where multiple entities are separated by commas. Glob expressions are supported"
              },
              "top10Only": {
                "type": "boolean",
                "description": "true | false\nfalse: Metrics will be displayed for all selected devices or groups\ntrue: Metrics will only be displayed for the top ten device or groups"
              },
              "columns": {
                "type": "array",
                "description": "The columns that will be displayed in the report. You should specify the columns in the order in which you'd like them to be displayed. All column names need to be included in this object, but each column should have an associated isHidden field that indicates whether it is displayed or not",
                "items": {
                  "$ref": "#/components/schemas/DynamicColumn"
                }
              },
              "isBase1024": {
                "type": "boolean",
                "description": "true | false\nfalse: Scale the number using using default 1000 \ntrue: Scale the number using 1024"
              },
              "rowFormat": {
                "type": "integer",
                "description": "0 | 1 | 2 | 3\n0: Text only - metrics will be displayed in a tabular format.\n1: One graph per device - metrics will be displayed in a tabular format and one graph will be displayed per device.\n2: One graph per instance - metrics will be displayed in a tabular format and one graph will be displayed per instance.\n3: One graph per datapoint - metrics will be displayed in a tabular format and one graph will be displayed per datapoint.",
                "format": "int32"
              },
              "metrics": {
                "type": "array",
                "description": "The datapoint or calculation on a datapoint that will be included in the report, where each datapoint/calculation is specified by three fields: dataSourceId, instances (glob is okay) and metric (no glob)",
                "items": {
                  "$ref": "#/components/schemas/Metric"
                }
              }
            }
          }
        ],
        "x-discriminator-value": "host metric trends"
      },
      "SaasOffice365SkusCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "required": [
              "period"
            ],
            "type": "object",
            "properties": {
              "period": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "WebsiteSDTHistoryPaginationResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "searchId": {
            "type": "string",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SDTHistory"
            }
          }
        }
      },
      "TableWidget": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Widget"
          },
          {
            "required": [
              "columns",
              "rows"
            ],
            "type": "object",
            "properties": {
              "columns": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TableWidgetColumn"
                }
              },
              "forecast": {
                "$ref": "#/components/schemas/TableWidgetForecastConfiguration"
              },
              "rows": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TableWidgetRow"
                }
              }
            }
          }
        ],
        "x-discriminator-value": "table"
      },
      "NMapNetscan": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Netscan"
          },
          {
            "required": [
              "includeNetworkAndBroadcast",
              "subnet"
            ],
            "type": "object",
            "properties": {
              "includeNetworkAndBroadcast": {
                "type": "boolean",
                "description": "Include Network & Broadcast Address for CIDR based netscan",
                "example": false
              },
              "subnet": {
                "type": "string",
                "description": "The subnet to scan for nmap scans",
                "example": "10.35.41.1-10.35.41.254"
              },
              "ddr": {
                "$ref": "#/components/schemas/NMapDDR"
              },
              "credentials": {
                "$ref": "#/components/schemas/RestNMapNetscanPolicyCredential"
              },
              "exclude": {
                "type": "string",
                "description": "The subnet to exclude from scanning from nmap scans",
                "example": "10.35.41.1-10.35.41.254"
              },
              "ports": {
                "$ref": "#/components/schemas/RestNetscanPorts"
              }
            }
          }
        ],
        "x-discriminator-value": "nmap"
      },
      "WebsiteItemConfig": {
        "required": [
          "website",
          "websiteGroup"
        ],
        "type": "object",
        "properties": {
          "website": {
            "type": "string"
          },
          "excludeSDT": {
            "type": "boolean"
          },
          "websiteGroup": {
            "type": "string"
          }
        }
      },
      "DataSourceOverviewGraph": {
        "type": "object",
        "properties": {
          "base1024": {
            "type": "boolean",
            "description": "base1024 graph or not"
          },
          "timeScale": {
            "type": "string",
            "description": "The graph time scale. \nThe values can be 1hour|2hour|5hour|day|yesterday|week|lastweek|month|3month|year"
          },
          "maxValue": {
            "type": "object",
            "properties": {},
            "description": "The graph max value"
          },
          "displayPrio": {
            "type": "integer",
            "description": "The graph display priority",
            "format": "int32"
          },
          "aggregated": {
            "type": "boolean",
            "description": "Whether the overview graph is aggregated",
            "readOnly": true
          },
          "title": {
            "type": "string",
            "description": "The graph title"
          },
          "virtualDataPoints": {
            "type": "array",
            "description": "The virtual data point list",
            "items": {
              "$ref": "#/components/schemas/GraphVirtualDataPoint"
            }
          },
          "minValue": {
            "type": "object",
            "properties": {},
            "description": "The graph min value"
          },
          "name": {
            "type": "string",
            "description": "The graph name"
          },
          "width": {
            "type": "integer",
            "description": "The graph width",
            "format": "int32"
          },
          "dataPoints": {
            "type": "array",
            "description": "The graph data point list",
            "items": {
              "$ref": "#/components/schemas/OverviewGraphDataPoint"
            }
          },
          "verticalLabel": {
            "type": "string",
            "description": "The graph vertical label"
          },
          "id": {
            "type": "integer",
            "description": "The graph Id",
            "format": "int32"
          },
          "rigid": {
            "type": "boolean",
            "description": "The rigid. The values can be true|false"
          },
          "lines": {
            "type": "array",
            "description": "The graph lines",
            "items": {
              "$ref": "#/components/schemas/GraphLine"
            }
          },
          "height": {
            "type": "integer",
            "description": "The graph height",
            "format": "int32"
          }
        }
      },
      "TableWidgetDataPoint": {
        "required": [
          "dataPointId",
          "dataSourceId"
        ],
        "type": "object",
        "properties": {
          "dataSourceId": {
            "type": "integer",
            "format": "int32"
          },
          "dataPointName": {
            "type": "string"
          },
          "dataPointId": {
            "type": "integer",
            "format": "int32"
          },
          "dataSourceFullName": {
            "type": "string"
          },
          "isMultiple": {
            "type": "boolean"
          }
        }
      },
      "RestDeviceInstanceGroupAlertConfigV3": {
        "type": "object",
        "properties": {
          "alertForNoData": {
            "type": "integer",
            "description": "The triggered alert level if we cannot collect data for this datapoint. The values can be 1-4 (1:no alert, 2:warn alert, 3:error alert, 4:critical alert)",
            "format": "int32"
          },
          "enableAnomalyAlertSuppression": {
            "type": "string"
          },
          "globalAlertForNoData": {
            "type": "integer",
            "description": "The triggered alert level if we cannot collect data for this datapoint. The values can be 1-4 (1:no alert, 2:warn alert, 3:error alert, 4:critical alert)",
            "format": "int32",
            "readOnly": true
          },
          "alertEnable": {
            "type": "boolean"
          },
          "criticalAdAdvSetting": {
            "type": "string"
          },
          "alertClearTransitionInterval": {
            "type": "integer",
            "description": "The count that the alert must exist for this many poll cycles before the alert will be cleared (0-60)",
            "format": "int32"
          },
          "globalAlertTransitionInterval": {
            "type": "integer",
            "description": "The count that the alert must exist for this many poll cycles before it will be triggered",
            "format": "int32",
            "readOnly": true
          },
          "alertExprNote": {
            "type": "string"
          },
          "adAdvSettingEnabled": {
            "type": "boolean"
          },
          "errorAdAdvSetting": {
            "type": "string"
          },
          "warnAdAdvSetting": {
            "type": "string"
          },
          "globalAlertClearTransitionInterval": {
            "type": "integer",
            "description": "The count that the alert must exist for this many poll cycles before the alert will be cleared",
            "format": "int32",
            "readOnly": true
          },
          "alertExpr": {
            "type": "string"
          },
          "alertTransitionInterval": {
            "type": "integer",
            "description": "The count that the alert must exist for this many poll cycles before it will be triggered (0-60)",
            "format": "int32"
          }
        }
      },
      "JMXCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object",
            "properties": {
              "queryUrl": {
                "type": "string"
              },
              "ip": {
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "x-discriminator-value": "jmx"
      },
      "AwsEc2ServiceLimitsCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object",
            "properties": {
              "period": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "x-discriminator-value": "awsec2servicelimits"
      },
      "SaasStatusCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object"
          }
        ]
      },
      "WMICollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object",
            "properties": {
              "methodInputs": {
                "type": "string"
              },
              "ip": {
                "type": "string",
                "readOnly": true
              },
              "namespace": {
                "type": "string"
              },
              "methodName": {
                "type": "string"
              },
              "targetPath": {
                "type": "string"
              },
              "queryClass": {
                "type": "string"
              },
              "queryIndex": {
                "type": "string"
              },
              "queryValue": {
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            }
          }
        ],
        "x-discriminator-value": "wmi"
      },
      "InterfacesFilter": {
        "type": "object",
        "properties": {
          "interfaceTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InterfaceType"
            }
          },
          "deviceId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "OpsNoteScope": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "device"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "NetflowApplication": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NetflowDataBase"
          },
          {
            "type": "object",
            "properties": {
              "firstEpochInSec": {
                "type": "integer",
                "description": "the fist time(sec) this application send or receive package",
                "format": "int64",
                "readOnly": true
              },
              "protocol": {
                "type": "string",
                "description": "the protocol that the application runs on",
                "readOnly": true
              },
              "sourceMBytes": {
                "type": "number",
                "description": "the bytes that application send",
                "format": "double",
                "readOnly": true
              },
              "percentUsage": {
                "type": "number",
                "description": "the percent traffic of the application",
                "format": "double",
                "readOnly": true
              },
              "port": {
                "type": "integer",
                "description": "the port that the application runs on",
                "format": "int32",
                "readOnly": true
              },
              "lastEpochInSec": {
                "type": "integer",
                "description": "the last time(sec) this application send or receive package",
                "format": "int64",
                "readOnly": true
              },
              "destinationMBytes": {
                "type": "number",
                "description": "the bytes that application received",
                "format": "double",
                "readOnly": true
              },
              "IP": {
                "type": "string",
                "description": "the ip of the host that the application runs on",
                "readOnly": true
              },
              "usage": {
                "type": "number",
                "description": "the total traffic of the application",
                "format": "double",
                "readOnly": true
              },
              "dns": {
                "type": "string",
                "description": "the dns name of the host that the application runs on",
                "readOnly": true
              },
              "flowCount": {
                "type": "integer",
                "description": "the flow count that associated to this application",
                "format": "int64",
                "readOnly": true
              },
              "clientCount": {
                "type": "integer",
                "description": "the count fo client that communicate with this application",
                "format": "int32",
                "readOnly": true
              }
            }
          }
        ],
        "x-discriminator-value": "application"
      },
      "DataPumpCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object"
          }
        ],
        "x-discriminator-value": "datapump"
      },
      "HttpAutoDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "required": [
              "caseSensitive",
              "followRedirect",
              "ports",
              "regex",
              "uri",
              "useSSL"
            ],
            "type": "object",
            "properties": {
              "regex": {
                "type": "string"
              },
              "caseSensitive": {
                "type": "boolean"
              },
              "followRedirect": {
                "type": "boolean"
              },
              "ports": {
                "type": "string"
              },
              "uri": {
                "type": "string"
              },
              "useSSL": {
                "type": "boolean"
              }
            }
          }
        ],
        "x-discriminator-value": "ad_http"
      },
      "PushModulesCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object"
          }
        ]
      },
      "DaysUntilAlert": {
        "type": "object",
        "properties": {
          "severity": {
            "type": "string"
          },
          "forecastDay": {
            "type": "integer",
            "format": "int32"
          },
          "forecastPeriodInDays": {
            "type": "integer",
            "format": "int32"
          },
          "isWaitingForecastResults": {
            "type": "boolean"
          }
        }
      },
      "BatchJobExecutionItem": {
        "type": "object",
        "properties": {
          "startedOnLocal": {
            "type": "string",
            "readOnly": true
          },
          "finishedOnLocal": {
            "type": "string",
            "readOnly": true
          },
          "userData": {
            "type": "string",
            "readOnly": true
          },
          "stdout": {
            "type": "string",
            "readOnly": true
          },
          "bjName": {
            "type": "string",
            "readOnly": true
          },
          "alertLevel": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "deviceBatchJobId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "stderr": {
            "type": "string",
            "readOnly": true
          },
          "deviceDisplayName": {
            "type": "string",
            "readOnly": true
          },
          "cmdline": {
            "type": "string",
            "readOnly": true
          },
          "exitCode": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "executionNo": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "finishedOn": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "startedOn": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          }
        }
      },
      "ReportGroup": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "matchedReportCount": {
            "type": "integer",
            "description": "The matched reports count of this group",
            "format": "int32",
            "readOnly": true
          },
          "userPermission": {
            "type": "string",
            "description": "The user permission on the report group",
            "readOnly": true,
            "example": "read"
          },
          "name": {
            "type": "string",
            "description": "The report group name",
            "example": "Firewall Reports"
          },
          "description": {
            "type": "string",
            "description": "The report group description",
            "example": "This is daily firewall report"
          },
          "id": {
            "type": "integer",
            "description": "The report group id",
            "format": "int32",
            "readOnly": true
          },
          "reportsCount": {
            "type": "integer",
            "description": "The reports count of this group",
            "format": "int32",
            "readOnly": true
          }
        }
      },
      "ColumnHeader": {
        "type": "object",
        "properties": {
          "needForecast": {
            "type": "boolean",
            "readOnly": true
          },
          "displayType": {
            "type": "string",
            "readOnly": true
          },
          "unitLabel": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "DeviceDeltaPaginationResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "deltaId": {
            "type": "string"
          },
          "searchId": {
            "type": "string",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Device"
            }
          }
        }
      },
      "LogFileEventSource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EventSource"
          },
          {
            "type": "object",
            "properties": {
              "logFiles": {
                "type": "array",
                "description": "log files",
                "items": {
                  "$ref": "#/components/schemas/LogFile"
                }
              }
            }
          }
        ],
        "x-discriminator-value": "logfile"
      },
      "AzureExpressRouteCircuitPeeringDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ]
      },
      "DeviceGroupDatasourcePaginationResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "searchId": {
            "type": "string",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeviceGroupDataSource"
            }
          }
        }
      },
      "GenerateReportRequest": {
        "type": "object",
        "properties": {
          "withAdminId": {
            "type": "integer",
            "description": "Generate the report with the admin. 0 mean current user",
            "format": "int32"
          },
          "reportId": {
            "type": "integer",
            "description": "The id of the report to run",
            "format": "int32",
            "readOnly": true
          },
          "receiveEmails": {
            "type": "string",
            "description": "The email addresses that LogicMonitor should send the report to, separated by commas",
            "example": "bob@logicmonitor.com"
          }
        }
      },
      "SNMPCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object",
            "properties": {
              "ip": {
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "x-discriminator-value": "snmp"
      },
      "Alert": {
        "type": "object",
        "properties": {
          "resourceId": {
            "type": "integer",
            "description": "The device specific LogicModule Id",
            "format": "int32",
            "readOnly": true
          },
          "endEpoch": {
            "type": "integer",
            "description": "The time (in epoch format) that the alert ended",
            "format": "int64",
            "readOnly": true
          },
          "threshold": {
            "type": "string",
            "description": "The threshold associated with the object in alert",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "description": "The type of alert",
            "readOnly": true
          },
          "startEpoch": {
            "type": "integer",
            "description": "The time (in epoch format) that the alert started",
            "format": "int64",
            "readOnly": true
          },
          "enableAnomalyAlertGeneration": {
            "type": "string",
            "description": "Indicates dynamic threshold alert generation setting. Expression is comma separated\n0 denotes OFF, 1 denotes ON, -1 denotes INVALID\n1,0,1 =   warn : ON     error: OFF   critical: ON\nEmpty value on this parameter means : 0,0,0",
            "readOnly": true
          },
          "internalId": {
            "type": "string",
            "description": "The internal id for the alert",
            "readOnly": true
          },
          "monitorObjectName": {
            "type": "string",
            "description": "The name of the object that the alert is associated with",
            "readOnly": true
          },
          "dataPointName": {
            "type": "string",
            "description": "The name of the datapoint in alert",
            "readOnly": true
          },
          "dataPointId": {
            "type": "integer",
            "description": "The id of the datapoint in alert",
            "format": "int32",
            "readOnly": true
          },
          "suppressor": {
            "type": "string",
            "description": "The component (For example: SDT, HostClusterAlert) which suppressed the alert",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "description": "The alert id",
            "readOnly": true
          },
          "detailMessage": {
            "type": "object",
            "properties": {},
            "description": "The alert message, if needMessage=true is included in the query parameters",
            "readOnly": true
          },
          "ruleId": {
            "type": "integer",
            "description": "The id of the rule the alert matches",
            "format": "int32",
            "readOnly": true
          },
          "alertExternalTicketUrl": {
            "$ref": "#/components/schemas/JSONObject"
          },
          "tenant": {
            "type": "string",
            "description": "Tenant to which this alert belongs to. ",
            "readOnly": true
          },
          "alertValue": {
            "type": "string",
            "description": "The value that triggered the alert",
            "readOnly": true
          },
          "sdted": {
            "type": "boolean",
            "description": "It specifies if the SDT is set for an active alert or not. However, the sdted is set to false for cleared alert as you cannot apply SDT to a cleared alert.",
            "readOnly": true
          },
          "SDT": {
            "type": "object",
            "properties": {},
            "description": "The active SDT, if one exists",
            "readOnly": true
          },
          "enableAnomalyAlertSuppression": {
            "type": "string",
            "description": "Indicates anomaly detection alert suppression setting, expression is comma separated\n0 denotes OFF, 1 denotes ON, -1 denotes INVALID\n1,0,1 =   warn : ON     error: OFF   critical: ON\nEmpty value on this parameter means : 0,0,0",
            "readOnly": true
          },
          "receivedList": {
            "type": "string",
            "description": "The recipients that have received the alert",
            "readOnly": true
          },
          "monitorObjectGroups": {
            "type": "object",
            "properties": {},
            "description": "Information about the groups the object is a member of",
            "readOnly": true
          },
          "chainId": {
            "type": "integer",
            "description": "The id of the escalation chain the alert was routed to",
            "format": "int32",
            "readOnly": true
          },
          "resourceTemplateId": {
            "type": "integer",
            "description": "The id of the datasource in alert",
            "format": "int32",
            "readOnly": true
          },
          "cleared": {
            "type": "boolean",
            "description": "Whether or not the alert has cleared",
            "readOnly": true
          },
          "adAlertDesc": {
            "type": "string",
            "description": "The description for dynamic threshold based alert",
            "readOnly": true
          },
          "resourceTemplateName": {
            "type": "string",
            "description": "The name of the datasource in alert",
            "readOnly": true
          },
          "anomaly": {
            "type": "boolean",
            "description": "Indicates the anomaly alert, value can be true/false/null. If alert value lies within confidence band then false, otherwise true. If confidence band is not available then value will be null.",
            "readOnly": true
          },
          "instanceName": {
            "type": "string",
            "description": "The name of the instance in alert",
            "readOnly": true
          },
          "monitorObjectId": {
            "type": "integer",
            "description": "The id of the object that the alert is associated with",
            "format": "int32",
            "readOnly": true
          },
          "rule": {
            "type": "string",
            "description": "The rule the alert matches",
            "readOnly": true
          },
          "ackComment": {
            "type": "string",
            "description": "The comment submitted with the acknowledgement",
            "readOnly": true
          },
          "alertGroupEntityValue": {
            "type": "string",
            "description": "Alert group entity value for stateful log alerts",
            "readOnly": true
          },
          "instanceId": {
            "type": "integer",
            "description": "The id of the instance in alert",
            "format": "int32",
            "readOnly": true
          },
          "suppressDesc": {
            "type": "string",
            "description": "The description for suppressed alert",
            "readOnly": true
          },
          "nextRecipient": {
            "type": "integer",
            "description": "The next recipient in the escalation chain for this alert",
            "format": "int32",
            "readOnly": true
          },
          "adAlert": {
            "type": "boolean",
            "description": "Specifies whether alert is dynamic threshold based or not",
            "readOnly": true
          },
          "ackedBy": {
            "type": "string",
            "description": "The user that acknowledged the alert",
            "readOnly": true
          },
          "severity": {
            "type": "integer",
            "description": "The alert severity, where 2=warning, 3=error and 4=critical",
            "format": "int32",
            "readOnly": true
          },
          "ackedEpoch": {
            "type": "integer",
            "description": "The time (in epoch format) that the alert was acknowledged",
            "format": "int64",
            "readOnly": true
          },
          "chain": {
            "type": "string",
            "description": "The escalation chain the alert was routed to",
            "readOnly": true
          },
          "subChainId": {
            "type": "integer",
            "description": "The id of the sub time based chain",
            "format": "int32",
            "readOnly": true
          },
          "logMetaData": {
            "type": "string",
            "description": "Specified log alert metadata fields value",
            "readOnly": true
          },
          "monitorObjectType": {
            "type": "string",
            "readOnly": true
          },
          "acked": {
            "type": "boolean",
            "description": "Whether or not the alert has been acknowledged",
            "readOnly": true
          },
          "resourceTemplateType": {
            "type": "string",
            "description": "The type of the logicmodule in alert",
            "readOnly": true
          },
          "clearValue": {
            "type": "string",
            "description": "The value that cleared the alert",
            "readOnly": true
          },
          "instanceDescription": {
            "type": "string",
            "description": "The description of the instance in alert",
            "readOnly": true
          },
          "dependencyRoutingState": {
            "type": "string",
            "description": "The dependency routing state",
            "readOnly": true
          },
          "dependencyRole": {
            "type": "string",
            "description": "The dependency role",
            "readOnly": true
          }
        }
      },
      "NetflowDataBase": {
        "type": "object",
        "properties": {
          "dataType": {
            "type": "string",
            "readOnly": true
          }
        },
        "discriminator": {
          "propertyName": "dataType"
        }
      },
      "SaasOffice365SharepointReportCollectorAttributeV3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "required": [
              "period"
            ],
            "type": "object",
            "properties": {
              "period": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "WebResource": {
        "required": [
          "URL",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "html | iframe"
          },
          "URL": {
            "type": "string",
            "description": "If type = html this should be a url, if type = iframe this should be an iframe"
          }
        }
      },
      "SaasOffice365TeamsCallsQosCollectorAttributeV3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object"
          }
        ]
      },
      "MemcachedCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object",
            "properties": {
              "port": {
                "type": "string"
              },
              "ip": {
                "type": "string"
              }
            }
          }
        ],
        "x-discriminator-value": "memcached"
      },
      "DataPoint": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "alertForNoData": {
            "type": "integer",
            "description": "The triggered alert level if we cannot collect data for this datapoint. The values can be 0-4 (0:unused alert, 1:alert ok, 2:warn alert, 2:error alert, 4:critical alert)",
            "format": "int32"
          },
          "postProcessorMethod": {
            "type": "string",
            "description": "The post processor method for the data value. Currently support complex expression and groovy."
          },
          "postProcessorParam": {
            "type": "string",
            "description": "The post processor parameter, e.g. dataPoint1*2"
          },
          "maxDigits": {
            "type": "integer",
            "description": "The max digits of the data value",
            "format": "int32"
          },
          "rawDataFieldName": {
            "type": "string",
            "description": "The name of the raw data field name used to fetch value, e.g. avgrtt, output"
          },
          "description": {
            "type": "string",
            "description": "The datapoint description"
          },
          "alertClearTransitionInterval": {
            "type": "integer",
            "description": "The count that the alert must exist for this many poll cycles before the alert will be cleared",
            "format": "int32"
          },
          "userParam3": {
            "type": "string",
            "description": "The third user parameter will be used to fetch the datapoint value. "
          },
          "userParam2": {
            "type": "string",
            "description": "The second user parameter will be used to fetch the datapoint value. e.g. jmx attribute name"
          },
          "type": {
            "type": "integer",
            "description": "The data metric type. The values can be 0-7 (0:unknown, 1:counter, 2:gauge, 3:derive, 5:status, 6:compute, 7:counter32, 8:counter64)",
            "format": "int32"
          },
          "dataSourceId": {
            "type": "integer",
            "description": "The datasource id",
            "format": "int32",
            "readOnly": true
          },
          "minValue": {
            "type": "string",
            "description": "The minimum value of the datapoint value range"
          },
          "alertBody": {
            "type": "string",
            "description": "The customized alert message body define.  Empty string mean we will use the define in default template"
          },
          "originId": {
            "type": "string",
            "description": "Portable id for origin tracking"
          },
          "userParam1": {
            "type": "string",
            "description": "The first user parameter will be used to fetch the datapoint value. e.g. snmp oid"
          },
          "alertSubject": {
            "type": "string",
            "description": "The customized alert message subject define. Empty string mean we will use the define in default template"
          },
          "id": {
            "type": "integer",
            "description": "The datapoint id",
            "format": "int32",
            "readOnly": true
          },
          "alertTransitionInterval": {
            "type": "integer",
            "description": "The count that the alert must exist for this many poll cycles before it will be triggered",
            "format": "int32"
          },
          "enableAnomalyAlertSuppression": {
            "type": "string",
            "description": "Expression of anomaly detection setting, split by comma\n0 means off,  1 means on, -1 means invalid\n1,0,1 =   warn : ON     error: OFF   critical: ON\nEmpty value on this parameter means : 0,0,0"
          },
          "maxValue": {
            "type": "string",
            "description": "The max value of the datapoint value range"
          },
          "dataType": {
            "type": "integer",
            "description": "The data value type. The values can be 1-8 (1:boolean, 2:byte, 3:short, 4:int, 5:long, 6:float, 7:double, 8:ulong)",
            "format": "int32"
          },
          "criticalAdAdvSetting": {
            "type": "string",
            "description": "Enable anomaly detection advance setting for CRITICAL severity"
          },
          "alertExprNote": {
            "type": "string",
            "description": "alert expression note"
          },
          "adAdvSettingEnabled": {
            "type": "boolean",
            "description": "The AD advance setting enable flag"
          },
          "errorAdAdvSetting": {
            "type": "string",
            "description": "Enable anomaly detection advance setting for ERROR severity"
          },
          "warnAdAdvSetting": {
            "type": "string",
            "description": "Enable anomaly detection advance setting for WARN severity"
          },
          "name": {
            "type": "string",
            "description": "The datapoint name"
          },
          "alertExpr": {
            "type": "string",
            "description": "The alert threshold define for the datapoint. e.g. '> 60 80 90' mean it will: \ntrigger warn alert if value > 60\ntrigger error alert if value > 80\ntrigger critical alert if value > 90"
          }
        }
      },
      "PerfmonCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object",
            "properties": {
              "counters": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PerfmonCounter"
                }
              }
            }
          }
        ],
        "x-discriminator-value": "perfmon"
      },
      "DeviceNOCItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NOCItemBase"
          },
          {
            "required": [
              "dataPointName",
              "dataSourceDisplayName",
              "deviceDisplayName",
              "deviceGroupFullPath",
              "instanceName",
              "name"
            ],
            "type": "object",
            "properties": {
              "dataPointName": {
                "type": "string"
              },
              "instanceName": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "dataSourceDisplayName": {
                "type": "string"
              },
              "groupBy": {
                "type": "string"
              },
              "deviceGroupFullPath": {
                "type": "string"
              },
              "deviceDisplayName": {
                "type": "string"
              }
            }
          }
        ],
        "x-discriminator-value": "device"
      },
      "CollectorAttribute": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The data collector's name"
          }
        },
        "discriminator": {
          "propertyName": "name"
        }
      },
      "GaugeWidget": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Widget"
          },
          {
            "required": [
              "dataPoint"
            ],
            "type": "object",
            "properties": {
              "minValue": {
                "type": "number",
                "description": "The minimum value of the gauge widget, displayed on the left side of the gauge",
                "format": "double"
              },
              "displayType": {
                "type": "integer",
                "description": "Display as \"Raw Value\" or \"Percent\"",
                "format": "int32"
              },
              "peakTimeRange": {
                "type": "string",
                "description": "The time range over which the peak value is determined"
              },
              "legend": {
                "type": "string",
                "description": "The legend for the widget, displayed underneath the gauge"
              },
              "maxValue": {
                "type": "number",
                "description": "The maximum value of the gauge widget, displayed on the right side of the gauge",
                "format": "double"
              },
              "showPeak": {
                "type": "boolean",
                "description": "Whether or not the peak value is displayed on the gauge widget"
              },
              "dataPoint": {
                "$ref": "#/components/schemas/GaugeDataPoint"
              },
              "displayUnit": {
                "type": "string",
                "description": "The unit for the raw value"
              },
              "colorThresholds": {
                "type": "array",
                "description": "The threshold of Gauge color changes",
                "items": {
                  "$ref": "#/components/schemas/ColorThreshold"
                }
              }
            }
          }
        ],
        "x-discriminator-value": "gauge"
      },
      "InheritanceProp": {
        "type": "object",
        "properties": {
          "fullpath": {
            "type": "string",
            "description": "The fullpath of the property",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "description": "Source id for the property. For example: group id or property rule",
            "format": "int32",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "description": "The parent property type from which it is inheriting",
            "readOnly": true
          },
          "value": {
            "type": "string",
            "description": "The property value for the group",
            "readOnly": true
          }
        }
      },
      "NetflowReport": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReportBase"
          },
          {
            "required": [
              "hostsVal",
              "hostsValType"
            ],
            "type": "object",
            "properties": {
              "hostsValType": {
                "type": "string",
                "description": "The resource type for the report, host or group"
              },
              "dateRange": {
                "type": "string",
                "description": "The Time Range configured for the report: Last 2 hours | Last 24 hours | Last calendar day | Last 7 days | Last 14 days | Last 30 days | Last calendar month | Last 365 days | Any custom date range in this format: YYYY-MM-dd hh:mm TO YYYY-MM-dd hh:mm"
              },
              "hostsVal": {
                "type": "string",
                "description": "The devices OR groups (full path) selected for the report, where multiple entities are separated by commas. Glob is accepted"
              },
              "includeDNSMappings": {
                "type": "boolean",
                "description": "Whether include DNS mappings or not"
              }
            }
          }
        ],
        "x-discriminator-value": "netflow device metric"
      },
      "AzureAuthenticationAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object"
          }
        ]
      },
      "HostInventoryReport": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReportBase"
          },
          {
            "required": [
              "properties"
            ],
            "type": "object",
            "properties": {
              "sortedBy": {
                "type": "string",
                "description": "Specify a property that is included in the 'properties' list that should be used to sort the devices/groups displayed in the report"
              },
              "hostsValType": {
                "type": "string",
                "description": "host | group. The type of entities specified in the hostsVal field"
              },
              "hostsVal": {
                "type": "string",
                "description": "The devices OR groups (full path) selected for the report, where multiple entities are separated by commas"
              },
              "metrics": {
                "type": "array",
                "description": "The instances will be included in the report",
                "items": {
                  "$ref": "#/components/schemas/HostInventoryMetric"
                }
              },
              "properties": {
                "type": "array",
                "description": "The properties that should be displayed in the report",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "x-discriminator-value": "host inventory"
      },
      "IPMIEventSource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EventSource"
          },
          {
            "required": [
              "checkInterval"
            ],
            "type": "object",
            "properties": {
              "checkInterval": {
                "type": "integer",
                "description": "impmi check interval",
                "format": "int32"
              }
            }
          }
        ]
      },
      "DeviceDataSourceAssociatedInstance": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Instance name",
            "readOnly": true
          },
          "alias": {
            "type": "string",
            "description": "Instance alias",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "description": "Instance id",
            "format": "int32",
            "readOnly": true
          }
        }
      },
      "AwsCloudWatchCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object",
            "properties": {
              "period": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "x-discriminator-value": "awscloudwatch"
      },
      "MapItemInfo": {
        "type": "object",
        "properties": {
          "alertStatus": {
            "type": "string",
            "readOnly": true
          },
          "displayName": {
            "type": "string",
            "readOnly": true
          },
          "formattedLocation": {
            "type": "string",
            "readOnly": true
          },
          "latitude": {
            "type": "string",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "readOnly": true
          },
          "sdtStatus": {
            "type": "string",
            "readOnly": true
          },
          "activeStatus": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "subType": {
            "type": "string",
            "readOnly": true
          },
          "location": {
            "type": "string",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "longitude": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "AzureVNGConnectionDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ]
      },
      "SaasSalesforceSOQLQueryCollectorAttributeV3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "required": [
              "soqlEntity"
            ],
            "type": "object",
            "properties": {
              "period": {
                "type": "integer",
                "format": "int32"
              },
              "whereClause": {
                "type": "string"
              },
              "groupByClause": {
                "type": "string"
              },
              "soqlEntity": {
                "type": "string"
              },
              "dateColumn": {
                "type": "string"
              },
              "instanceColumnName": {
                "type": "string"
              }
            }
          }
        ]
      },
      "CollectorSDT": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SDT"
          },
          {
            "required": [
              "collectorId"
            ],
            "type": "object",
            "properties": {
              "collectorDescription": {
                "type": "string",
                "description": "The description of the collector that the SDT will be associated with",
                "readOnly": true
              },
              "collectorId": {
                "type": "integer",
                "description": "The id of the collector that the SDT will be associated with",
                "format": "int32"
              }
            }
          }
        ],
        "x-discriminator-value": "collectorsdt"
      },
      "AwsEC2ReservedInstanceCoverageDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ],
        "x-discriminator-value": "ad_awsec2reservedinstancecoverage"
      },
      "InstanceGroupAlertThresholdInfo": {
        "type": "object",
        "properties": {
          "enableAnomalyAlertGeneration": {
            "type": "string",
            "description": "enable anomaly alert generation",
            "readOnly": true
          },
          "alertForNoData": {
            "type": "integer",
            "description": "The triggered alert level if we cannot collect data for this datapoint. The values can be 1-4 ( 1:no alert, 2:warn alert, 3:error alert, 4:critical alert)",
            "format": "int32",
            "readOnly": true
          },
          "enableAnomalyAlertSuppression": {
            "type": "string",
            "description": "enable anomaly alert suppression",
            "readOnly": true
          },
          "groupId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "alertClearTransitionInterval": {
            "type": "integer",
            "description": "The count that the alert must exist for this many poll cycles before the alert will be cleared",
            "format": "int32",
            "readOnly": true
          },
          "alertEnabled": {
            "type": "boolean",
            "readOnly": true
          },
          "alertExpr": {
            "type": "string",
            "readOnly": true
          },
          "alertTransitionInterval": {
            "type": "integer",
            "description": "The count that the alert must exist for this many poll cycles before it will be triggered",
            "format": "int32",
            "readOnly": true
          }
        }
      },
      "DeviceDataSourceInstanceSDT": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SDT"
          },
          {
            "type": "object",
            "properties": {
              "dataSourceInstanceId": {
                "type": "integer",
                "description": "The id of the datasource instance that the SDT will be associated with",
                "format": "int32"
              },
              "dataSourceInstanceName": {
                "type": "string",
                "description": "The name of the datasource instance that the SDT will be associated with"
              },
              "deviceId": {
                "type": "integer",
                "description": "The id of the device that the SDT will be associated with",
                "format": "int32"
              },
              "deviceDisplayName": {
                "type": "string",
                "description": "The name of the device that the SDT will be associated with"
              }
            }
          }
        ],
        "x-discriminator-value": "devicedatasourceinstancesdt"
      },
      "AwsSageMakerEndpointVariantMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ]
      },
      "GraphLine": {
        "type": "object",
        "properties": {
          "colorName": {
            "type": "string",
            "description": "The graph line color name"
          },
          "dataPointName": {
            "type": "string",
            "description": "The graph line data point name"
          },
          "dataPointId": {
            "type": "integer",
            "description": "The graph line data point id",
            "format": "int32",
            "readOnly": true
          },
          "legend": {
            "type": "string",
            "description": "The graph line legend"
          },
          "isVirtualDataPoint": {
            "type": "boolean",
            "description": "Whether the graph line's data point is a virtual data point"
          },
          "type": {
            "type": "integer",
            "description": "The graph line type. \nThe values can be 1|2|3|4 \nwhere,\n      1=line, 2=area, 3=stack, 4=column",
            "format": "int32"
          }
        }
      },
      "HostGroupInventoryReport": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReportBase"
          },
          {
            "required": [
              "properties"
            ],
            "type": "object",
            "properties": {
              "sortedBy": {
                "type": "string"
              },
              "hostGroups": {
                "type": "string"
              },
              "includeSubGroups": {
                "type": "boolean"
              },
              "properties": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "x-discriminator-value": "host group inventory"
      },
      "ResourceDataSourceAlertThresholdInfo": {
        "type": "object",
        "properties": {
          "enableAnomalyAlertGeneration": {
            "type": "string",
            "description": "enable anomaly alert generation",
            "readOnly": true
          },
          "alertForNoData": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "The triggered alert level if we cannot collect data for this datapoint. The values can be 0-4 (0:unused alert, 1:alert ok, 2:warn alert, 2:error alert, 4:critical alert)",
            "format": "byte"
          },
          "enableAnomalyAlertSuppression": {
            "type": "string",
            "description": "enable anomaly alert suppression",
            "readOnly": true
          },
          "alertClearTransitionInterval": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "The count that the alert must exist for this many poll cycles before the alert will be cleared",
            "format": "byte"
          },
          "alertEnabled": {
            "type": "boolean",
            "readOnly": true
          },
          "resourceDatasourceId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "alertExpr": {
            "type": "string",
            "readOnly": true
          },
          "alertTransitionInterval": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "The count that the alert must exist for this many poll cycles before it will be triggered",
            "format": "byte"
          }
        }
      },
      "BatchJobWidgetData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WidgetData"
          },
          {
            "type": "object",
            "properties": {
              "items": {
                "type": "array",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/BatchJobExecutionItem"
                }
              }
            }
          }
        ],
        "x-discriminator-value": "batchjob"
      },
      "AwsAutoScalingServiceLimitsCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object",
            "properties": {
              "period": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "x-discriminator-value": "awsautoscalingservicelimits"
      },
      "GcpBillingBigQuerySourceCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object"
          }
        ]
      },
      "RecipientGroup": {
        "required": [
          "groupName"
        ],
        "type": "object",
        "properties": {
          "groupName": {
            "type": "string",
            "description": "The name of the recipient group",
            "example": "Tier 1 Helpdesk"
          },
          "recipients": {
            "type": "array",
            "description": "The recipients in the group",
            "items": {
              "$ref": "#/components/schemas/Recipient"
            }
          },
          "description": {
            "type": "string",
            "description": "The description of the recipient group",
            "example": "Tier 1 Helpdesk"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        }
      },
      "RestAwsTrustedAdvisorEventSource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EventSource"
          },
          {
            "type": "object",
            "properties": {
              "schedule": {
                "type": "integer",
                "description": "The polling interval for the EventSource",
                "format": "int32"
              }
            }
          }
        ]
      },
      "RestUserCustomizedDataV3": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "DashboardGroupPaginationResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "searchId": {
            "type": "string",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DashboardGroup"
            }
          }
        }
      },
      "AzureAccountTestResult": {
        "type": "object",
        "properties": {
          "noPermissionServices": {
            "type": "object",
            "properties": {},
            "readOnly": true
          },
          "detailLink": {
            "type": "object",
            "properties": {},
            "readOnly": true
          }
        }
      },
      "RestResponseMetaBlock": {
        "type": "object",
        "properties": {
          "filteredCount": {
            "type": "integer",
            "format": "int64"
          },
          "perPageCount": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "type": "string"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "pageOffsetCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "EntityProperty": {
        "type": "object",
        "properties": {
          "inheritList": {
            "type": "array",
            "description": "The inherit list of the property",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/InheritanceProp"
            }
          },
          "name": {
            "type": "string",
            "description": "The name of the property",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "description": "The type of property. The values can be Inherit|System|Custom",
            "readOnly": true
          },
          "value": {
            "type": "string",
            "description": "The value of the property",
            "readOnly": true
          }
        }
      },
      "AzureBackupProtectedItemBackupJobCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "required": [
              "period"
            ],
            "type": "object",
            "properties": {
              "period": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "DynamicTableWidgetRow": {
        "type": "object",
        "properties": {
          "instanceName": {
            "type": "string",
            "description": "The instances for each column of the row",
            "readOnly": true
          },
          "label": {
            "type": "string",
            "description": "The label for the row"
          },
          "deviceDisplayName": {
            "type": "string",
            "description": "The display name of the device selected for the row",
            "readOnly": true
          },
          "groupFullPath": {
            "type": "string",
            "description": "The full path of the group selected for the row",
            "readOnly": true
          }
        }
      },
      "LocationData": {
        "type": "object",
        "properties": {
          "geoInfo": {
            "type": "string",
            "readOnly": true
          },
          "selected": {
            "type": "boolean"
          },
          "smgId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Ec2DDR": {
        "type": "object",
        "properties": {
          "changeName": {
            "type": "string"
          },
          "assignment": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Assignment"
            }
          }
        }
      },
      "RestAzureSubscriptionV3": {
        "type": "object",
        "properties": {
          "spendingLimit": {
            "type": "string"
          },
          "locationPlacementId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "tenantId": {
            "type": "string"
          },
          "quotaId": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "authorizationSource": {
            "type": "string"
          }
        }
      },
      "AwsRoute53ResolverIPAddressCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object",
            "properties": {
              "period": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "RestAzureResourceLogAnalyticsWorkspacesSource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EventSource"
          },
          {
            "type": "object",
            "properties": {
              "schedule": {
                "type": "integer",
                "description": "The polling interval for the EventSource",
                "format": "int32"
              },
              "query": {
                "type": "string",
                "description": "Azure Log Analytics Workspaces Query"
              },
              "columnInstanceName": {
                "type": "string",
                "description": "Column Instance Name"
              }
            }
          }
        ]
      },
      "DashboardReport": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReportBase"
          },
          {
            "required": [
              "dashboardId",
              "dateRange"
            ],
            "type": "object",
            "properties": {
              "dashboardId": {
                "type": "integer",
                "description": "The id of the source dashboard for the report",
                "format": "int32"
              },
              "dateRange": {
                "type": "string",
                "description": "The Time Range configured for the report: Last 2 hours | Last 24 hours | Last calendar day | Last 7 days | Last 14 days | Last 30 days | Last calendar month | Last 365 days | Any custom date range in this format: YYYY-MM-dd hh:mm TO YYYY-MM-dd hh:mm"
              },
              "displayName": {
                "type": "string",
                "description": "The name of the dashboard report"
              },
              "displayLink": {
                "type": "boolean",
                "description": "Whether need to display a link to the real dashboard"
              },
              "dashboardGroupFullPath": {
                "type": "string",
                "description": "The full path name of the group of the source dashboard",
                "readOnly": true
              },
              "dashboardName": {
                "type": "string",
                "description": "The name of the source dashboard for the report",
                "readOnly": true
              }
            }
          }
        ],
        "x-discriminator-value": "dashboard"
      },
      "AlertWidgetData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WidgetData"
          },
          {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer",
                "format": "int32",
                "readOnly": true
              },
              "searchId": {
                "type": "string",
                "readOnly": true
              },
              "items": {
                "type": "array",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/Alert"
                }
              }
            }
          }
        ],
        "x-discriminator-value": "alert"
      },
      "CIMAutoDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "required": [
              "cimClass",
              "namespace",
              "property"
            ],
            "type": "object",
            "properties": {
              "cimClass": {
                "type": "string"
              },
              "property": {
                "type": "string"
              },
              "namespace": {
                "type": "string"
              }
            }
          }
        ],
        "x-discriminator-value": "ad_cim"
      },
      "SaaSZoomPlanUsageDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "required": [
              "zoomPlanUsageType"
            ],
            "type": "object",
            "properties": {
              "zoomPlanUsageType": {
                "type": "string"
              }
            }
          }
        ]
      },
      "DeviceLogPipeLineResourceSDT": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SDT"
          },
          {
            "type": "object",
            "properties": {
              "deviceLogPipeLineResourceId": {
                "type": "integer",
                "description": "The id of the device logPipeLineResource that the SDT will be associated with",
                "format": "int32"
              },
              "logPipeLineName": {
                "type": "string",
                "description": "The name of the pipe line that the SDT will apply to"
              },
              "deviceId": {
                "type": "integer",
                "description": "The id of the device associated with the pipe line that the SDT will apply to",
                "format": "int32"
              },
              "deviceDisplayName": {
                "type": "string",
                "description": "The display name of the device associated with the logPipeLine that the SDT will apply to"
              }
            }
          }
        ],
        "x-discriminator-value": "devicelogpipelineresourcesdt"
      },
      "NextUpgradeInfo": {
        "type": "object",
        "properties": {
          "upgradeTime": {
            "type": "string",
            "readOnly": true
          },
          "stable": {
            "type": "boolean",
            "readOnly": true
          },
          "majorVersion": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "minorVersion": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "mandatory": {
            "type": "boolean",
            "readOnly": true
          },
          "upgradeTimeEpoch": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          }
        }
      },
      "AzureReplicationJobDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ]
      },
      "AzureResourceUsageCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "required": [
              "azureresourcetype"
            ],
            "type": "object",
            "properties": {
              "azureresourcetype": {
                "type": "string"
              }
            }
          }
        ]
      },
      "PieChartData": {
        "type": "object",
        "properties": {
          "colorName": {
            "type": "string",
            "readOnly": true
          },
          "dataPointName": {
            "type": "string",
            "readOnly": true
          },
          "legend": {
            "type": "string",
            "readOnly": true
          },
          "value": {
            "type": "number",
            "format": "double",
            "readOnly": true
          }
        }
      },
      "SaasO365MailboxDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ]
      },
      "SaasSalesforceLicenseDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ]
      },
      "DatasourceOverviewGraphPaginationResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "searchId": {
            "type": "string",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataSourceOverviewGraph"
            }
          }
        }
      },
      "ESXCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object",
            "properties": {
              "counters": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DataSourceAttribute"
                }
              },
              "entity": {
                "type": "string"
              }
            }
          }
        ],
        "x-discriminator-value": "esx"
      },
      "CollectorGroupPaginationResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "searchId": {
            "type": "string",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CollectorGroup"
            }
          }
        }
      },
      "AwsGlobalNetworkLinkMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ]
      },
      "ScriptCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object",
            "properties": {
              "groovyScript": {
                "type": "string",
                "description": "groovy script"
              },
              "manualConnections": {
                "type": "string",
                "description": "manual"
              },
              "scriptType": {
                "type": "string",
                "description": "script type: embed | file | powershell"
              },
              "windowsScript": {
                "type": "string",
                "description": "windows script"
              },
              "linuxCmdline": {
                "type": "string",
                "description": "linux script command line"
              },
              "linuxScript": {
                "type": "string",
                "description": "linux script"
              },
              "windowsCmdline": {
                "type": "string",
                "description": "windows script command line"
              },
              "properties": {
                "type": "string",
                "description": "property based"
              }
            }
          }
        ],
        "x-discriminator-value": "script"
      },
      "Authentication": {
        "required": [
          "password",
          "type",
          "userName"
        ],
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "description": "NTLM authentication password"
          },
          "type": {
            "type": "string",
            "description": "Authentication type",
            "example": "basic"
          },
          "userName": {
            "type": "string",
            "description": "NTLM  authentication userName"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "RestEventSourceFilter": {
        "required": [
          "comment",
          "name",
          "operator",
          "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The filter name"
          },
          "comment": {
            "type": "string",
            "description": "The filter comment"
          },
          "id": {
            "type": "integer",
            "description": "The filter id",
            "format": "int32",
            "readOnly": true
          },
          "value": {
            "type": "string",
            "description": "The filter value"
          },
          "operator": {
            "type": "string",
            "description": "The filter operator"
          }
        }
      },
      "NetflowGraphWidget": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Widget"
          },
          {
            "required": [
              "deviceDisplayName"
            ],
            "type": "object",
            "properties": {
              "netflowFilter": {
                "$ref": "#/components/schemas/NetflowFilters"
              },
              "deviceId": {
                "type": "integer",
                "format": "int32",
                "readOnly": true
              },
              "graph": {
                "type": "string"
              },
              "deviceDisplayName": {
                "type": "string"
              }
            }
          }
        ],
        "x-discriminator-value": "netflowgraph"
      },
      "ItemData": {
        "type": "object",
        "properties": {
          "inSDTAndConfirmedErrorAlert": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "inSDT": {
            "type": "boolean",
            "readOnly": true
          },
          "inSDTCriticalAlert": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "confirmedWarnAlert": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "entityId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "readOnly": true
          },
          "criticalAlert": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "resourceTemplateType": {
            "type": "string",
            "readOnly": true
          },
          "parentId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "errorAlert": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "confirmedCriticalAlert": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "inSDTWarnAlert": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "inSDTAndConfirmedWarnAlert": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "warnAlert": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "confirmedErrorAlert": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "subType": {
            "type": "string",
            "readOnly": true
          },
          "inSDTErrorAlert": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "inSDTAndConfirmedCriticalAlert": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        }
      },
      "AwsRedShiftDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ],
        "x-discriminator-value": "ad_awsredshift"
      },
      "AwsAccountTestResult": {
        "type": "object",
        "properties": {
          "noPermissionServices": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "detailLink": {
            "type": "string"
          },
          "nonPermissionErrors": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "OpsNoteWebsiteScope": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OpsNoteScope"
          },
          {
            "type": "object",
            "properties": {
              "fullPath": {
                "type": "string"
              },
              "websiteName": {
                "type": "string"
              },
              "websiteId": {
                "type": "integer",
                "format": "int32"
              },
              "groupId": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "x-discriminator-value": "website"
      },
      "DeviceGroupData": {
        "type": "object",
        "properties": {
          "fullPath": {
            "type": "string",
            "description": "The full path of the device group (i.e. if the group 'Dev' is under a parent group named 'Production', the fullPath would be 'Production/Dev'",
            "readOnly": true
          },
          "groupType": {
            "type": "string",
            "description": "The type of device group: normal and dynamic device groups will have groupType=Normal, and AWS groups will have a groupType value of AWS/SERVICE (e.g. AWS/S3)",
            "readOnly": true
          },
          "userPermission": {
            "type": "string",
            "description": "The permissions for the device group that are granted to the user that made this API request",
            "readOnly": true
          },
          "gcpRegionsInfo": {
            "type": "string",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "The description of the device group",
            "readOnly": true
          },
          "appliesTo": {
            "type": "string",
            "description": "The Applies to custom query for this group (only for dynamic groups)",
            "readOnly": true
          },
          "rolePrivileges": {
            "type": "array",
            "description": "The role privilege operations for the device group that are granted to the user that made this API request",
            "readOnly": true,
            "items": {
              "type": "string"
            }
          },
          "awsRegionsInfo": {
            "type": "string",
            "description": "The number of instances in each AWS region (only applies to AWS groups)",
            "readOnly": true
          },
          "numOfHosts": {
            "type": "integer",
            "description": "The number of total devices, including both AWS and normal devices, that belong to this device group (includes normal devices in sub groups)",
            "format": "int32",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "The name of the device group",
            "readOnly": true
          },
          "numOfDirectSubGroups": {
            "type": "integer",
            "description": "The number of sub-groups that belong only to this device group (doesn't include groups under sub-groups)",
            "format": "int64",
            "readOnly": true
          },
          "numOfDirectDevices": {
            "type": "integer",
            "description": "The number of AWS and normal devices that belong only to this device group (doesn't include devices in sub-groups)",
            "format": "int64",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "description": "The id of the device group",
            "format": "int32",
            "readOnly": true
          },
          "azureRegionsInfo": {
            "type": "string",
            "description": "The number of instances in each Azure region (only applies to Azure groups)",
            "readOnly": true
          }
        }
      },
      "PropertyMatchRule": {
        "type": "object",
        "properties": {
          "underscore": {
            "type": "boolean"
          },
          "caseInsensitive": {
            "type": "boolean"
          }
        }
      },
      "DeviceGroup": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "fullPath": {
            "type": "string",
            "description": "The full path of the device group (i.e. if the group 'Dev' is under a parent group named 'Production', the fullPath would be 'Production/Dev'",
            "readOnly": true
          },
          "groupType": {
            "type": "string",
            "description": "The type of device group: normal and dynamic device groups will have groupType=Normal, and AWS groups will have a groupType value of AWS/SERVICE (e.g. AWS/S3)",
            "example": "Normal"
          },
          "numOfAWSDevices": {
            "type": "integer",
            "description": "The number of AWS devices that belong to this device group (includes AWS devices in sub groups)",
            "format": "int64",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "The description of the device group",
            "example": "Linux Servers"
          },
          "appliesTo": {
            "type": "string",
            "description": "The Applies to custom query for this group (only for dynamic groups)",
            "example": "isLinux()"
          },
          "gcpTestResultCode": {
            "type": "integer",
            "description": "The Status code result returned by the transaction that tests the GCP credentials associated with the GCP group",
            "format": "int32",
            "readOnly": true
          },
          "disableAlerting": {
            "type": "boolean",
            "description": "Indicates whether alerting is disabled (true) or enabled (false) for this device group",
            "example": true
          },
          "numOfKubernetesDevices": {
            "type": "integer",
            "description": "The number of kubernetes devices that belong to this device group (includes Kubernetes devices in sub groups)",
            "format": "int64",
            "readOnly": true
          },
          "awsRegionsInfo": {
            "type": "string",
            "description": "The number of instances in each AWS region (only applies to AWS groups)",
            "readOnly": true
          },
          "createdOn": {
            "type": "integer",
            "description": "The time, in epoch seconds format, that the device group was created",
            "format": "int64",
            "readOnly": true
          },
          "rolePrivileges": {
            "type": "array",
            "description": "The role privilege operations for the device group that are granted to the user that made this API request",
            "readOnly": true,
            "items": {
              "type": "string"
            }
          },
          "hasNetflowEnabledDevices": {
            "type": "boolean",
            "description": "Whether if any Netflow enabled devices in this device group",
            "readOnly": true
          },
          "numOfAzureDevices": {
            "type": "integer",
            "description": "The number of Azure devices that belong to this device group (includes Azure devices in sub groups)",
            "format": "int64",
            "readOnly": true
          },
          "defaultCollectorDescription": {
            "type": "string",
            "description": "The description of the default collector assigned to the device group",
            "readOnly": true
          },
          "defaultCollectorId": {
            "type": "integer",
            "description": "The Id of the default collector assigned to the device group",
            "format": "int32"
          },
          "awsTestResult": {
            "$ref": "#/components/schemas/AwsAccountTestResult"
          },
          "extra": {
            "type": "object",
            "properties": {},
            "description": "The extra setting for cloud group"
          },
          "numOfDirectSubGroups": {
            "type": "integer",
            "description": "The number of sub-groups that belong only to this device group (doesn't include groups under sub-groups)",
            "format": "int64",
            "readOnly": true
          },
          "subGroups": {
            "type": "array",
            "description": "The child device groups within this device group",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/DeviceGroupData"
            }
          },
          "numOfDirectDevices": {
            "type": "integer",
            "description": "The number of AWS and normal devices that belong only to this device group (doesn't include devices in sub-groups)",
            "format": "int64",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "description": "The id of the device group",
            "format": "int32",
            "readOnly": true
          },
          "enableNetflow": {
            "type": "boolean",
            "description": "Indicates whether Netflow is enabled (true) or disabled (false) for the device group, the default value is true",
            "example": true
          },
          "azureTestResultCode": {
            "type": "integer",
            "description": "The Status code result returned by the transaction that tests the Azure credentials associated with the Azure group",
            "format": "int32",
            "readOnly": true
          },
          "effectiveAlertEnabled": {
            "type": "boolean",
            "description": "Whether or not alerting is effectively disabled for this device group (alerting may be disabled at a higher level, e.g. parent group)",
            "readOnly": true
          },
          "defaultCollectorGroupDescription": {
            "type": "string",
            "description": "The description of the default collector group assigned to the device group",
            "readOnly": true
          },
          "userPermission": {
            "type": "string",
            "description": "The permissions for the device group that are granted to the user that made this API request",
            "readOnly": true
          },
          "gcpRegionsInfo": {
            "type": "string",
            "readOnly": true
          },
          "saasTestResultCode": {
            "type": "integer",
            "description": "The Status code result returned by the transaction that tests the SaaS credentials associated with the SaaS group",
            "format": "int32",
            "readOnly": true
          },
          "defaultCollectorGroupId": {
            "type": "integer",
            "description": "The collector group id of the default collector assigned to the device group",
            "format": "int32",
            "readOnly": true
          },
          "groupStatus": {
            "type": "string",
            "description": "normal | dead \nThe status of this device group, where possible statuses are normal and dead. A group with a status of dead may indicate that one or more devices are dead within the group",
            "readOnly": true
          },
          "numOfGcpDevices": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "azureTestResult": {
            "$ref": "#/components/schemas/AzureAccountTestResult"
          },
          "parentId": {
            "type": "integer",
            "description": "The id of the parent group for this device group (the root device group has an Id of 1)",
            "format": "int32"
          },
          "awsTestResultCode": {
            "type": "integer",
            "description": "The Status code result returned by the transaction that tests the AWS credentials associated with the AWS group",
            "format": "int32",
            "readOnly": true
          },
          "customProperties": {
            "type": "array",
            "description": "The properties associated with this device group",
            "items": {
              "$ref": "#/components/schemas/NameAndValue"
            }
          },
          "numOfHosts": {
            "type": "integer",
            "description": "The number of total devices, including both AWS and normal devices, that belong to this device group (includes normal devices in sub groups)",
            "format": "int64",
            "readOnly": true
          },
          "defaultAutoBalancedCollectorGroupId": {
            "type": "integer",
            "description": "The id of the default Auto Balanced Collector Group assigned to the device group",
            "format": "int32"
          },
          "saasTestResult": {
            "$ref": "#/components/schemas/SaasAccountTestResult"
          },
          "name": {
            "type": "string",
            "description": "The name of the device group",
            "example": "Linux Servers"
          },
          "gcpTestResult": {
            "$ref": "#/components/schemas/GcpAccountTestResult"
          },
          "azureRegionsInfo": {
            "type": "string",
            "description": "The number of instances in each Azure region (only applies to Azure groups)",
            "readOnly": true
          }
        }
      },
      "OpsNoteTagBase": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "updateOnInSec": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "createdOnInSec": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "release"
          },
          "id": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "GraphDisplay": {
        "type": "object",
        "properties": {
          "color": {
            "type": "string"
          },
          "legend": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "option": {
            "type": "string"
          }
        }
      },
      "EscalatingChain": {
        "required": [
          "destinations",
          "name"
        ],
        "type": "object",
        "properties": {
          "inAlerting": {
            "type": "boolean",
            "description": "Whether or not chain in alerting",
            "readOnly": true
          },
          "throttlingAlerts": {
            "type": "integer",
            "description": "Maximum number of alerts can be sent during a throttle period",
            "format": "int32"
          },
          "enableThrottling": {
            "type": "boolean",
            "description": "If throttle needs to be enabled then true if not then false.",
            "example": true
          },
          "destinations": {
            "type": "array",
            "description": "The chain destinations",
            "items": {
              "$ref": "#/components/schemas/Chain"
            }
          },
          "name": {
            "type": "string",
            "description": "The chain name",
            "example": "NOC Team"
          },
          "description": {
            "type": "string",
            "description": "The description for chain",
            "example": "For alerts escalated to the NOC Team"
          },
          "id": {
            "type": "integer",
            "description": "The Id of the chain",
            "format": "int32",
            "readOnly": true
          },
          "ccDestinations": {
            "type": "array",
            "description": "The chain's cc destinations",
            "items": {
              "$ref": "#/components/schemas/Recipient"
            }
          },
          "throttlingPeriod": {
            "type": "integer",
            "description": "The throttle period",
            "format": "int32"
          }
        }
      },
      "ILP": {
        "required": [
          "lmName",
          "wmiName"
        ],
        "type": "object",
        "properties": {
          "wmiName": {
            "type": "string"
          },
          "lmName": {
            "type": "string"
          }
        }
      },
      "GcpAccountTestResult": {
        "type": "object",
        "properties": {
          "noPermissionServices": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "detailLink": {
            "type": "string"
          },
          "nonPermissionErrors": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AuditLog": {
        "type": "object",
        "properties": {
          "happenedOnLocal": {
            "type": "string",
            "description": "The date and time that the action recorded in the access log entry occurred",
            "readOnly": true
          },
          "ip": {
            "type": "string",
            "description": "The IP address that the action was performed from",
            "readOnly": true
          },
          "happenedOn": {
            "type": "integer",
            "description": "The time, in epoch seconds, that the action recorded in the access log entry occurred",
            "format": "int64",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "The description of the action recorded in the access log entry",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "description": "The Id of the access log entry",
            "readOnly": true
          },
          "username": {
            "type": "string",
            "description": "The username associated with the user that performed the action recorded in the access log entry\t",
            "readOnly": true
          }
        }
      },
      "GcpLBBackendServiceDiscoveryMethodV3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ]
      },
      "DeviceDataSourceAssociatedPaginationResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "searchId": {
            "type": "string",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeviceDataSourceAssociated"
            }
          }
        }
      },
      "CollectorPaginationResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "searchId": {
            "type": "string",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CollectorBase"
            }
          }
        }
      },
      "DeviceDataSource": {
        "type": "object",
        "properties": {
          "alertStatus": {
            "type": "string",
            "readOnly": true
          },
          "autoDiscovery": {
            "type": "boolean",
            "readOnly": true
          },
          "dataSourceDisplayName": {
            "type": "string",
            "readOnly": true
          },
          "deviceId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "deviceName": {
            "type": "string",
            "readOnly": true
          },
          "createdOn": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "collectMethod": {
            "type": "string"
          },
          "dataSourceId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "graphs": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/DeviceDatasourceGraph"
            }
          },
          "sdtAt": {
            "type": "string",
            "readOnly": true
          },
          "nextAutoDiscoveryOn": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "alertStatusPriority": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "alertDisableStatus": {
            "type": "string",
            "readOnly": true
          },
          "dataSourceDescription": {
            "type": "string",
            "readOnly": true
          },
          "overviewGraphs": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/DeviceDatasourceGraph"
            }
          },
          "stopMonitoring": {
            "type": "boolean",
            "readOnly": true
          },
          "assignedOn": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "isMultiple": {
            "type": "boolean",
            "readOnly": true
          },
          "instanceNumber": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "updatedOn": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "sdtStatus": {
            "type": "string",
            "readOnly": true
          },
          "dataSourceName": {
            "type": "string",
            "readOnly": true
          },
          "deviceDisplayName": {
            "type": "string",
            "readOnly": true
          },
          "monitoringInstanceNumber": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "groupsDisabledThisSource": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/TreeNode"
            }
          },
          "groupName": {
            "type": "string",
            "readOnly": true
          },
          "instanceAutoGroupEnabled": {
            "type": "boolean",
            "readOnly": true
          },
          "alertingDisabledOn": {
            "$ref": "#/components/schemas/TreeNode"
          },
          "dataSourceType": {
            "type": "string",
            "readOnly": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        }
      },
      "SaasZoomJsonCollectorAttributeV3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "required": [
              "endpointUrlSuffix"
            ],
            "type": "object",
            "properties": {
              "endpointUrlSuffix": {
                "type": "string"
              },
              "period": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "AwsMediaConnectSourceDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ],
        "x-discriminator-value": "ad_awsmediaconnectsource"
      },
      "AzureStorageServiceLimitsCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object",
            "properties": {
              "period": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "x-discriminator-value": "azurestorageservicelimits"
      },
      "ReportBase": {
        "required": [
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "lastmodifyUserId": {
            "type": "integer",
            "description": "The Id of the user that last modified the report",
            "format": "int32",
            "readOnly": true
          },
          "delivery": {
            "type": "string",
            "description": "Whether or not the report is configured to be delivered via email. Acceptable values are: none, email",
            "example": "email"
          },
          "userPermission": {
            "type": "string",
            "description": "The permissions associated with the user who made the API call",
            "readOnly": true
          },
          "lastGenerateOn": {
            "type": "integer",
            "description": "The time, in epoch format, that the report was last generated",
            "format": "int64",
            "readOnly": true
          },
          "reportLinkNum": {
            "type": "integer",
            "description": "The number of links associated with the report, where each link corresponds to a generated report",
            "format": "int32",
            "readOnly": true
          },
          "groupId": {
            "type": "integer",
            "description": "The Id of the group the report is in, where Id=0 is the root report group",
            "format": "int32"
          },
          "format": {
            "type": "string",
            "description": "The format of the report. Allowable values are: HTML, PDF, CSV, WORD",
            "example": "HTML"
          },
          "description": {
            "type": "string",
            "description": "The description of the report",
            "example": "This is a daily alerts report"
          },
          "lastGenerateSize": {
            "type": "integer",
            "description": "The size of the report, in Bytes, the last time it was generated",
            "format": "int64",
            "readOnly": true
          },
          "customReportTypeId": {
            "type": "integer",
            "description": "The id of the custom report template, if the report is a custom report. An id of 0 indicates that the report is not a custom report",
            "format": "int32",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "description": "The report type. Acceptable values are: Alert,Alert SLA,Alert threshold,Alert trends,Host CPU,Host group inventory,Host inventory,Host metric trends,Interfaces Bandwidth,Netflow device metric,Service Level Agreement,Website Service Overview,Word template,Audit Log,Alert Forecasting,Dashboard,Website SLA,User,Role",
            "example": "Alert"
          },
          "lastGeneratePages": {
            "type": "integer",
            "description": "The number of pages in the report, the last time it was generated",
            "format": "int32",
            "readOnly": true
          },
          "reportLinkExpire": {
            "type": "string",
            "description": "The report link Expire. Allowable values are:High Flexibility,High Security",
            "example": "High Flexibility"
          },
          "schedule": {
            "type": "string",
            "description": "A cron schedule that indicates when the report will be delivered via email",
            "example": "0 7 * * 1"
          },
          "recipients": {
            "type": "array",
            "description": "If the report is configured to be delivered via email, this object provides the recipients that the report will be delivered to",
            "items": {
              "$ref": "#/components/schemas/ReportRecipient"
            }
          },
          "customReportTypeName": {
            "type": "string",
            "description": "The name of the custom report template",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "The name of the report",
            "example": "Daily Alerts Report"
          },
          "enableViewAsOtherUser": {
            "type": "boolean",
            "description": "Whether or not other users are allowed to view the report as the user who last modified the report",
            "readOnly": true
          },
          "lastmodifyUserName": {
            "type": "string",
            "description": "The username of the user that last modified the report",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "description": "The id of the report",
            "format": "int32",
            "readOnly": true
          },
          "scheduleTimezone": {
            "type": "string",
            "description": "The sepecific timezone for the scheduled report",
            "example": "America/Los_Angeles"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "NetflowEndpoint": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NetflowDataBase"
          },
          {
            "type": "object",
            "properties": {
              "lastSeen": {
                "type": "integer",
                "format": "int64",
                "readOnly": true
              },
              "percentUsage": {
                "type": "number",
                "format": "double",
                "readOnly": true
              },
              "IP": {
                "type": "string",
                "readOnly": true
              },
              "usage": {
                "type": "number",
                "format": "double",
                "readOnly": true
              },
              "dns": {
                "type": "string",
                "readOnly": true
              },
              "type": {
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "x-discriminator-value": "endpoint"
      },
      "Device": {
        "required": [
          "displayName",
          "name",
          "preferredCollectorId"
        ],
        "type": "object",
        "properties": {
          "logCollectorGroupId": {
            "type": "integer",
            "description": "The id of the Collector Group associated with the device's log collection",
            "format": "int32",
            "readOnly": true
          },
          "disableAlerting": {
            "type": "boolean",
            "description": "Indicates whether alerting is disabled (true) or enabled (false) for this device",
            "example": true
          },
          "netflowCollectorGroupId": {
            "type": "integer",
            "description": "The id of the Collector Group associated with the device's netflow collector",
            "format": "int32",
            "readOnly": true
          },
          "rolePrivileges": {
            "type": "array",
            "description": "The role privilege operation(s) for this device that are granted to the user who made the API request",
            "readOnly": true,
            "items": {
              "type": "string"
            }
          },
          "systemProperties": {
            "type": "array",
            "description": "Any system properties (aside from system.categories) defined for this device",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/NameAndValue"
            }
          },
          "isPreferredLogCollectorConfigured": {
            "type": "boolean",
            "description": "Indicates whether Preferred Log Collector is configured  (true) or not (false) for the device",
            "example": true
          },
          "hostStatus": {
            "type": "string",
            "description": "The status of this device, where possible statuses are normal, dead and dead-collector",
            "readOnly": true
          },
          "autoBalancedCollectorGroupId": {
            "type": "integer",
            "description": "The Auto Balanced Collector Group id. 0 means not monitored by ABCG",
            "format": "int32"
          },
          "inheritedProperties": {
            "type": "array",
            "description": "Any properties inherit from parents",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/NameAndValue"
            }
          },
          "id": {
            "type": "integer",
            "description": "The Id of the device",
            "format": "int32",
            "readOnly": true
          },
          "syntheticsCollectorIds": {
            "uniqueItems": true,
            "type": "array",
            "description": "The list of ids of the collectors currently monitoring the resource and discovering instances",
            "example": "1,4",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "upTimeInSeconds": {
            "type": "integer",
            "description": "The uptime of the device in seconds. This value will always be the largest value reported by the following datasources:\nHost Uptime-\nSNMPUptime-\nSNMP_Engine_Uptime-\nWinSystemUptime-\nNimbleUptime-",
            "format": "int64",
            "readOnly": true
          },
          "deviceType": {
            "type": "integer",
            "description": "The type of device: 0 indicates a regular device, 1 indicates an APPGROUP device, 2 indicates an AWS device, 3 indicates a service device, 4 indicates an Azure device, 6 indicates a biz_service device, 7 indicates a GCP device, 8 indicates K8S device",
            "format": "int32"
          },
          "currentCollectorId": {
            "type": "integer",
            "description": "The id of the collector currently monitoring the device and discovering instances",
            "format": "int32"
          },
          "netflowCollectorId": {
            "type": "integer",
            "description": "The Id of the netflow collector associated with the device",
            "format": "int32"
          },
          "autoPropsAssignedOn": {
            "type": "integer",
            "description": "The time, in epoch seconds format, that properties were first discovered for this device",
            "format": "int64",
            "readOnly": true
          },
          "updatedOn": {
            "type": "integer",
            "description": "The time, in epoch seconds format, that the device was last updated",
            "format": "int64",
            "readOnly": true
          },
          "preferredCollectorGroupId": {
            "type": "integer",
            "description": "The id of the Collector Group associated with the device's preferred collector",
            "format": "int32",
            "readOnly": true
          },
          "customProperties": {
            "type": "array",
            "description": "Any non-system properties (aside from system.categories) defined for this device",
            "items": {
              "$ref": "#/components/schemas/NameAndValue"
            }
          },
          "collectorDescription": {
            "type": "string",
            "description": "The description/name of the collector for this device",
            "readOnly": true
          },
          "preferredCollectorId": {
            "type": "integer",
            "description": "The Id of the preferred collector assigned to monitor the device",
            "format": "int32"
          },
          "lastRawdataTime": {
            "type": "integer",
            "description": "The last time, in epoch seconds, that raw Netflow data was reported",
            "format": "int64",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "The host name or IP address of the device",
            "example": "Main Collector"
          },
          "deletedTimeInMs": {
            "type": "integer",
            "description": "The time in milliseconds that the device has been dead for, or since the AWS device was filtered out",
            "format": "int64",
            "readOnly": true
          },
          "netflowCollectorGroupName": {
            "type": "string",
            "description": "The name of the Collector Group associated with the device's netflow collector",
            "readOnly": true
          },
          "azureState": {
            "type": "integer",
            "description": "The Azure instance state (if applicable): 1 indicates that the instance is running, 2 indicates that the instance is stopped and 3 the instance is terminated.",
            "format": "int32",
            "readOnly": true
          },
          "relatedDeviceId": {
            "type": "integer",
            "description": "The Id of the AWS EC2 instance related to this device, if one exists in the LogicMonitor account. This value defaults to -1, which indicates that there are no related devices",
            "format": "int32"
          },
          "logCollectorGroupName": {
            "type": "string",
            "description": "The name of the Collector Group associated with the device's.",
            "readOnly": true
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the device",
            "example": "Cisco Router"
          },
          "logCollectorDescription": {
            "type": "string",
            "description": "The description/name of the log collector for this device",
            "readOnly": true
          },
          "link": {
            "type": "string",
            "description": "The URL link associated with the device",
            "example": "www.ciscorouter.com"
          },
          "awsState": {
            "type": "integer",
            "description": "The AWS instance state (if applicable): 1 indicates that the instance is running, 2 indicates that the instance is stopped and 3 the instance is terminated",
            "format": "int32",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "The device description",
            "example": "This is a Cisco Router"
          },
          "createdOn": {
            "type": "integer",
            "description": "The time, in epoch seconds format, that the device was added to your LogicMonitor account",
            "format": "int64",
            "readOnly": true
          },
          "gcpState": {
            "type": "integer",
            "description": "The GCP instance state (if applicable): 1 indicates that the instance is running, 2 indicates that the instance is stopped and 3 the instance is terminated.",
            "format": "int32",
            "readOnly": true
          },
          "autoPropsUpdatedOn": {
            "type": "integer",
            "description": "The time, in epoch seconds, that auto properties last ran and updated the properties table for this device",
            "format": "int64",
            "readOnly": true
          },
          "scanConfigId": {
            "type": "integer",
            "description": "The Id of the netscan configuration which was used to discover this device. 0 indicates that the device was not discovered by a scan",
            "format": "int32",
            "readOnly": true
          },
          "enableNetflow": {
            "type": "boolean",
            "description": "Indicates whether Netflow is enabled (true) or disabled (false) for the device",
            "example": true
          },
          "lastDataTime": {
            "type": "integer",
            "description": "The last time, in epoch seconds, that the device received Netflow data",
            "format": "int64",
            "readOnly": true
          },
          "hostGroupIds": {
            "type": "string",
            "description": "The Id(s) of the groups the device is in, where multiple group ids are comma separated",
            "example": "16,4,3"
          },
          "resourceIds": {
            "type": "array",
            "description": "Any non-system properties (aside from system.categories) defined for this device",
            "items": {
              "$ref": "#/components/schemas/NameAndValue"
            }
          },
          "op": {
            "type": "string",
            "description": "whether to use AND or OR for device matching"
          },
          "currentLogCollectorId": {
            "type": "integer",
            "description": "The id of the Log collector currently collecting logs.",
            "format": "int32"
          },
          "logCollectorId": {
            "type": "integer",
            "description": "The Id of the netflow collector associated with the device",
            "format": "int32"
          },
          "netflowCollectorDescription": {
            "type": "string",
            "description": "The description/name of the netflow collector for this device",
            "readOnly": true
          },
          "userPermission": {
            "type": "string",
            "description": "The read and/or write permissions for this device that are granted to the user who made the API request",
            "readOnly": true
          },
          "preferredCollectorGroupName": {
            "type": "string",
            "description": "The name of the Collector Group associated with the device's preferred collector",
            "readOnly": true
          },
          "autoProperties": {
            "type": "array",
            "description": "Any auto properties assigned to the device",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/NameAndValue"
            }
          },
          "toDeleteTimeInMs": {
            "type": "integer",
            "description": "The number of milliseconds until the device will be automatically deleted from your LogicMonitor account (a value of zero indicates that a future delete time/date has not been scheduled)",
            "format": "int64",
            "readOnly": true
          }
        }
      },
      "DeviceSDTHistoryPaginationResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "searchId": {
            "type": "string",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SDTHistory"
            }
          }
        }
      },
      "Period": {
        "required": [
          "endMinutes",
          "startMinutes",
          "timezone",
          "weekDays"
        ],
        "type": "object",
        "properties": {
          "weekDays": {
            "type": "array",
            "description": "The list of week day of this period",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "timezone": {
            "type": "string",
            "description": "The timezone for this period"
          },
          "startMinutes": {
            "type": "integer",
            "description": "The start minute of this period",
            "format": "int32"
          },
          "endMinutes": {
            "type": "integer",
            "description": "The end minute of this period",
            "format": "int32"
          }
        }
      },
      "RestAzureResourceHealthEventSource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EventSource"
          },
          {
            "type": "object",
            "properties": {
              "schedule": {
                "type": "integer",
                "description": "The polling interval for the EventSource",
                "format": "int32"
              }
            }
          }
        ]
      },
      "ConversationFilter": {
        "type": "object",
        "properties": {
          "fromOperator": {
            "type": "string"
          },
          "fromEndpoint": {
            "type": "string"
          },
          "toEndpoint": {
            "type": "string"
          },
          "toOperator": {
            "type": "string"
          },
          "includeOrExclude": {
            "type": "string"
          }
        }
      },
      "SaasAccountTestResult": {
        "type": "object",
        "properties": {
          "nonPermissionApisErrors": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "invalidStatusUrls": {
            "type": "string"
          },
          "noPermissionService": {
            "type": "string"
          },
          "resultCode": {
            "type": "integer",
            "format": "int32"
          },
          "detailLink": {
            "type": "string"
          },
          "noPermissionApis": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AlertWidget": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Widget"
          },
          {
            "type": "object",
            "properties": {
              "filters": {
                "$ref": "#/components/schemas/AlertFilters"
              },
              "parsedFilters": {
                "$ref": "#/components/schemas/AlertFilters"
              }
            }
          }
        ],
        "x-discriminator-value": "alert"
      },
      "OpenMetricCollectorAttributeV3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object",
            "properties": {
              "headers": {
                "type": "string"
              },
              "followRedirect": {
                "type": "boolean"
              },
              "readTimeout": {
                "type": "integer",
                "format": "int32"
              },
              "connectTimeout": {
                "type": "integer",
                "format": "int32"
              },
              "url": {
                "type": "string"
              }
            }
          }
        ]
      },
      "GoogleMapWidget": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Widget"
          },
          {
            "required": [
              "mapPoints"
            ],
            "type": "object",
            "properties": {
              "ackChecked": {
                "type": "boolean",
                "description": "Whether ACKed alerts should be displayed, the default value is true"
              },
              "displayErrorAlert": {
                "type": "boolean",
                "description": "Whether error alerts should be displayed, the default value is true"
              },
              "displayWarnAlert": {
                "type": "boolean",
                "description": "Whether warning alerts should be displayed, the default value is true"
              },
              "displayCriticalAlert": {
                "type": "boolean",
                "description": "Whether critical alerts should be displayed, the default value is true"
              },
              "sdtChecked": {
                "type": "boolean",
                "description": "Whether alerts occuring during an SDT period should be displayed, the default value is true"
              },
              "mapPoints": {
                "type": "array",
                "description": "The points info",
                "items": {
                  "$ref": "#/components/schemas/PointSource"
                }
              }
            }
          }
        ],
        "x-discriminator-value": "gmap"
      },
      "FlashWidget": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Widget"
          },
          {
            "required": [
              "url"
            ],
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "height": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "x-discriminator-value": "flash"
      },
      "AzureCostManagementCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object"
          }
        ]
      },
      "UpdateReason": {
        "type": "object",
        "properties": {
          "timeEpoch": {
            "type": "integer",
            "description": "Update date epoch",
            "format": "int64",
            "readOnly": true
          },
          "clientIp": {
            "type": "string",
            "description": "Client IP from which this update has been made",
            "readOnly": true
          },
          "updateReason": {
            "type": "string",
            "description": "Update reason"
          },
          "timeStr": {
            "type": "string",
            "description": "Update date in form 'YYYY-MM-DD HH:MM:SS'",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "description": "ID of update reason",
            "format": "int32",
            "readOnly": true
          },
          "userName": {
            "type": "string",
            "description": "User who made this update"
          }
        }
      },
      "NetflowDeviceInfo": {
        "type": "object",
        "properties": {
          "deleted": {
            "type": "boolean"
          },
          "displayName": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "PointSource": {
        "required": [
          "deviceGroupFullPath"
        ],
        "type": "object",
        "properties": {
          "hasLocation": {
            "type": "boolean",
            "description": "Whether or not the specified group or device has a location property defined",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "description": "Whether or not the mapPoint represents a device or a group"
          },
          "deviceGroupFullPath": {
            "type": "string",
            "description": "The full path of the device group associated with the map point. This may be the group the map point represents, or the group of the device that the map point represents"
          },
          "deviceDisplayName": {
            "type": "string",
            "description": "The display name of the device the map point represents (if type=device). This field supports Glob (*)"
          }
        }
      },
      "DashboardGroup": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "template": {
            "type": "object",
            "properties": {},
            "description": "The template which is used for importing dashboard group"
          },
          "fullPath": {
            "type": "string",
            "description": "The full path of the dashboard group",
            "readOnly": true
          },
          "userPermission": {
            "type": "string",
            "description": "The permission of the user that made the API call",
            "readOnly": true
          },
          "widgetTokens": {
            "type": "array",
            "description": "The tokens assigned at the group level",
            "items": {
              "$ref": "#/components/schemas/WidgetToken"
            }
          },
          "name": {
            "type": "string",
            "description": "The name of the dashboard group",
            "example": "LogicMonitor Dashboards"
          },
          "numOfDirectSubGroups": {
            "type": "integer",
            "description": "The number of groups directly under the Dashboard Group",
            "format": "int64",
            "readOnly": true
          },
          "numOfDashboards": {
            "type": "integer",
            "description": "The number of dashboards that belong to the Dashboard Group and any sub-groups",
            "format": "int64",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "This is a description of the dashboard group",
            "example": "Servers in LA DataCenter"
          },
          "id": {
            "type": "integer",
            "description": "The Id of the dashboard group ",
            "format": "int32",
            "readOnly": true
          },
          "dashboards": {
            "type": "array",
            "description": "The dashboards that belong to the group",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/DashboardData"
            }
          },
          "parentId": {
            "type": "integer",
            "description": "The Id of the parent dashboard group",
            "format": "int32"
          },
          "numOfDirectDashboards": {
            "type": "integer",
            "description": "The number of dashboards that belong directly to the Dashboard Group",
            "format": "int64",
            "readOnly": true
          }
        }
      },
      "Macro": {
        "required": [
          "value",
          "variable"
        ],
        "type": "object",
        "properties": {
          "variable": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "BigNumberWidget": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Widget"
          },
          {
            "required": [
              "bigNumberInfo"
            ],
            "type": "object",
            "properties": {
              "bigNumberInfo": {
                "$ref": "#/components/schemas/BigNumberInfo"
              }
            }
          }
        ],
        "x-discriminator-value": "bignumber"
      },
      "restCloudOkPermissionsV3": {
        "type": "object"
      },
      "WebsiteSLAReport": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReportBase"
          },
          {
            "required": [
              "metrics"
            ],
            "type": "object",
            "properties": {
              "dateRange": {
                "type": "string"
              },
              "timezone": {
                "type": "string"
              },
              "dayInOneWeek": {
                "type": "string"
              },
              "periodInOneDay": {
                "type": "string"
              },
              "metrics": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SlaMetric"
                }
              }
            }
          }
        ],
        "x-discriminator-value": "website sla"
      },
      "DevicePaginationResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "searchId": {
            "type": "string",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Device"
            }
          }
        }
      },
      "UserReport": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReportBase"
          },
          {
            "type": "object",
            "properties": {
              "sortedBy": {
                "type": "string",
                "description": "The sort by method"
              },
              "columns": {
                "type": "array",
                "description": "The columns displayed in the report",
                "items": {
                  "$ref": "#/components/schemas/DynamicColumn"
                }
              },
              "userFilter": {
                "$ref": "#/components/schemas/UserFilter"
              }
            }
          }
        ],
        "x-discriminator-value": "user"
      },
      "AzureActiveDirectoryAppSecretCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object"
          }
        ]
      },
      "DeviceGroupPaginationResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "searchId": {
            "type": "string",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeviceGroup"
            }
          }
        }
      },
      "AccessGroup": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "createdBy": {
            "type": "string",
            "description": "User who created access group",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "The name of the access group",
            "example": "LinuxGroup"
          },
          "tenantId": {
            "type": "string",
            "description": "Tenancy details"
          },
          "description": {
            "type": "string",
            "description": "Description about access group"
          },
          "id": {
            "type": "integer",
            "description": "The id of the access group",
            "format": "int32",
            "readOnly": true
          },
          "updatedOn": {
            "type": "integer",
            "description": "Time when access group updated",
            "format": "int64",
            "readOnly": true
          },
          "createdOn": {
            "type": "integer",
            "description": "Time when access group created",
            "format": "int64",
            "readOnly": true
          }
        }
      },
      "AwsRdsServiceLimitsCollectorAttributeV3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object",
            "properties": {
              "period": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "Collector": {
        "type": "object",
        "properties": {
          "userChangeOn": {
            "type": "integer",
            "description": "The last time the Collector was updated, in epoch format",
            "format": "int64",
            "readOnly": true
          },
          "confVersion": {
            "type": "string",
            "description": "The version of the agent.conf configuration file",
            "readOnly": true
          },
          "downloadUrl": {
            "type": "string",
            "description": "Download Url",
            "readOnly": true
          },
          "updatedOnLocal": {
            "type": "string",
            "description": "The time that the Collector was last updated, in local time format",
            "readOnly": true
          },
          "collectorType": {
            "type": "string",
            "description": "Collector type",
            "readOnly": true,
            "example": "external"
          },
          "encodedConfigData": {
            "type": "string",
            "description": "Base 64 encoded config data",
            "readOnly": true
          },
          "hostname": {
            "type": "string",
            "description": "The hostname of the device the Collector is installed on",
            "readOnly": true
          },
          "numberOfInstances": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "description": "The id of the Collector",
            "format": "int32",
            "readOnly": true
          },
          "ea": {
            "type": "boolean",
            "description": "Whether the collector is in EA version",
            "readOnly": true
          },
          "watchdogUpdatedOnLocal": {
            "type": "string",
            "description": "The time that the Collector Watchdog was last updated, in local time format",
            "readOnly": true
          },
          "hasFailOverDevice": {
            "type": "boolean",
            "description": "Whether the collector has failover devices",
            "readOnly": true
          },
          "collectorGroupName": {
            "type": "string",
            "description": "The name of the group the Collector is in",
            "readOnly": true
          },
          "netscanVersion": {
            "type": "string",
            "description": "The Netscan version associated with the Collector",
            "readOnly": true
          },
          "inSDT": {
            "type": "boolean",
            "description": "The SDT status of the collector",
            "readOnly": true
          },
          "isEncoded": {
            "type": "boolean",
            "readOnly": true
          },
          "format": {
            "type": "string",
            "description": "External collector installation format",
            "readOnly": true
          },
          "updatedOn": {
            "type": "integer",
            "description": "The time that the Collector was last updated, in epoch format",
            "format": "int64",
            "readOnly": true
          },
          "automaticUpgradeInfo": {
            "$ref": "#/components/schemas/AutomaticUpgradeInfo"
          },
          "numberOfHosts": {
            "type": "integer",
            "description": "The number of devices monitored by the Collector",
            "format": "int32",
            "readOnly": true
          },
          "collectorConf": {
            "type": "string",
            "description": "The Collector's configuration file",
            "readOnly": true
          },
          "sbproxyConf": {
            "type": "string",
            "description": "The Proxy's configuration",
            "readOnly": true
          },
          "agentConfFields": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "This is key value pairs of collector config properties",
            "readOnly": true
          },
          "userVisibleWebsitesNum": {
            "type": "integer",
            "description": "The number of websites monitored by the Collector and visible to the user that made the query",
            "format": "int32",
            "readOnly": true
          },
          "lastSentNotificationOnLocal": {
            "type": "string",
            "description": "The time that a notification was last sent for this Collector, in local time format",
            "readOnly": true
          },
          "customProperties": {
            "type": "array",
            "description": "The custom properties defined for the Collector",
            "items": {
              "$ref": "#/components/schemas/NameAndValue"
            }
          },
          "predefinedConfig": {
            "type": "object",
            "properties": {},
            "description": "Collector configurations",
            "readOnly": true
          },
          "onetimeUpgradeInfo": {
            "$ref": "#/components/schemas/OnetimeUpgradeInfo"
          },
          "wrapperConf": {
            "type": "string",
            "description": "The java service wrapper's configuration",
            "readOnly": true
          },
          "clearSent": {
            "type": "boolean",
            "description": "Whether or not an alert clear notifcation has been sent for this Collector",
            "readOnly": true
          },
          "isLmlogsSyslogEnabled": {
            "type": "boolean",
            "description": "Whether collector has isLmlogsSyslogEnabled flag set as true",
            "readOnly": true
          },
          "status": {
            "type": "integer",
            "description": "The registration status of the Collector. Acceptable values are: 0= unregistered, 1= registered, 2= stopped, 3= suspended",
            "format": "int32",
            "readOnly": true
          },
          "backupAgentId": {
            "type": "integer",
            "description": "The Id of the backup Collector assigned to the Collector",
            "format": "int32"
          },
          "specifiedCollectorDeviceGroupId": {
            "type": "integer",
            "description": "The device group id when create a new collector device",
            "format": "int32"
          },
          "escalatingChainId": {
            "type": "integer",
            "description": "The Id of the escalation chain associated with this Collector",
            "format": "int32"
          },
          "collectorSize": {
            "type": "string",
            "description": "The size of the collector",
            "readOnly": true
          },
          "ackedOnLocal": {
            "type": "string",
            "description": "The time that the Collector was acknowledged (if it is in alert), in local time format",
            "readOnly": true
          },
          "watchdogConf": {
            "type": "string",
            "description": "The Watchdog's configuration",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "The Collector's description",
            "example": "Linux Collector"
          },
          "createdOn": {
            "type": "integer",
            "description": "The time that the Collector was created, in epoch format",
            "format": "int64",
            "readOnly": true
          },
          "platform": {
            "type": "string",
            "description": "The OS of the Collector device (e.g. Linux, Windows)",
            "readOnly": true
          },
          "isDown": {
            "type": "boolean",
            "description": "Whether or not the Collector is currently down",
            "readOnly": true
          },
          "userVisibleHostsNum": {
            "type": "integer",
            "description": "The number of devices monitored by the Collector and visible to the user that made the query",
            "format": "int32",
            "readOnly": true
          },
          "canDowngrade": {
            "type": "boolean",
            "description": "Whether the collector can be downgraded to a lower version",
            "readOnly": true
          },
          "ackComment": {
            "type": "string",
            "description": "The comment associated with the Collector acknowledgement (if it is in alert and acknowledged)",
            "readOnly": true
          },
          "nextUpgradeInfo": {
            "$ref": "#/components/schemas/NextUpgradeInfo"
          },
          "enableLMLogs": {
            "type": "boolean",
            "description": "Usage of the Otel Collector - logging or tracing",
            "readOnly": true
          },
          "suppressAlertClear": {
            "type": "boolean",
            "description": "Whether alert clear notifications are suppressed for the Collector",
            "example": true
          },
          "nextRecipient": {
            "type": "integer",
            "description": "The Id of the next recipient to which alert notifications will be sent",
            "format": "int32",
            "readOnly": true
          },
          "ackedOn": {
            "type": "integer",
            "description": "The epoch at which the Collector was acknowledged (if it is in alert)",
            "format": "int64",
            "readOnly": true
          },
          "userChangeOnLocal": {
            "type": "string",
            "description": "The last time the Collector was updated, in the account time zone",
            "readOnly": true
          },
          "numberOfWebsites": {
            "type": "integer",
            "description": "The number of websites monitored by the Collector",
            "format": "int32",
            "readOnly": true
          },
          "collectorDeviceId": {
            "type": "integer",
            "description": "The device id of the collector device",
            "format": "int32",
            "readOnly": true
          },
          "ackedBy": {
            "type": "string",
            "description": "The user that acknowledged the Collector (if it is in alert)",
            "readOnly": true
          },
          "userPermission": {
            "type": "string",
            "description": "The permission level of the user that made the API request to get Collector information",
            "readOnly": true
          },
          "needAutoCreateCollectorDevice": {
            "type": "boolean",
            "description": "Whether to create a collector device when instance collector, the default value is true",
            "example": true
          },
          "watchdogUpdatedOn": {
            "type": "integer",
            "description": "The time that the Watchdog Services was last updated, in epoch format",
            "format": "int64",
            "readOnly": true
          },
          "canDowngradeReason": {
            "type": "string",
            "description": "The reason why the collector can be downgraded",
            "readOnly": true
          },
          "lastSentNotificationOn": {
            "type": "integer",
            "description": "The time, in epoch format, that a notification was last sent for the Collector",
            "format": "int64",
            "readOnly": true
          },
          "syntheticsEnabled": {
            "type": "boolean",
            "description": "Whether the collector can monitor Synthetic devices (Selenium grid property must be defined)",
            "readOnly": true
          },
          "acked": {
            "type": "boolean",
            "description": "Whether or not the Collector is currently acknowledged",
            "readOnly": true
          },
          "onetimeDowngradeInfo": {
            "$ref": "#/components/schemas/OnetimeUpgradeInfo"
          },
          "websiteConf": {
            "type": "string",
            "description": "Whether or not the device the Collector is installed on is enabled for fail over",
            "readOnly": true
          },
          "copyUrl": {
            "type": "string",
            "description": "Copy Command Url",
            "readOnly": true
          },
          "upTime": {
            "type": "integer",
            "description": "The time the Collector has been up, in seconds",
            "format": "int64",
            "readOnly": true
          },
          "otelVersion": {
            "type": "string",
            "description": "Collector Version",
            "readOnly": true
          },
          "bearerToken": {
            "type": "string",
            "description": "Bearer Token",
            "readOnly": true
          },
          "build": {
            "type": "string",
            "description": "The Collector version",
            "readOnly": true
          },
          "previousVersion": {
            "type": "string",
            "description": "The previous version of the collector, used for downgrading",
            "readOnly": true
          },
          "collectorGroupId": {
            "type": "integer",
            "description": "The Id of the group the Collector is in",
            "format": "int32"
          },
          "createdOnLocal": {
            "type": "string",
            "description": "The time that the Collector was created, in local time format",
            "readOnly": true
          },
          "enableFailBack": {
            "type": "boolean",
            "description": "Whether or not automatic failback is enabled for the Collector, the default value is true",
            "example": true
          },
          "resendIval": {
            "type": "integer",
            "description": "The interval, in minutes, after which alert notifications for the Collector will be resent",
            "format": "int32"
          },
          "arch": {
            "type": "string",
            "description": "The collector architecture (Windows | Linux platform followed by 32 | 64 bit)",
            "readOnly": true
          },
          "otelId": {
            "type": "string",
            "description": "Collector Id",
            "readOnly": true
          },
          "enableFailOverOnCollectorDevice": {
            "type": "boolean",
            "description": "Whether or not the device the Collector is installed on is enabled for fail over",
            "example": true
          },
          "config": {
            "type": "string",
            "description": "Collector Config",
            "readOnly": true
          }
        }
      },
      "AwsSesServiceLimitsCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object",
            "properties": {
              "period": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "x-discriminator-value": "awssesservicelimits"
      },
      "AzureInsightsCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "type": "object",
            "properties": {
              "period": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "x-discriminator-value": "azureinsights"
      },
      "AzureEmergingIssueEventSource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EventSource"
          },
          {
            "type": "object",
            "properties": {
              "schedule": {
                "type": "integer",
                "description": "The polling interval for the EventSource",
                "format": "int32"
              }
            }
          }
        ]
      },
      "AutoDiscoveryMethod": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The auto discovery method name. \nThe values can be ad_cim|ad_cloudwatch|ad_collector|ad_dummy|ad_ec2|ad_esx|ad_http|ad_ipmi|ad_jdbc|ad_jmx|ad_netapp|ad_pdh|ad_port|ad_script|ad_snmp|ad_wmi|ad_xen|ad_azurerediscache|ad_awsserviceregion|ad_awsec2reservedinstance|ad_awsec2reservedinstancecoverage|ad_awsecsservice|ad_awsec2scheduledevents|ad_azureserviceregion|ad_azuresubscription|ad_azurebackupjob|ad_azuresdk|ad_azurewebjob|ad_awsbillingreport|ad_awselasticache|ad_awsredshift|ad_azurebilling|ad_awslbtargetgroups|ad_gcpappengine|ad_gcpbilling|ad_awsvpntunnel|ad_gcpvpntunnel|ad_awsglobalwebacl|ad_gcplbbackendservice|ad_gcppubsubsubscription|ad_gcppubsubsnapshot|ad_azurereplicationjob|ad_azureexpressroutecircuitpeering|ad_awsapigatewaystage|ad_azureautomationaccountcertificate|ad_azurevngconnection|ad_azurewebappinstance|ad_azureappserviceenvironmentmultirolepool|ad_openmetrics|ad_awsmediaconnectoutput|ad_awsmediaconnectsource|ad_awswebaclwafv2|ad_saaso365sharepointsite|ad_awscognitoidentityproviders|ad_azureeabilling|ad_saaszoomplanusage|ad_saasstatus|ad_azuresynapse|ad_saasairbrake|ad_syntheticsselenium|ad_azurevirtualdesktopsessionhosts|ad_saaso365subscribedsku|ad_azuredimension|ad_azurecostmanagementdimensions|ad_saaso365servicehealth|ad_saaso365mailbox|ad_azurenetappvolumes|ad_azureloganalyticsworkspaces|ad_saaszoomstatus|ad_saassalesforcelicense|ad_saaszoomroom|ad_saaswebexlicenseusage|ad_azureloganalyticsreplicationjob|ad_paasjsonpath|ad_awsrabbitmqqueue|ad_awssagemakerendpointvariant|ad_awsroute53resolveripaddress"
          }
        },
        "discriminator": {
          "propertyName": "name"
        }
      },
      "DeviceEventSourceSDT": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SDT"
          },
          {
            "type": "object",
            "properties": {
              "eventSourceName": {
                "type": "string",
                "description": "The name of the eventsource that the SDT will apply to"
              },
              "deviceEventSourceId": {
                "type": "integer",
                "description": "The id of the device eventsource that the SDT will be associated with",
                "format": "int32"
              },
              "deviceId": {
                "type": "integer",
                "description": "The id of the device associated with the eventsource that the SDT will apply to",
                "format": "int32"
              },
              "deviceDisplayName": {
                "type": "string",
                "description": "The display name of the device associated with the eventsource that the SDT will apply to"
              }
            }
          }
        ],
        "x-discriminator-value": "deviceeventsourcesdt"
      },
      "DeviceDataSourceSDT": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SDT"
          },
          {
            "type": "object",
            "properties": {
              "deviceDataSourceId": {
                "type": "integer",
                "description": "The id of the device datasource that the SDT will be associated with",
                "format": "int32"
              },
              "deviceId": {
                "type": "integer",
                "description": "The id of the device associated with the datasource that the SDT will apply to",
                "format": "int32"
              },
              "deviceDisplayName": {
                "type": "string",
                "description": "The display name of the device associated with the datasource that the SDT will apply to"
              },
              "dataSourceName": {
                "type": "string",
                "description": "The name of the datasource that the SDT will apply to"
              }
            }
          }
        ],
        "x-discriminator-value": "devicedatasourcesdt"
      },
      "InterfBandwidthReport": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReportBase"
          },
          {
            "required": [
              "isBase1024",
              "metrics",
              "top10Only"
            ],
            "type": "object",
            "properties": {
              "hostsValType": {
                "type": "string",
                "description": "host | group. The type of entities specified in the hostsVal field"
              },
              "dateRange": {
                "type": "string",
                "description": "The Time Range configured for the report. Last 2 hours | Last 24 hours | Last calendar day | Last 7 days | Last 14 days | Last 30 days | Last calendar month | Last 365 days | Any custom date range in this format: YYYY-MM-dd hh:mm TO YYYY-MM-dd hh:mm"
              },
              "hostsVal": {
                "type": "string",
                "description": "The devices OR groups selected for the report, where multiple entities are separated by commas"
              },
              "isBase1024": {
                "type": "boolean",
                "description": "true | false\nfalse: Scale the number using 1000 \ntrue: Scale the number using 1024"
              },
              "top10Only": {
                "type": "boolean",
                "description": "true | false\nfalse: Metrics will be displayed for all selected devices or groups\ntrue: Metrics will only be displayed for the top ten device or groups"
              },
              "rowFormat": {
                "type": "integer",
                "description": "0 | 1\n0: Text only - metrics will be displayed in a tabular format.\n1: One graph per instance - metrics will be displayed in a tabular format and one graph will be displayed per instance",
                "format": "int32"
              },
              "metrics": {
                "type": "array",
                "description": "The datapoint or calculation on a datapoint that will be included in the report, where each datapoint/calculation is specified by three fields: dataSourceId, instances (glob is okay)",
                "items": {
                  "$ref": "#/components/schemas/Metric"
                }
              }
            }
          }
        ],
        "x-discriminator-value": "interfaces bandwidth"
      },
      "AzureRssEventSource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EventSource"
          },
          {
            "type": "object",
            "properties": {
              "schedule": {
                "type": "integer",
                "description": "The polling interval for the EventSource",
                "format": "int32"
              }
            }
          }
        ],
        "x-discriminator-value": "azurerss"
      },
      "BigNumberWidgetData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WidgetData"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/BigNumberData"
                }
              }
            }
          }
        ],
        "x-discriminator-value": "bignumber"
      },
      "EC2AutoDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "required": [
              "accessKeyId",
              "secretAccessKey"
            ],
            "type": "object",
            "properties": {
              "secretAccessKey": {
                "type": "string"
              },
              "accessKeyId": {
                "type": "string"
              }
            }
          }
        ],
        "x-discriminator-value": "ad_ec2"
      },
      "BigNumberItem": {
        "required": [
          "dataPointName",
          "useCommaSeparators"
        ],
        "type": "object",
        "properties": {
          "dataPointName": {
            "type": "string"
          },
          "useCommaSeparators": {
            "type": "boolean"
          },
          "bottomLabel": {
            "type": "string"
          },
          "rounding": {
            "type": "integer",
            "format": "int32"
          },
          "position": {
            "type": "integer",
            "format": "int32"
          },
          "rightLabel": {
            "type": "string"
          },
          "colorThresholds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ColorThreshold"
            }
          }
        }
      },
      "WebsiteGroupData": {
        "required": [
          "websiteGroupName",
          "websiteName"
        ],
        "type": "object",
        "properties": {
          "websiteName": {
            "type": "string",
            "description": "The name of the website status should be displayed"
          },
          "websiteGroupName": {
            "type": "string",
            "description": "The name of the group for which member website status should be displayed"
          }
        }
      },
      "DeviceDataSourceInstanceAlertSetting": {
        "type": "object",
        "properties": {
          "globalAlertExpr": {
            "type": "string",
            "description": "The global alert expression for this datapoint",
            "readOnly": true
          },
          "parentInstanceGroupAlertExpr": {
            "$ref": "#/components/schemas/InstanceGroupAlertThresholdInfo"
          },
          "alertForNoData": {
            "type": "integer",
            "description": "alert for no data (no alert-1, warning-2, error-3, critical-4)",
            "format": "int32"
          },
          "postProcessorParam": {
            "type": "string",
            "description": "The post processor parameter for complex DataPoint and instance level configCheck threshold."
          },
          "disableAlerting": {
            "type": "boolean",
            "description": "Whether or not alerting will be disabled for the datapoint",
            "example": true
          },
          "globalAlertTransitionInterval": {
            "type": "integer",
            "description": "The count that the alert must exist for this many poll cycles before it will be triggered",
            "format": "int32",
            "readOnly": true
          },
          "dataPointDescription": {
            "type": "string",
            "description": "The description of the datapoint the alert settings apply to",
            "readOnly": true
          },
          "globalEnableAnomalyAlertGeneration": {
            "type": "string",
            "description": "The global enable anomaly alert generation",
            "readOnly": true
          },
          "enableAnomalyAlertGeneration": {
            "type": "string",
            "description": "enable anomaly alert generation",
            "readOnly": true
          },
          "disableDpAlertHostGroups": {
            "type": "string",
            "description": "The group full path lists who disable alert for this datapoint on devicegroup level",
            "readOnly": true
          },
          "dataPointName": {
            "type": "string",
            "description": "The name of the datapoint the alert settings apply to",
            "readOnly": true
          },
          "dataPointId": {
            "type": "integer",
            "description": "The id of the Datapoint alert settings apply to",
            "format": "int32",
            "readOnly": true
          },
          "globalEnableAnomalyAlertSuppression": {
            "type": "string",
            "description": "The global enable anomaly alert suppression",
            "readOnly": true
          },
          "deviceGroupId": {
            "type": "integer",
            "description": "The ID of the device group",
            "format": "int32",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "description": "The id of this alert setting",
            "format": "int32",
            "readOnly": true
          },
          "globalAlertClearTransitionInterval": {
            "type": "integer",
            "description": "The count that the alert must exist for this many poll cycles before the alert will be cleared",
            "format": "int32",
            "readOnly": true
          },
          "parentResourceDataSourceAlertExpr": {
            "$ref": "#/components/schemas/ResourceDataSourceAlertThresholdInfo"
          },
          "deviceGroupFullPath": {
            "type": "string",
            "description": "The full path of the device group",
            "readOnly": true
          },
          "alertTransitionInterval": {
            "type": "integer",
            "description": "The polling interval of alert transition (0-60)",
            "format": "int32"
          },
          "globalAlertForNoData": {
            "type": "integer",
            "description": "The triggered alert level if we cannot collect data for this datapoint",
            "format": "int32",
            "readOnly": true
          },
          "enableAnomalyAlertSuppression": {
            "type": "string",
            "description": "enable anomaly alert suppression",
            "readOnly": true
          },
          "alertClearInterval": {
            "type": "integer",
            "description": "The polling interval of alert clear transition (0-60)",
            "format": "int32"
          },
          "criticalAdAdvSetting": {
            "type": "string"
          },
          "alertExprNote": {
            "type": "string",
            "description": "The note associated with the current alert threshold settings",
            "example": "Router 1 Ping Check"
          },
          "adAdvSettingEnabled": {
            "type": "boolean"
          },
          "errorAdAdvSetting": {
            "type": "string"
          },
          "dataSourceInstanceId": {
            "type": "integer",
            "description": "The id of the DataSource instance alert settings apply to",
            "format": "int32",
            "readOnly": true
          },
          "warnAdAdvSetting": {
            "type": "string"
          },
          "globalPostProcessorParam": {
            "type": "string",
            "description": "The post processor parameters for complex DataPoints and global level configCheck threshold."
          },
          "parentDeviceGroupAlertExprList": {
            "type": "array",
            "description": "Device group alert expression list base on the priority. The first is the highest priority and effected on this instance",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/DeviceGroupAlertThresholdInfo"
            }
          },
          "alertingDisabledOn": {
            "type": "string",
            "description": "The datapoint is effected alert disabled by which group",
            "readOnly": true
          },
          "dataSourceInstanceAlias": {
            "type": "string",
            "description": "The alias (name) of the DataSource instance the alert settings apply to",
            "readOnly": true
          },
          "collectionInterval": {
            "type": "integer",
            "description": "Collection Interval",
            "format": "int64",
            "readOnly": true
          },
          "alertExpr": {
            "type": "string",
            "description": "The thresholds that should be associated with the datapoint. Note that you need to have a space between the operator and each threshold (e.g. > 1 2 3)",
            "example": ">= 70 90 95"
          }
        }
      },
      "RestAwsOrganizationalHealthEventSource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EventSource"
          },
          {
            "type": "object",
            "properties": {
              "schedule": {
                "type": "integer",
                "description": "The polling interval for the EventSource",
                "format": "int32"
              }
            }
          }
        ]
      },
      "FlowRecordPaginationResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "searchId": {
            "type": "string",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NetFlowRecord"
            }
          }
        }
      },
      "LinkedWmiClass": {
        "required": [
          "anchorClassWMIProperty",
          "linkedWmiClass"
        ],
        "type": "object",
        "properties": {
          "anchorClassWMIProperty": {
            "type": "string"
          },
          "linkedWmiClass": {
            "type": "string"
          },
          "match": {
            "$ref": "#/components/schemas/PropertyMatchRule"
          },
          "myLinkWMIProperty": {
            "type": "string"
          },
          "ILP": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ILP"
            }
          }
        }
      },
      "RabbitMQQueueAutoDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "required": [
              "clusterDimension",
              "namespace",
              "nodeDimension"
            ],
            "type": "object",
            "properties": {
              "clusterDimension": {
                "type": "string"
              },
              "period": {
                "type": "string"
              },
              "metricName": {
                "type": "string"
              },
              "nodeDimension": {
                "type": "string"
              },
              "namespace": {
                "type": "string"
              },
              "clusterDimensionValue": {
                "type": "string"
              }
            }
          }
        ]
      },
      "PaaSJsonPathDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "required": [
              "instancePath",
              "resourceUrl",
              "valueAttribute"
            ],
            "type": "object",
            "properties": {
              "valueAttribute": {
                "type": "string"
              },
              "aliasAttribute": {
                "type": "string"
              },
              "descriptionAttribute": {
                "type": "string"
              },
              "resourceUrl": {
                "type": "string"
              },
              "propertyAttributes": {
                "type": "string"
              },
              "value2Attribute": {
                "type": "string"
              },
              "instancePath": {
                "type": "string"
              }
            }
          }
        ]
      },
      "HtmlWidget": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Widget"
          },
          {
            "required": [
              "resources"
            ],
            "type": "object",
            "properties": {
              "isCustom": {
                "type": "boolean"
              },
              "resources": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/WebResource"
                }
              }
            }
          }
        ],
        "x-discriminator-value": "html"
      },
      "LogsInfo": {
        "required": [
          "aggregateType",
          "logsDataType"
        ],
        "type": "object",
        "properties": {
          "logsDataType": {
            "type": "string",
            "description": "The logsDataType included in the widget. Note that a logsDataType must be referenced in the logsInfo object in order to be displayed"
          },
          "query": {
            "type": "string",
            "description": "The query is used for saving the logs query expression"
          },
          "widgetView": {
            "type": "string",
            "description": "The widgetView included in the widget. Note that a widgetView must be referenced in the logsInfo object in order to be displayed"
          },
          "aggregateType": {
            "type": "string",
            "description": "The field is used for saving the widget aggregateType"
          }
        }
      },
      "WebsiteGroupSDT": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SDT"
          },
          {
            "required": [
              "websiteGroupId"
            ],
            "type": "object",
            "properties": {
              "websiteGroupId": {
                "type": "integer",
                "description": "The Id of the service group that the SDT applies to",
                "format": "int32"
              },
              "websiteGroupName": {
                "type": "string",
                "description": "The name of the service group that the SDT applies to",
                "readOnly": true
              }
            }
          }
        ],
        "x-discriminator-value": "websitegroupsdt"
      },
      "AzureVMBackupStatusLogAnalyticsCollectorAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectorAttribute"
          },
          {
            "required": [
              "period"
            ],
            "type": "object",
            "properties": {
              "period": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "SaasAirbrakeDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ]
      },
      "Privilege": {
        "required": [
          "objectId",
          "objectType",
          "operation"
        ],
        "type": "object",
        "properties": {
          "objectName": {
            "type": "string",
            "description": "The privilege object name",
            "readOnly": true
          },
          "subOperation": {
            "type": "string",
            "description": "The highest privilege operation on its children operations",
            "readOnly": true
          },
          "operation": {
            "type": "string",
            "description": "The privilege operation",
            "example": "write"
          },
          "objectId": {
            "type": "string",
            "description": "The privilege object identifier",
            "example": "123"
          },
          "objectType": {
            "type": "string",
            "description": "The privilege object type. The values can be dashboard_group|dashboard|host_group|service_group|website_group|report_group|remoteSession|chat|setting|device_dashboard|help|logs|configNeedDeviceManagePermission|map|resourceMapTab|tracesManageTab|costOptimization|dexda|lmSupportAccess",
            "example": "dashboard group"
          }
        }
      },
      "PieChartItem": {
        "required": [
          "dataPointName",
          "legend"
        ],
        "type": "object",
        "properties": {
          "dataPointName": {
            "type": "string"
          },
          "color": {
            "type": "string"
          },
          "legend": {
            "type": "string"
          }
        }
      },
      "AwsRoute53ResolverIPAddressDiscoveryMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoDiscoveryMethod"
          },
          {
            "type": "object"
          }
        ]
      }
    },
    "securitySchemes": {
      "BearerToken": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  },
  "x-original-swagger-version": "2.0"
}