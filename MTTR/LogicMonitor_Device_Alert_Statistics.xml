<?xml version="1.0" encoding="UTF-8" ?>
<feed  version="1.0" hasPendingRequests="false" >
  <company></company>
  <status>200</status>
  <errmsg>OK</errmsg>
  <interval>0</interval>
    <entry type="predatasource">
        <version>1688099246</version>
        <name>LogicMonitor_Device_Alert_Statistics</name>
        <displayedas>LogicMonitor Device Alert Statistics</displayedas>
        <description>Tracks MTTR average over a rolling period of time.</description>
        <collector>batchscript</collector>
        <hasMultiInstances>true</hasMultiInstances>
        <useWildValueAsUniqueIdentifier>true</useWildValueAsUniqueIdentifier>
        <schedule>900</schedule>
        <appliesTo>hasCategory(&#34;LogicMonitorPortal&#34;)</appliesTo>
        <wildcardauto>true</wildcardauto>
        <wildcardpersist>false</wildcardpersist>
        <wildcardlinuxscript>ad_script</wildcardlinuxscript>
        <wildcardlinuxcmdline>type=&#34;embeded&#34; </wildcardlinuxcmdline>
        <wildcardwinscript>ad_script</wildcardwinscript>
        <wildcardwincmdline>type=&#34;embeded&#34; </wildcardwincmdline>
        <wildcardgroovyscript>/*******************************************************************************
 * © 2007-2023 - LogicMonitor, Inc. All rights reserved.
 ******************************************************************************/

import groovy.json.JsonSlurper
import com.santaba.agent.util.Settings
import com.santaba.agent.live.LiveHostSet
import org.apache.commons.codec.binary.Hex
import javax.crypto.Mac
import javax.crypto.spec.SecretKeySpec
import java.security.MessageDigest
import groovy.json.*

String apiId   = hostProps.get(&#34;lmaccess.id&#34;)  ?: hostProps.get(&#34;logicmonitor.access.id&#34;)
String apiKey  = hostProps.get(&#34;lmaccess.key&#34;) ?: hostProps.get(&#34;logicmonitor.access.key&#34;)
def portalName = hostProps.get(&#34;lmaccount&#34;)    ?: Settings.getSetting(Settings.AGENT_COMPANY)

Map proxyInfo  = getProxyInfo()
def scriptCache
def cacheTimeout = 3600 // 1 hour, same as our AD discovery

def fields = &#34;id,name,displayName&#34;
def sort = &#34;displayName&#34;
def devices

try {
    scriptCache = this.class.classLoader.loadClass(&#34;com.santaba.agent.util.script.ScriptCache&#34;).getCache();
    //scriptCache.remove(&#34;DeviceAlertStats-ResourceCache&#34;)
    String resourceCache = scriptCache.get(&#34;DeviceAlertStats-ResourceCache&#34;);
    if(resourceCache == null){
        /*Grab resource*/
        devices = apiGetManyV2(portalName, apiId, apiKey, &#34;/device/devices&#34;, proxyInfo, [&#39;fields&#39;:fields,&#39;size&#39;:1000,&#39;sort&#39;:sort])
        if(devices){
            devicesJson = new JsonBuilder( devices ).toPrettyString()
            scriptCache.set(&#34;DeviceAlertStats-ResourceCache&#34;,devicesJson,cacheTimeout * 1000);
        }
    }
    else{
        devices = new JsonSlurper().parseText(resourceCache)
    }
} 
catch (Exception ex) {
	println ex
    return -1
}

if(devices){
    devices.each { device -&#62; 
        println &#34;${device.id}##${device.displayName}######&#34;
    }
}
return 0

/* Generate auth for API calls. */
static String generateAuth(id, key, path) {
    Long epoch_time = System.currentTimeMillis()
    Mac hmac = Mac.getInstance(&#34;HmacSHA256&#34;)
    hmac.init(new SecretKeySpec(key.getBytes(), &#34;HmacSHA256&#34;))
    def signature = Hex.encodeHexString(hmac.doFinal(&#34;GET${epoch_time}${path}&#34;.getBytes())).bytes.encodeBase64()

    return &#34;LMv1 ${id}:${signature}:${epoch_time}&#34;
}

/* Paginated GET method. Returns a list of objects. */
List apiGetManyV2(portalName, apiId, apiKey, endPoint, proxyInfo, Map args=[:]) {

    def pageSize = args.get(&#39;size&#39;, 1000) // Default the page size to 1000 if not specified.
    List items = []

    args[&#39;size&#39;] = pageSize

    def pageCount = 0
    while (true) {
        pageCount += 1

        // Updated the args
        args[&#39;size&#39;] = pageSize
        args[&#39;offset&#39;] = items.size()

        def response = apiGetV2(portalName, apiId, apiKey, endPoint, proxyInfo, args)
        if (response.get(&#34;errmsg&#34;, &#34;OK&#34;) != &#34;OK&#34;) {
            throw new Exception(&#34;Santaba returned errormsg: ${response?.errmsg}&#34;)
        }
        items.addAll(response.items)

        // If we recieved less than we asked for it means we are done
        if (response.items.size() &#60; pageSize) break
    }
    return items
}

/* Simple GET, returns a parsed json payload. No processing. */
def apiGetV2(portalName, apiId, apiKey, endPoint, proxyInfo, Map args=[:]) {
    def request = rawGetV2(portalName, apiId, apiKey, endPoint, proxyInfo, args)
    if (request.getResponseCode() == 200) {
        def payload = new JsonSlurper().parseText(request.content.text)
        return payload
    }
    else {
        throw new Exception(&#34;Server return HTTP code ${request.getResponseCode()}&#34;)
    }
}


/* Raw GET method. */
def rawGetV2(portalName, apiId, apiKey, endPoint, proxyInfo, Map args=[:]) {
    def auth = generateAuth(apiId, apiKey, endPoint)
    def headers = [&#34;Authorization&#34;: auth, &#34;Content-Type&#34;: &#34;application/json&#34;, &#34;X-Version&#34;:&#34;3&#34;]
    def url = &#34;https://${portalName}.logicmonitor.com/santaba/rest${endPoint}&#34;

    if (args) {
        def encodedArgs = []
        args.each{ k,v -&#62; 
            if(k == &#34;filter&#34;){
                encodedArgs &#60;&#60; &#34;${k}=${v.toString()}&#34;
            }
            else{
                encodedArgs &#60;&#60; &#34;${k}=${java.net.URLEncoder.encode(v.toString(), &#34;UTF-8&#34;)}&#34;
            }
        }
        url += &#34;?${encodedArgs.join(&#39;&#38;&#39;)}&#34;
    }

    def request
    if (proxyInfo.enabled) {
        request = url.toURL().openConnection(proxyInfo.proxy)
    }
    else {
        request = url.toURL().openConnection()
    }
    request.setRequestMethod(&#34;GET&#34;)
    request.setDoOutput(true)
    headers.each{ k,v -&#62;
        request.addRequestProperty(k, v)
    }

    return request
}

/**
* Get collector proxy settings
* @return Map with proxy settings, empty map if proxy not set.
*/
Map getProxyInfo() {
    // Each property must be evaluated for null to determine whether to use collected value or fallback value
    // Elvis operator does not play nice with booleans
    // default to true in absence of property to use collectorProxy as determinant
    Boolean deviceProxy = hostProps.get(&#34;proxy.enable&#34;)?.toBoolean()
    deviceProxy = (deviceProxy != null) ? deviceProxy : true  
    // if settings are not present, value should be false
    Boolean collectorProxy = Settings.getSetting(&#34;proxy.enable&#34;)?.toBoolean()
    collectorProxy = (collectorProxy != null) ? collectorProxy : false  

    Map proxyInfo = [:]
    
    if (deviceProxy &#38;&#38; collectorProxy) {
        proxyInfo = [
            enabled : true,
            host : hostProps.get(&#34;proxy.host&#34;) ?: Settings.getSetting(&#34;proxy.host&#34;),
            port : hostProps.get(&#34;proxy.port&#34;) ?: Settings.getSetting(&#34;proxy.port&#34;) ?: 3128,
            user : Settings.getSetting(&#34;proxy.user&#34;),
            pass : Settings.getSetting(&#34;proxy.pass&#34;)
        ]
    
        proxyInfo[&#34;proxy&#34;] = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(proxyInfo.host, proxyInfo.port.toInteger()))
    }

    return proxyInfo
}</wildcardgroovyscript>
        <wildcardschedule>60</wildcardschedule>
        <wildcarddisable>false</wildcarddisable>
        <wildcarddeleteinactive>false</wildcarddeleteinactive>
        <agdmethod>none</agdmethod>
        <agdparams></agdparams>
        <group></group>
        <tags></tags>
        <technology>User mttr.period to define the rolling time period used in mttr calculation in days.</technology>
        <adlist><![CDATA[{"agdmethod":"none","method":"ad_script","agdparams":"","id":0,"filters":[],"params":{"type":"embeded","groovyscript":"/*******************************************************************************\n * © 2007-2023 - LogicMonitor, Inc. All rights reserved.\n ******************************************************************************/\n\nimport groovy.json.JsonSlurper\nimport com.santaba.agent.util.Settings\nimport com.santaba.agent.live.LiveHostSet\nimport org.apache.commons.codec.binary.Hex\nimport javax.crypto.Mac\nimport javax.crypto.spec.SecretKeySpec\nimport java.security.MessageDigest\nimport groovy.json.*\n\nString apiId   = hostProps.get(\"lmaccess.id\")  ?: hostProps.get(\"logicmonitor.access.id\")\nString apiKey  = hostProps.get(\"lmaccess.key\") ?: hostProps.get(\"logicmonitor.access.key\")\ndef portalName = hostProps.get(\"lmaccount\")    ?: Settings.getSetting(Settings.AGENT_COMPANY)\n\nMap proxyInfo  = getProxyInfo()\ndef scriptCache\ndef cacheTimeout = 3600 // 1 hour, same as our AD discovery\n\ndef fields = \"id,name,displayName\"\ndef sort = \"displayName\"\ndef devices\n\ntry {\n    scriptCache = this.class.classLoader.loadClass(\"com.santaba.agent.util.script.ScriptCache\").getCache();\n    //scriptCache.remove(\"DeviceAlertStats-ResourceCache\")\n    String resourceCache = scriptCache.get(\"DeviceAlertStats-ResourceCache\");\n    if(resourceCache == null){\n        /*Grab resource*/\n        devices = apiGetManyV2(portalName, apiId, apiKey, \"/device/devices\", proxyInfo, ['fields':fields,'size':1000,'sort':sort])\n        if(devices){\n            devicesJson = new JsonBuilder( devices ).toPrettyString()\n            scriptCache.set(\"DeviceAlertStats-ResourceCache\",devicesJson,cacheTimeout * 1000);\n        }\n    }\n    else{\n        devices = new JsonSlurper().parseText(resourceCache)\n    }\n} \ncatch (Exception ex) {\n\tprintln ex\n    return -1\n}\n\nif(devices){\n    devices.each { device -> \n        println \"${device.id}##${device.displayName}######\"\n    }\n}\nreturn 0\n\n/* Generate auth for API calls. */\nstatic String generateAuth(id, key, path) {\n    Long epoch_time = System.currentTimeMillis()\n    Mac hmac = Mac.getInstance(\"HmacSHA256\")\n    hmac.init(new SecretKeySpec(key.getBytes(), \"HmacSHA256\"))\n    def signature = Hex.encodeHexString(hmac.doFinal(\"GET${epoch_time}${path}\".getBytes())).bytes.encodeBase64()\n\n    return \"LMv1 ${id}:${signature}:${epoch_time}\"\n}\n\n/* Paginated GET method. Returns a list of objects. */\nList apiGetManyV2(portalName, apiId, apiKey, endPoint, proxyInfo, Map args=[:]) {\n\n    def pageSize = args.get('size', 1000) // Default the page size to 1000 if not specified.\n    List items = []\n\n    args['size'] = pageSize\n\n    def pageCount = 0\n    while (true) {\n        pageCount += 1\n\n        // Updated the args\n        args['size'] = pageSize\n        args['offset'] = items.size()\n\n        def response = apiGetV2(portalName, apiId, apiKey, endPoint, proxyInfo, args)\n        if (response.get(\"errmsg\", \"OK\") != \"OK\") {\n            throw new Exception(\"Santaba returned errormsg: ${response?.errmsg}\")\n        }\n        items.addAll(response.items)\n\n        // If we recieved less than we asked for it means we are done\n        if (response.items.size() < pageSize) break\n    }\n    return items\n}\n\n/* Simple GET, returns a parsed json payload. No processing. */\ndef apiGetV2(portalName, apiId, apiKey, endPoint, proxyInfo, Map args=[:]) {\n    def request = rawGetV2(portalName, apiId, apiKey, endPoint, proxyInfo, args)\n    if (request.getResponseCode() == 200) {\n        def payload = new JsonSlurper().parseText(request.content.text)\n        return payload\n    }\n    else {\n        throw new Exception(\"Server return HTTP code ${request.getResponseCode()}\")\n    }\n}\n\n\n/* Raw GET method. */\ndef rawGetV2(portalName, apiId, apiKey, endPoint, proxyInfo, Map args=[:]) {\n    def auth = generateAuth(apiId, apiKey, endPoint)\n    def headers = [\"Authorization\": auth, \"Content-Type\": \"application/json\", \"X-Version\":\"3\"]\n    def url = \"https://${portalName}.logicmonitor.com/santaba/rest${endPoint}\"\n\n    if (args) {\n        def encodedArgs = []\n        args.each{ k,v -> \n            if(k == \"filter\"){\n                encodedArgs << \"${k}=${v.toString()}\"\n            }\n            else{\n                encodedArgs << \"${k}=${java.net.URLEncoder.encode(v.toString(), \"UTF-8\")}\"\n            }\n        }\n        url += \"?${encodedArgs.join('&')}\"\n    }\n\n    def request\n    if (proxyInfo.enabled) {\n        request = url.toURL().openConnection(proxyInfo.proxy)\n    }\n    else {\n        request = url.toURL().openConnection()\n    }\n    request.setRequestMethod(\"GET\")\n    request.setDoOutput(true)\n    headers.each{ k,v ->\n        request.addRequestProperty(k, v)\n    }\n\n    return request\n}\n\n/**\n* Get collector proxy settings\n* @return Map with proxy settings, empty map if proxy not set.\n*/\nMap getProxyInfo() {\n    // Each property must be evaluated for null to determine whether to use collected value or fallback value\n    // Elvis operator does not play nice with booleans\n    // default to true in absence of property to use collectorProxy as determinant\n    Boolean deviceProxy = hostProps.get(\"proxy.enable\")?.toBoolean()\n    deviceProxy = (deviceProxy != null) ? deviceProxy : true  \n    // if settings are not present, value should be false\n    Boolean collectorProxy = Settings.getSetting(\"proxy.enable\")?.toBoolean()\n    collectorProxy = (collectorProxy != null) ? collectorProxy : false  \n\n    Map proxyInfo = [:]\n    \n    if (deviceProxy && collectorProxy) {\n        proxyInfo = [\n            enabled : true,\n            host : hostProps.get(\"proxy.host\") ?: Settings.getSetting(\"proxy.host\"),\n            port : hostProps.get(\"proxy.port\") ?: Settings.getSetting(\"proxy.port\") ?: 3128,\n            user : Settings.getSetting(\"proxy.user\"),\n            pass : Settings.getSetting(\"proxy.pass\")\n        ]\n    \n        proxyInfo[\"proxy\"] = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(proxyInfo.host, proxyInfo.port.toInteger()))\n    }\n\n    return proxyInfo\n}"}}]]></adlist>
        <schemaVersion>2</schemaVersion>
    <integrationMetadata>
        <integrationVersion>1.0.0</integrationVersion>
        <integrationAuthorCompanyUuid>1c0ca6ae-b3a2-4a08-9809-5935c90e4a1d</integrationAuthorCompanyUuid>
        <integrationLineageId>Egb1bkkHTriaDse0K5mG6g</integrationLineageId>
        <integrationChecksum>1d127d10e0d554dc873f0f30164ca41a</integrationChecksum>
        <integrationAuthorNamespace>lmstevenvillardi</integrationAuthorNamespace>
        <integrationId>1b8136ab-ff80-438a-b79e-3367d7c6b6b7</integrationId>
        <integrationLocator>P7J2TJ</integrationLocator>
        <integrationName></integrationName>
        <integrationStatus>Security Review</integrationStatus>
        <integrationPublishedAtMS>1685575388268</integrationPublishedAtMS>
        <integrationIsPrivate>true</integrationIsPrivate>
    </integrationMetadata>
        <dataSourceType>1</dataSourceType>
        <attributes>
        <attribute>
            <name>scripttype</name>
            <value>embed</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>scriptgroovy</name>
            <value>/*******************************************************************************
 * © 2007-2023 - LogicMonitor, Inc. All rights reserved.
 ******************************************************************************/

import groovy.json.JsonSlurper
import com.santaba.agent.util.Settings
import com.santaba.agent.live.LiveHostSet
import org.apache.commons.codec.binary.Hex
import javax.crypto.Mac
import javax.crypto.spec.SecretKeySpec
import java.security.MessageDigest
import groovy.json.*

String apiId   = hostProps.get(&#34;lmaccess.id&#34;)  ?: hostProps.get(&#34;logicmonitor.access.id&#34;)
String apiKey  = hostProps.get(&#34;lmaccess.key&#34;) ?: hostProps.get(&#34;logicmonitor.access.key&#34;)
def mttrPeriod = hostProps.get(&#34;mttr.period&#34;) ?: &#34;1&#34; //Default to 1 day
def portalName = hostProps.get(&#34;lmaccount&#34;)    ?: Settings.getSetting(Settings.AGENT_COMPANY)

Map proxyInfo  = getProxyInfo()
def scriptCache

/*Calculate start and end date for alert query*/
int timePeriod = 24 * mttrPeriod.toInteger() //hours for rolling average
Date now = new Date()
long endEpoch = now.getTime() / 1000
long startEpoch = endEpoch - (timePeriod*3600)

def filter = &#34;cleared:\&#34;True\&#34;,endEpoch&#62;:${startEpoch}&#34;
def fields = &#34;severity,monitorObjectId,internalId,id,startEpoch,endEpoch&#34;
def sort = &#34;+endEpoch&#34;
def alerts
def alertSize
def maxQuery = 0

def cacheTimeout = 3600 // 1 hour, same as our AD discovery
def devices
def cacheHit = 1
try {
    scriptCache = this.class.classLoader.loadClass(&#34;com.santaba.agent.util.script.ScriptCache&#34;).getCache();
    String resourceCache = scriptCache.get(&#34;DeviceAlertStats-ResourceCache&#34;);
    if(resourceCache == null){
        /*Grab resources*/
        devices = apiGetManyV2(portalName, apiId, apiKey, &#34;/device/devices&#34;, proxyInfo, [&#39;fields&#39;:&#39;id,name,displayName&#39;,&#39;size&#39;:1000,&#39;sort&#39;:&#39;-id&#39;])
        if(devices){
            devicesJson = new JsonBuilder( devices ).toPrettyString()
            scriptCache.set(&#34;DeviceAlertStats-ResourceCache&#34;,devicesJson,cacheTimeout * 1000);
        }
    }
    else{
        devices = new JsonSlurper().parseText(resourceCache)
        cacheHit=0
    }

    /*Grab alerts*/
    alerts = apiGetManyV2(portalName, apiId, apiKey, &#34;/alert/alerts&#34;, proxyInfo, [&#39;filter&#39;:filter,&#39;size&#39;:1000,&#39;fields&#39;:fields,&#39;sort&#39;:sort])
    alertSize = alerts.size()

    /*We reached 10000 view limit, perform another search starting with the oldest returned alert*/
    while(alertSize == 10000 &#38;&#38; maxQuery &#60; 5){
        def lastEpoch = alerts.endEpoch.max()
        filter = &#34;cleared:\&#34;True\&#34;,endEpoch&#62;${lastEpoch}&#34;
        def nextAlerts = apiGetManyV2(portalName, apiId, apiKey, &#34;/alert/alerts&#34;, proxyInfo, [&#39;filter&#39;:filter,&#39;fields&#39;:fields,&#39;size&#39;:1000,&#39;sort&#39;:sort])
        alertSize = nextAlerts.size()
        alerts.addAll(nextAlerts)
		maxQuery++
    }
}	
catch (Exception ex) {
	println ex
    return -1
}

if(alerts){
	//alerts.removeAll { it.endEpoch &#60;= startEpoch}
    def devicesWithAlerts = alerts.monitorObjectId.unique(false)

    devices.each { device -&#62; 
        if(devicesWithAlerts.contains(device.id)){
            def matching_alerts = alerts.findAll { it.monitorObjectId.toString() == device.id.toString()}

            matching_alerts.each { alert -&#62;
                double duration = alert.endEpoch - alert.startEpoch
                alert.put(&#34;Duration&#34;,duration)

                switch(alert.severity.toInteger()){
                    case 2:
                        //warning
                        alert.put(&#34;warnDuration&#34;,duration)
                        break;
                    case 3:
                        //error
                        alert.put(&#34;errorDuration&#34;,duration)
                        break;
                    case 4:
                        //critical
                        alert.put(&#34;criticalDuration&#34;,duration)
                        break;
                }
            }

            def warnAlerts = matching_alerts.findAll { it.severity.toInteger() == 2}
            def errorAlerts = matching_alerts.findAll { it.severity.toInteger() == 3}
            def criticalAlerts = matching_alerts.findAll { it.severity.toInteger() == 4}

            calcMTTR(matching_alerts,&#34;&#34;, device.id)
            calcMTTR(warnAlerts,&#34;warn&#34;, device.id)
            calcMTTR(errorAlerts,&#34;error&#34;, device.id)
            calcMTTR(criticalAlerts,&#34;critical&#34;, device.id)

        }
        else{
			println &#34;${device.id}.longestAlertDuration=0&#34;
			println &#34;${device.id}.warnLongestAlertDuration=0&#34;
			println &#34;${device.id}.errorLongestAlertDuration=0&#34;
			println &#34;${device.id}.criticalLongestAlertDuration=0&#34;
            println &#34;${device.id}.alertSize=0&#34;
            println &#34;${device.id}.averageMTTR=0&#34;
            println &#34;${device.id}.warnAverageMTTR=0&#34;
            println &#34;${device.id}.errorAverageMTTR=0&#34;
            println &#34;${device.id}.criticalAverageMTTR=0&#34;
            println &#34;${device.id}.warnAlertSize=0&#34;
            println &#34;${device.id}.errorAlertSize=0&#34;
            println &#34;${device.id}.criticalAlertSize=0&#34;
            println &#34;${device.id}.averageMTTR95th=0&#34;
            println &#34;${device.id}.warnAverageMTTR95th=0&#34;
            println &#34;${device.id}.errorAverageMTTR95th=0&#34;
            println &#34;${device.id}.criticalAverageMTTR95th=0&#34;
        }
        println &#34;${device.id}.mttrPeriod=${mttrPeriod}&#34;
        println &#34;${device.id}.cacheHit=${cacheHit}&#34;
    }
}

return 0

def calcMTTR(collection, dpPrefix, deviceId) {
    if(collection){
        println &#34;${deviceId}.${dpPrefix}AlertSize=${collection.size()}&#34;

        double mttr = ((collection.&#34;${dpPrefix}Duration&#34;.sum() / collection.size()) / 60).round(2)
        println &#34;${deviceId}.${dpPrefix}AverageMTTR=${mttr}&#34;

        double mttr95th =  getPercentile(collection.&#34;${dpPrefix}Duration&#34;, 0.95, dpPrefix, deviceId)
        println &#34;${deviceId}.${dpPrefix}AverageMTTR95th=${mttr95th}&#34;
    }
    else{
        println &#34;${deviceId}.${dpPrefix}AlertSize=0&#34;
        println &#34;${deviceId}.${dpPrefix}AverageMTTR=0&#34;
        println &#34;${deviceId}.${dpPrefix}AverageMTTR95th=0&#34;
        println &#34;${deviceId}.${dpPrefix}AverageMTTR95th=0&#34;
        println &#34;${deviceId}.${dpPrefix}LongestAlertDuration=0&#34;
    }
}

Double getPercentile(collection, percentile, dpPrefix, deviceId) {
    def sortedCollection = collection.sort()

    double longestAlertDuration = (sortedCollection[-1] / 60).round(2)
    println &#34;${deviceId}.${dpPrefix}longestAlertDuration=${longestAlertDuration}&#34;

    int percentileIndex = Math.round(sortedCollection.size() * percentile)
    sortedCollection.subList(percentileIndex,sortedCollection.size()).clear()

    double result =  ((sortedCollection.sum() / Math.ceil(sortedCollection.size())) / 60).round(2)

    return result
}

/* Generate auth for API calls. */
static String generateAuth(id, key, path) {
    Long epoch_time = System.currentTimeMillis()
    Mac hmac = Mac.getInstance(&#34;HmacSHA256&#34;)
    hmac.init(new SecretKeySpec(key.getBytes(), &#34;HmacSHA256&#34;))
    def signature = Hex.encodeHexString(hmac.doFinal(&#34;GET${epoch_time}${path}&#34;.getBytes())).bytes.encodeBase64()

    return &#34;LMv1 ${id}:${signature}:${epoch_time}&#34;
}

/* Paginated GET method. Returns a list of objects. */
List apiGetManyV2(portalName, apiId, apiKey, endPoint, proxyInfo, Map args=[:]) {

    def pageSize = args.get(&#39;size&#39;, 1000) // Default the page size to 1000 if not specified.
    List items = []

    args[&#39;size&#39;] = pageSize

    def pageCount = 0
    while (true) {
        pageCount += 1

        // Updated the args
        args[&#39;size&#39;] = pageSize
        args[&#39;offset&#39;] = items.size()

        def response = apiGetV2(portalName, apiId, apiKey, endPoint, proxyInfo, args)
        if (response.get(&#34;errmsg&#34;, &#34;OK&#34;) != &#34;OK&#34;) {
            throw new Exception(&#34;Santaba returned errormsg: ${response?.errmsg}&#34;)
        }
        items.addAll(response.items)

        // If we recieved less than we asked for it means we are done
        if (response.items.size() &#60; pageSize) break
    }
    return items
}

/* Simple GET, returns a parsed json payload. No processing. */
def apiGetV2(portalName, apiId, apiKey, endPoint, proxyInfo, Map args=[:]) {
    def request = rawGetV2(portalName, apiId, apiKey, endPoint, proxyInfo, args)
    if (request.getResponseCode() == 200) {
        def payload = new JsonSlurper().parseText(request.content.text)
        return payload
    }
    else {
        throw new Exception(&#34;Server return HTTP code ${request.getResponseCode()}&#34;)
    }
}


/* Raw GET method. */
def rawGetV2(portalName, apiId, apiKey, endPoint, proxyInfo, Map args=[:]) {
    def auth = generateAuth(apiId, apiKey, endPoint)
    def headers = [&#34;Authorization&#34;: auth, &#34;Content-Type&#34;: &#34;application/json&#34;, &#34;X-Version&#34;:&#34;3&#34;]
    def url = &#34;https://${portalName}.logicmonitor.com/santaba/rest${endPoint}&#34;

    if (args) {
        def encodedArgs = []
        args.each{ k,v -&#62; 
            if(k == &#34;filter&#34; || k == &#34;fields&#34; || k == &#34;sort&#34;){
                encodedArgs &#60;&#60; &#34;${k}=${v.toString()}&#34;
            }
            else{
                encodedArgs &#60;&#60; &#34;${k}=${java.net.URLEncoder.encode(v.toString(), &#34;UTF-8&#34;)}&#34;
            }
        }
        url += &#34;?${encodedArgs.join(&#39;&#38;&#39;)}&#34;
    }

    def request
    if (proxyInfo.enabled) {
        request = url.toURL().openConnection(proxyInfo.proxy)
    }
    else {
        request = url.toURL().openConnection()
    }
    request.setRequestMethod(&#34;GET&#34;)
    request.setDoOutput(true)
    headers.each{ k,v -&#62;
        request.addRequestProperty(k, v)
    }

    return request
}

/**
* Get collector proxy settings
* @return Map with proxy settings, empty map if proxy not set.
*/
Map getProxyInfo() {
    // Each property must be evaluated for null to determine whether to use collected value or fallback value
    // Elvis operator does not play nice with booleans
    // default to true in absence of property to use collectorProxy as determinant
    Boolean deviceProxy = hostProps.get(&#34;proxy.enable&#34;)?.toBoolean()
    deviceProxy = (deviceProxy != null) ? deviceProxy : true  
    // if settings are not present, value should be false
    Boolean collectorProxy = Settings.getSetting(&#34;proxy.enable&#34;)?.toBoolean()
    collectorProxy = (collectorProxy != null) ? collectorProxy : false  

    Map proxyInfo = [:]
    
    if (deviceProxy &#38;&#38; collectorProxy) {
        proxyInfo = [
            enabled : true,
            host : hostProps.get(&#34;proxy.host&#34;) ?: Settings.getSetting(&#34;proxy.host&#34;),
            port : hostProps.get(&#34;proxy.port&#34;) ?: Settings.getSetting(&#34;proxy.port&#34;) ?: 3128,
            user : Settings.getSetting(&#34;proxy.user&#34;),
            pass : Settings.getSetting(&#34;proxy.pass&#34;)
        ]
    
        proxyInfo[&#34;proxy&#34;] = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(proxyInfo.host, proxyInfo.port.toInteger()))
    }

    return proxyInfo
}</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowsscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowscmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxcmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        </attributes>
        <datapoints>
        <datapoint>
            <name>alertSize</name>
            <originId>50570zRZRXqwZ7P37CflcA</originId>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>##WILDVALUE##.alertSize</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description>number of alerts used in MTTR average calculation</description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <maxdigits>4</maxdigits>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>averageMTTR</name>
            <originId>VRAwHolqQditsGdqSoSRzw</originId>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>##WILDVALUE##.averageMTTR</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description>average alert duration in minutes based on rolling period.</description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <maxdigits>4</maxdigits>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>mttrPeriod</name>
            <originId>5SanROMhQZexOj5u18ymfw</originId>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>##WILDVALUE##.mttrPeriod</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description>Period of time in days used to calculate mttr. Default value is 1 can be overridden by setting the property mttr.period where needed.</description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <maxdigits>4</maxdigits>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>cacheHit</name>
            <originId>gaat78EMTkulWI9X-p4-eA</originId>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>##WILDVALUE##.cacheHit</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description>0 = cache hit, 1 = api call</description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <maxdigits>4</maxdigits>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>averageMTTR95th</name>
            <originId>WazwqNqQSpeclUrgqCajew</originId>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>##WILDVALUE##.averageMTTR95th</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description>95th percentile average MTTR</description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <maxdigits>4</maxdigits>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>longestAlertDuration</name>
            <originId>AYWoGj3lTy2h6hn5KNmCnA</originId>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>##WILDVALUE##.longestAlertDuration</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description>Longest alert in minutes based on current mttr period</description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <maxdigits>4</maxdigits>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>criticalAlertSize</name>
            <originId>lUPjnlKgRYukmNT3XNDmMA</originId>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>##WILDVALUE##.criticalAlertSize</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description></description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <maxdigits>4</maxdigits>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>criticalAverageMTTR</name>
            <originId>GKqw3FbgRP-TBe7ZhRXa6w</originId>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>##WILDVALUE##.criticalAverageMTTR</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description></description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <maxdigits>4</maxdigits>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>criticalAverageMTTR95th</name>
            <originId>LW8ic3JEQ0COsxC_V4m7hg</originId>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>##WILDVALUE##.criticalAverageMTTR95th</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description></description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <maxdigits>4</maxdigits>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>errorAlertSize</name>
            <originId>mbboK3geSiCFVi54UeF8UQ</originId>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>##WILDVALUE##.errorAlertSize</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description></description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <maxdigits>4</maxdigits>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>errorAverageMTTR</name>
            <originId>5B3z001MQFGc2s5O0P4E8w</originId>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>##WILDVALUE##.errorAverageMTTR</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description></description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <maxdigits>4</maxdigits>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>errorAverageMTTR95th</name>
            <originId>sRUwv4lVRpa2HnYCKQ8Afw</originId>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>##WILDVALUE##.errorAverageMTTR95th</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description></description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <maxdigits>4</maxdigits>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>warnAlertSize</name>
            <originId>E-V_HZv5TRelMGzSRl2fEw</originId>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>##WILDVALUE##.warnAlertSize</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description></description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <maxdigits>4</maxdigits>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>warnAverageMTTR</name>
            <originId>j4HyNuhnQG-z0SIxwsJu_A</originId>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>##WILDVALUE##.warnAverageMTTR</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description></description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <maxdigits>4</maxdigits>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>warnAverageMTTR95th</name>
            <originId>ILrFFG04Ssuj8sL-bxRdJA</originId>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>##WILDVALUE##.warnAverageMTTR95th</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description></description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <maxdigits>4</maxdigits>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>criticalLongestAlertDuration</name>
            <originId>uBxYl5pYQfO75_R_WdQtIw</originId>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>##WILDVALUE##.criticalLongestAlertDuration</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description></description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <maxdigits>4</maxdigits>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>errorLongestAlertDuration</name>
            <originId>o8bt_i_5RgmJAsOxRMihmQ</originId>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>##WILDVALUE##.errorLongestAlertDuration</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description></description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <maxdigits>4</maxdigits>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>warnLongestAlertDuration</name>
            <originId>IIDg-ZJoS72fNZ54wGpUmg</originId>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>##WILDVALUE##.warnLongestAlertDuration</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description></description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <maxdigits>4</maxdigits>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>executionTime</name>
            <originId>CebraaVnQYu2g7djTrtKjQ</originId>
            <dataType>4</dataType>
            <type>2</type>
            <postprocessormethod>none</postprocessormethod>
            <postprocessorparam></postprocessorparam>
            <usevalue>responseTime</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description></description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <maxdigits>4</maxdigits>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        </datapoints>
        <graphs>
        <graph>
            <name>Device MTTR Average</name>
            <title>Device MTTR Average</title>
            <originId></originId>            <verticallabel>minutes</verticallabel>
            <rigid>false</rigid>
            <maxvalue>NaN</maxvalue>
            <minvalue>-1.0</minvalue>
            <displayprio>1</displayprio>
            <timescale>1day</timescale>
            <base1024>false</base1024>
            <graphdatapoints>
        <graphdatapoint>
            <name>averageMTTR</name>
            <datapointname>averageMTTR</datapointname>
            <originId></originId>
            <cf>1</cf>
        </graphdatapoint>
            </graphdatapoints>
            <graphvirtualdatapoints>
            </graphvirtualdatapoints>
            <graphdatas>
            <graphdata>
                <type>3</type>
                <legend>averageMTTR</legend>
                <color>silver</color>
                <datapointname>averageMTTR</datapointname>
                <isvirtualdatapoint>false</isvirtualdatapoint>
            </graphdata>
            </graphdatas>
        </graph>
        <graph>
            <name>Resolved Alert Count: Rolling ##MTTR.PERIOD## day(s)</name>
            <title>Resolved Alert Count: Rolling ##MTTR.PERIOD## day(s)</title>
            <originId></originId>            <verticallabel># of alerts</verticallabel>
            <rigid>false</rigid>
            <maxvalue>NaN</maxvalue>
            <minvalue>-1.0</minvalue>
            <displayprio>1</displayprio>
            <timescale>1day</timescale>
            <base1024>false</base1024>
            <graphdatapoints>
        <graphdatapoint>
            <name>alertSize</name>
            <datapointname>alertSize</datapointname>
            <originId></originId>
            <cf>1</cf>
        </graphdatapoint>
            </graphdatapoints>
            <graphvirtualdatapoints>
            </graphvirtualdatapoints>
            <graphdatas>
            <graphdata>
                <type>3</type>
                <legend>alertSize</legend>
                <color>green</color>
                <datapointname>alertSize</datapointname>
                <isvirtualdatapoint>false</isvirtualdatapoint>
            </graphdata>
            </graphdatas>
        </graph>
        </graphs>
        <overviewgraphs>
        <overviewgraph>
            <name>Top Device MTTR Average</name>
            <title>Top Devices by MTTR Average: Rolling ##MTTR.PERIOD## day(s)</title>
            <verticallabel>minutes</verticallabel>
            <rigid>false</rigid>
            <maxvalue>NaN</maxvalue>
            <minvalue>-1.0</minvalue>
            <displayprio>1</displayprio>
            <timescale>1day</timescale>
            <base1024>false</base1024>
            <aggregated>false</aggregated>
            <originId></originId>
            <datapoints>
        <overviewgraphdatapoint>
            <name>averageMTTR</name>
            <datapointname>averageMTTR</datapointname>
            <cf>1</cf>
            <aggregateMethod>sum</aggregateMethod>
            <originId></originId>
        </overviewgraphdatapoint>
            </datapoints>
            <virtualdatapoints>
            </virtualdatapoints>
            <lines>
            <overviewgraphline>
                <type>1</type>
                <legend>##INSTANCE##</legend>
                <datapointname>averageMTTR</datapointname>
                <isvirtualdatapoint>false</isvirtualdatapoint>
                <color>silver</color>
            </overviewgraphline>
            </lines>
        </overviewgraph>
        <overviewgraph>
            <name>Top Devices by Resolved Alert Coun</name>
            <title>Top Devices by Resolved Alert Count: Rolling ##MTTR.PERIOD## day(s)</title>
            <verticallabel># of alerts</verticallabel>
            <rigid>false</rigid>
            <maxvalue>NaN</maxvalue>
            <minvalue>-1.0</minvalue>
            <displayprio>1</displayprio>
            <timescale>1day</timescale>
            <base1024>false</base1024>
            <aggregated>false</aggregated>
            <originId></originId>
            <datapoints>
        <overviewgraphdatapoint>
            <name>alertSize</name>
            <datapointname>alertSize</datapointname>
            <cf>1</cf>
            <aggregateMethod>sum</aggregateMethod>
            <originId></originId>
        </overviewgraphdatapoint>
            </datapoints>
            <virtualdatapoints>
            </virtualdatapoints>
            <lines>
            <overviewgraphline>
                <type>1</type>
                <legend>##INSTANCE##</legend>
                <datapointname>alertSize</datapointname>
                <isvirtualdatapoint>false</isvirtualdatapoint>
                <color>silver</color>
            </overviewgraphline>
            </lines>
        </overviewgraph>
        </overviewgraphs>
        <scripts>
        </scripts>
    </entry>
</feed>
