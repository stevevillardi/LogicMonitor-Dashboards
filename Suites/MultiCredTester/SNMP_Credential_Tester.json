{
    "scheduleOption": 0,
    "metadata": {
        "currentUuid": "MqUZZzLlSEq6hOGSA_4L1w",
        "originalUuid": "nwccAcyuQYOrODjr1ZBgWA",
        "authorCompanyUuid": "5c0bcece-e33c-4655-af2e-274c5bb665df",
        "registryVersion": "1.0.0",
        "checksum": "a54cb58d3a400bac13215fcedeade286"
    },
    "dataType": 0,
    "description": "Tests SNMP credentials and tags a device with the credential name.\n\nINPUTS\nDevice Prop Name: lm_cred_tester.snmp.pass  (Set at root level)\nDevice Prop Value Format:\n{\n\"name\": \"credName\",\n\"community\": \"lm23lknd2lk\",\n\"version\": \"v2\",\n\"v3\": {...V3 infor to come....}\n}\n\nOUTPUTS\nlm_cred_tester.snmp.name = credName\nlm_cred_tester.snmp.match = True|False\nlm_cred_tester.snmp.lastrun = 11:30pm Tues, Oct 9th, 2021",
    "appliesTo": "lm_cred_tester.snmp.pass",
    "technology": "",
    "type": 5,
    "params": [
        {
            "name": "linuxcmdline",
            "comment": "",
            "value": ""
        },
        {
            "name": "linuxscript",
            "comment": "",
            "value": ""
        },
        {
            "name": "scriptgroovy",
            "comment": "",
            "value": "import com.santaba.agent.groovyapi.snmp.Snmp\nimport groovy.json.JsonSlurper\nimport java.time.LocalDateTime\nimport org.xbill.DNS.*;\n\ndef hostName = hostProps.get(\"system.hostname\");\ndef credentials = hostProps.get(\"lm_cred_tester.snmp.pass\")\ndef already_has_match = hostProps.get(\"lm_cred_tester.snmp.match\")\n\ndef timeout = 3000 // milliseconds\n// Expected Format\n// [{\"community\":\"password1234\",\"name\":\"CredentialSet1\",\"version\":\"v2\"},{\"name\":\"CredentialSet2\",\"version\":\"v3\" , \"v3\":{\"security\":\"security\",\"authMethod\":\"authMethod\",\"authToken\":\"yourauthToken\",\"privMethod\":\"privMethod\",\"privToken\":\"privToken\"}}]\n\nString testSnmpOid = \".1.3.6.1.2.1.1.1.0\"\n\n// Remove any trailing commas that got erroneously left in the JSON...\ncredentials = credentials.replaceAll(/,[\\s]*}/, '}')\ncredentials = credentials.replaceAll(/,[\\s]*]/, ']')\n\ndef credentials_json = new JsonSlurper().parseText(credentials)\n\n\n\n//Method perform testing of SNMPv2 Credentials\ndef TestSmtpV2Credentials(host, community, oid, timeout)\n{\n\ttry\n\t{\n\t\tsnmp_get = Snmp.get(host, community, \"v2\", oid, timeout)\n\t\t//println \"success: \" + community\n\t}\n\tcatch (ex)\n\t{\t\n\t\t//println \"Failure - \" + host\n\t\t//println(ex)\t\n\t\treturn 1\n\t}\n\treturn 0\n}\n\n//Method perform testing of SNMPv3 Credentials\ndef TestSmtpV3Credentials(host, security, authMethod, authToken, privMethod, privToken, oid, timeout)\n{\n\tsnmp_options = new HashMap()\n\tsnmp_options.put(\"snmp.version\", \"v3\")\n\tsnmp_options.put(\"snmp.security\", security)\n\tsnmp_options.put(\"snmp.auth\", authMethod)\n\tsnmp_options.put(\"snmp.authToken\", authToken)\n\tsnmp_options.put(\"snmp.priv\", privMethod)\n\tsnmp_options.put(\"snmp.privToken\", privToken)\n\n\ttry\n\t{\n\t\tsnmp_get = Snmp.get(host, oid, snmp_options, timeout)\n\t}\n\tcatch (ex)\n\t{\n\t\t// println ex\n\t\treturn 1\n\t}\n\treturn 0\n}\n\ndef matching_cred = {}\ndef found_cred_match = false\n\nif (already_has_match == \"False\" || already_has_match == null) {\n\tfor (cred in credentials_json) {\n\t\t//println cred[\"name\"]\n\t\tif(cred.version == 'v1' || cred.version == 'v2') {\n\t\t\t//println(cred[\"community\"])\n\t\t\tif (TestSmtpV2Credentials(hostName, cred[\"community\"] , testSnmpOid, timeout) == 0){ // creds.pass is basically a community string\n\t\t\t\tfound_cred_match = true\n\t\t\t\tmatching_cred = cred\n\t\t\t\tbreak\n\t\t\t}\n\t\t} else if (cred.version == 'v3' && cred.containsKey(\"v3\")){\n\t\t\tsnmp_v3_creds = cred['v3']\n\t\t\tif(TestSmtpV3Credentials(hostName, snmp_v3_creds.security, snmp_v3_creds.authMethod,snmp_v3_creds.authToken,snmp_v3_creds.privMethod,snmp_v3_creds.privToken,testSnmpOid,timeout) == 0) {\n\t\t\t\tfound_cred_match = true\n\t\t\t\tmatching_cred = cred\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\t\n\tdef currentTime = LocalDateTime.now()\n\t\n\tif (found_cred_match) {\n\t\tdef credName = matching_cred[\"name\"]\n\t\tprintln \"lm_cred_tester.snmp.name=${credName}\"\n\t\tprintln \"lm_cred_tester.snmp.match=True\"\n\t\tprintln \"lm_cred_tester.snmp.lastrun=${currentTime}\"\n\t} else {\n\t\tprintln \"lm_cred_tester.snmp.match=False\"\n\t\tprintln \"lm_cred_tester.snmp.lastrun=${currentTime}\"\n\t}\n}\n\nreturn 0"
        },
        {
            "name": "scripttype",
            "comment": "embed",
            "value": "embed"
        },
        {
            "name": "windowscmdline",
            "comment": "",
            "value": ""
        },
        {
            "name": "windowsscript",
            "comment": "",
            "value": ""
        }
    ],
    "version": 1665008316,
    "tags": "",
    "auditVersion": 0,
    "name": "SNMP Credential Tester",
    "id": 253,
    "group": "LMPS"
}