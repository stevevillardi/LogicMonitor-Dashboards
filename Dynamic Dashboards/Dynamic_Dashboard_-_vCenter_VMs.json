{
  "santabaRelease": 168,
  "widgetTokens": [
    {
      "name": "apiID",
      "value": "changeme"
    },
    {
      "name": "apiKey",
      "value": "changeme"
    },
    {
      "name": "defaultDatasource",
      "value": "VMware_vCenter_VMPerformance"
    },
    {
      "name": "defaultInstance",
      "value": "*"
    },
    {
      "name": "defaultResourceGroup",
      "value": "Devices by Type/VMware vCenters"
    },
    {
      "name": "defaultResourceName",
      "value": "*"
    },
    {
      "name": "hideDynamicGroupDropdown",
      "value": "true"
    }
  ],
  "name": "Dynamic Dashboard - vCenter VMs",
  "description": "",
  "overwriteGroupFields": false,
  "widgetsConfigVersion": 2,
  "type": "dashboard",
  "widgets": [
    {
      "position": {
        "col": 1,
        "sizex": 4,
        "row": 8,
        "sizey": 4
      },
      "config": {
        "displaySettings": {"pageSize": "10"},
        "columns": [
          {
            "rpn": "",
            "dataPointName": "CPUReadyPercent",
            "displayType": "percent",
            "minValue": 0,
            "unitLabel": "",
            "maxValue": 100,
            "colorThresholds": [
              {
                "level": 2,
                "threshold": 5,
                "relation": ">"
              },
              {
                "level": 3,
                "threshold": 10,
                "relation": ">"
              },
              {
                "level": 4,
                "threshold": 15,
                "relation": ">"
              }
            ],
            "columnName": "CPUReadyPercent",
            "enableForecast": false,
            "roundingDecimal": 2
          },
          {
            "rpn": "",
            "dataPointName": "CoStopPercent",
            "displayType": "colorBar",
            "minValue": 0,
            "unitLabel": "",
            "maxValue": 100,
            "colorThresholds": [{
              "level": 2,
              "threshold": 10,
              "relation": ">"
            }],
            "columnName": "CoStopPercent",
            "enableForecast": false,
            "roundingDecimal": 2
          }
        ],
        "description": "",
        "forecast": {
          "severity": "warn",
          "confidence": 70,
          "timeRange": "Last 30 days",
          "algorithm": "Linear"
        },
        "type": "dynamicTable",
        "rows": [{
          "instanceName": "*##defaultInstance##*",
          "label": "##INSTANCE##",
          "deviceDisplayName": "*",
          "groupFullPath": "##defaultResourceGroup##"
        }],
        "version": 2,
        "topX": 25,
        "dataSourceFullName": "VMware VM Performance (VMware_vCenter_VMPerformance)",
        "sortOrder": "descending",
        "name": "Top Virtual Machines by CPU Ready %",
        "theme": "newSolidDarkBlue",
        "interval": 3,
        "timescale": "day"
      }
    },
    {
      "position": {
        "col": 5,
        "sizex": 5,
        "row": 8,
        "sizey": 4
      },
      "config": {
        "displaySettings": {},
        "name": "Top Virtual Machines by Disk IOPS",
        "description": "",
        "theme": "newBorderDarkBlue",
        "interval": 3,
        "graphInfo": {
          "virtualDataPoints": [{
            "rpn": "(DiskReads+DiskWrites)/20",
            "display": {
              "color": "Auto",
              "legend": "##INSTANCE##",
              "type": "area",
              "option": "custom"
            },
            "name": "TotalOps"
          }],
          "minValue": 0,
          "topX": 10,
          "maxValue": "NaN",
          "dataPoints": [
            {
              "dataPointName": "DiskReads",
              "instanceName": {
                "isGlob": true,
                "value": "##defaultInstance##"
              },
              "dataSourceFullName": "VMware VM Performance (VMware_vCenter_VMPerformance)",
              "consolidateFunction": "average",
              "display": {
                "color": null,
                "legend": null,
                "type": "line",
                "option": "none"
              },
              "name": "DiskReads",
              "aggregateFunction": "SUM",
              "deviceDisplayName": {
                "isGlob": true,
                "value": "*"
              },
              "deviceGroupFullPath": {
                "isGlob": true,
                "value": "##defaultResourceGroup##"
              }
            },
            {
              "dataPointName": "DiskWrites",
              "instanceName": {
                "isGlob": true,
                "value": "##defaultInstance##"
              },
              "dataSourceFullName": "VMware VM Performance (VMware_vCenter_VMPerformance)",
              "consolidateFunction": "average",
              "display": {
                "color": null,
                "legend": null,
                "type": "line",
                "option": "none"
              },
              "name": "DiskWrites",
              "aggregateFunction": "SUM",
              "deviceDisplayName": {
                "isGlob": true,
                "value": "*"
              },
              "deviceGroupFullPath": {
                "isGlob": true,
                "value": "##defaultResourceGroup##"
              }
            }
          ],
          "verticalLabel": "IOPS",
          "aggregate": false,
          "desc": true,
          "scaleUnit": 1000,
          "globalConsolidateFunction": "default"
        },
        "type": "cgraph",
        "timescale": "1day",
        "version": 2
      }
    },
    {
      "position": {
        "col": 1,
        "sizex": 4,
        "row": 12,
        "sizey": 3
      },
      "config": {
        "displaySettings": {},
        "name": "Top Virtual Machines by vCPU Ready %",
        "description": "",
        "theme": "newBorderDarkBlue",
        "interval": 3,
        "graphInfo": {
          "virtualDataPoints": [],
          "minValue": 0,
          "topX": 10,
          "maxValue": "NaN",
          "dataPoints": [{
            "dataPointName": "CPUReadyperVCPUPercent",
            "instanceName": {
              "isGlob": true,
              "value": "##defaultInstance##"
            },
            "dataSourceFullName": "VMware VM Performance (VMware_vCenter_VMPerformance)",
            "consolidateFunction": "average",
            "display": {
              "color": "Auto",
              "legend": "##INSTANCE##",
              "type": "stack",
              "option": "custom"
            },
            "name": "CPUReadyperVCPUPercent",
            "aggregateFunction": "SUM",
            "deviceDisplayName": {
              "isGlob": true,
              "value": "*"
            },
            "deviceGroupFullPath": {
              "isGlob": true,
              "value": "##defaultResourceGroup##"
            }
          }],
          "verticalLabel": "%",
          "aggregate": false,
          "desc": true,
          "scaleUnit": 1000,
          "globalConsolidateFunction": "VaST"
        },
        "type": "cgraph",
        "timescale": "12hour",
        "version": 2
      }
    },
    {
      "position": {
        "col": 5,
        "sizex": 5,
        "row": 12,
        "sizey": 3
      },
      "config": {
        "displaySettings": {},
        "name": "Top Virtual Machines by Virtual Disk IOPS",
        "description": "",
        "theme": "newBorderDarkBlue",
        "interval": 3,
        "graphInfo": {
          "virtualDataPoints": [{
            "rpn": "vDiskReads+vDiskWrites",
            "display": {
              "color": "Auto",
              "legend": "##INSTANCE##",
              "type": "area",
              "option": "custom"
            },
            "name": "Total"
          }],
          "minValue": 0,
          "topX": 10,
          "maxValue": "NaN",
          "dataPoints": [
            {
              "dataPointName": "vDiskReads",
              "instanceName": {
                "isGlob": true,
                "value": "##defaultInstance##"
              },
              "dataSourceFullName": "VMware VM Performance (VMware_vCenter_VMPerformance)",
              "consolidateFunction": "average",
              "display": {
                "color": null,
                "legend": null,
                "type": "line",
                "option": "none"
              },
              "name": "vDiskReads",
              "aggregateFunction": "SUM",
              "deviceDisplayName": {
                "isGlob": true,
                "value": "*"
              },
              "deviceGroupFullPath": {
                "isGlob": true,
                "value": "##defaultResourceGroup##"
              }
            },
            {
              "dataPointName": "vDiskWrites",
              "instanceName": {
                "isGlob": true,
                "value": "##defaultInstance##"
              },
              "dataSourceFullName": "VMware VM Performance (VMware_vCenter_VMPerformance)",
              "consolidateFunction": "average",
              "display": {
                "color": null,
                "legend": null,
                "type": "line",
                "option": "none"
              },
              "name": "vDiskWrites",
              "aggregateFunction": "SUM",
              "deviceDisplayName": {
                "isGlob": true,
                "value": "*"
              },
              "deviceGroupFullPath": {
                "isGlob": true,
                "value": "##defaultResourceGroup##"
              }
            }
          ],
          "verticalLabel": "IOPS",
          "aggregate": false,
          "desc": true,
          "scaleUnit": 1000,
          "globalConsolidateFunction": "default"
        },
        "type": "cgraph",
        "timescale": "1day",
        "version": 2
      }
    },
    {
      "position": {
        "col": 1,
        "sizex": 3,
        "row": 5,
        "sizey": 3
      },
      "config": {
        "displaySettings": {},
        "name": "Top VMs by CPU Utilization %",
        "description": "",
        "theme": "newSolidDarkBlue",
        "interval": 3,
        "graphInfo": {
          "virtualDataPoints": [],
          "minValue": 0,
          "topX": 10,
          "maxValue": 100,
          "dataPoints": [{
            "dataPointName": "CpuUsagePercent",
            "instanceName": {
              "isGlob": true,
              "value": "##defaultInstance##"
            },
            "dataSourceFullName": "VMware VM Performance (VMware_vCenter_VMPerformance)",
            "consolidateFunction": "average",
            "display": {
              "color": "Auto",
              "legend": "##INSTANCE##",
              "type": "line",
              "option": "custom"
            },
            "name": "CpuUsagePercent",
            "aggregateFunction": "SUM",
            "deviceDisplayName": {
              "isGlob": true,
              "value": "*"
            },
            "deviceGroupFullPath": {
              "isGlob": true,
              "value": "##defaultResourceGroup##"
            }
          }],
          "verticalLabel": "%",
          "aggregate": false,
          "desc": true,
          "scaleUnit": 1000,
          "globalConsolidateFunction": "default"
        },
        "type": "cgraph",
        "timescale": "12hour",
        "version": 2
      }
    },
    {
      "position": {
        "col": 1,
        "sizex": 3,
        "row": 1,
        "sizey": 4
      },
      "config": {
        "displaySettings": {"pageSize": "25"},
        "columns": [{
          "rpn": "",
          "dataPointName": "CpuUsagePercent",
          "displayType": "percent",
          "minValue": 0,
          "unitLabel": "",
          "maxValue": 100,
          "colorThresholds": [],
          "columnName": "CpuUsagePercent",
          "enableForecast": false,
          "roundingDecimal": 2
        }],
        "description": "",
        "forecast": {
          "severity": "warn",
          "confidence": 70,
          "timeRange": "Last 30 days",
          "algorithm": "Linear"
        },
        "type": "dynamicTable",
        "rows": [{
          "instanceName": "*##defaultInstance##*",
          "label": "##INSTANCE##",
          "deviceDisplayName": "*",
          "groupFullPath": "##defaultResourceGroup##"
        }],
        "version": 2,
        "topX": 10,
        "dataSourceFullName": "VMware VM Performance (VMware_vCenter_VMPerformance)",
        "sortOrder": "descending",
        "name": "Top VMs by CPU Utilization %",
        "theme": "newSolidDarkBlue",
        "interval": 3,
        "timescale": "day"
      }
    },
    {
      "position": {
        "col": 4,
        "sizex": 3,
        "row": 5,
        "sizey": 3
      },
      "config": {
        "displaySettings": {},
        "name": "Top VMs by Memory Utilization %",
        "description": "",
        "theme": "newSolidDarkBlue",
        "interval": 3,
        "graphInfo": {
          "virtualDataPoints": [],
          "minValue": 0,
          "topX": 10,
          "maxValue": 100,
          "dataPoints": [{
            "dataPointName": "MemoryUsagePercent",
            "instanceName": {
              "isGlob": true,
              "value": "##defaultInstance##"
            },
            "dataSourceFullName": "VMware VM Performance (VMware_vCenter_VMPerformance)",
            "consolidateFunction": "average",
            "display": {
              "color": "Auto",
              "legend": "##INSTANCE##",
              "type": "line",
              "option": "custom"
            },
            "name": "MemoryUsagePercent",
            "aggregateFunction": "SUM",
            "deviceDisplayName": {
              "isGlob": true,
              "value": "*"
            },
            "deviceGroupFullPath": {
              "isGlob": true,
              "value": "##defaultResourceGroup##"
            }
          }],
          "verticalLabel": "%",
          "aggregate": false,
          "desc": true,
          "scaleUnit": 1000,
          "globalConsolidateFunction": "VaST"
        },
        "type": "cgraph",
        "timescale": "12hour",
        "version": 2
      }
    },
    {
      "position": {
        "col": 4,
        "sizex": 3,
        "row": 1,
        "sizey": 4
      },
      "config": {
        "displaySettings": {"pageSize": "10"},
        "columns": [{
          "rpn": "",
          "dataPointName": "MemoryUsagePercent",
          "displayType": "percent",
          "minValue": 0,
          "unitLabel": "",
          "maxValue": 100,
          "colorThresholds": [
            {
              "level": 2,
              "threshold": 90,
              "relation": ">"
            },
            {
              "level": 3,
              "threshold": 94,
              "relation": ">"
            },
            {
              "level": 4,
              "threshold": 98,
              "relation": ">"
            }
          ],
          "columnName": "MemoryUsagePercent",
          "enableForecast": false,
          "roundingDecimal": 2
        }],
        "description": "",
        "forecast": {
          "severity": "warn",
          "confidence": 70,
          "timeRange": "Last 30 days",
          "algorithm": "Linear"
        },
        "type": "dynamicTable",
        "rows": [{
          "instanceName": "*##defaultInstance##*",
          "label": "##INSTANCE##",
          "deviceDisplayName": "*",
          "groupFullPath": "##defaultResourceGroup##"
        }],
        "version": 2,
        "topX": 10,
        "dataSourceFullName": "VMware VM Performance (VMware_vCenter_VMPerformance)",
        "sortOrder": "descending",
        "name": "Top VMs by Memory Utilization %",
        "theme": "newSolidDarkBlue",
        "interval": 3,
        "timescale": "day"
      }
    },
    {
      "position": {
        "col": 7,
        "sizex": 3,
        "row": 1,
        "sizey": 4
      },
      "config": {
        "displaySettings": {"pageSize": "10"},
        "columns": [{
          "rpn": "",
          "dataPointName": "PercentUsed",
          "displayType": "percent",
          "minValue": 0,
          "unitLabel": "",
          "maxValue": 100,
          "colorThresholds": [
            {
              "level": 2,
              "threshold": 90,
              "relation": ">="
            },
            {
              "level": 3,
              "threshold": 95,
              "relation": ">="
            }
          ],
          "columnName": "PercentUsed",
          "enableForecast": false,
          "roundingDecimal": 2
        }],
        "description": "",
        "forecast": {
          "severity": "warn",
          "confidence": 70,
          "timeRange": "Last 30 days",
          "algorithm": "Linear"
        },
        "type": "dynamicTable",
        "rows": [{
          "instanceName": "*##defaultInstance##*",
          "label": "##INSTANCE##",
          "deviceDisplayName": "*",
          "groupFullPath": "##defaultResourceGroup##"
        }],
        "version": 2,
        "topX": 25,
        "dataSourceFullName": "VMware VM Disk Capacity (VMware_vCenter_VMDiskCapacity)",
        "sortOrder": "descending",
        "name": "Top VMs by VM Disk Utilization %",
        "theme": "newSolidDarkBlue",
        "interval": 3,
        "timescale": "day"
      }
    },
    {
      "position": {
        "col": 7,
        "sizex": 3,
        "row": 5,
        "sizey": 3
      },
      "config": {
        "displaySettings": {},
        "name": "Top VMs by VM Disk Utilization %",
        "description": "",
        "theme": "newSolidDarkBlue",
        "interval": 3,
        "graphInfo": {
          "virtualDataPoints": [],
          "minValue": 0,
          "topX": 10,
          "maxValue": 100,
          "dataPoints": [{
            "dataPointName": "PercentUsed",
            "instanceName": {
              "isGlob": true,
              "value": "*##defaultInstance##*"
            },
            "dataSourceFullName": "VMware VM Disk Capacity (VMware_vCenter_VMDiskCapacity)",
            "consolidateFunction": "average",
            "display": {
              "color": "Auto",
              "legend": "##INSTANCE##",
              "type": "line",
              "option": "custom"
            },
            "name": "PercentUsed",
            "aggregateFunction": "SUM",
            "deviceDisplayName": {
              "isGlob": true,
              "value": "*"
            },
            "deviceGroupFullPath": {
              "isGlob": true,
              "value": "##defaultResourceGroup##"
            }
          }],
          "verticalLabel": "%",
          "aggregate": false,
          "desc": true,
          "scaleUnit": 1000,
          "globalConsolidateFunction": "VaST"
        },
        "type": "cgraph",
        "timescale": "12hour",
        "version": 2
      }
    },
    {
      "position": {
        "col": 1,
        "sizex": 12,
        "row": 18,
        "sizey": 4
      },
      "config": {
        "displaySettings": {
          "isShowAll": false,
          "showFilter": false,
          "columns": [
            {
              "visible": false,
              "columnLabel": "Severity",
              "columnKey": "alert-severity"
            },
            {
              "visible": true,
              "columnLabel": "Began",
              "columnKey": "alert-began"
            },
            {
              "visible": true,
              "columnLabel": "Resource/Website",
              "columnKey": "alert-device"
            },
            {
              "visible": true,
              "columnLabel": "LogicModule",
              "columnKey": "alert-datasource"
            },
            {
              "visible": true,
              "columnLabel": "Instance",
              "columnKey": "alert-datasource-instance"
            },
            {
              "visible": true,
              "columnLabel": "Datapoint",
              "columnKey": "alert-datapoint"
            },
            {
              "visible": true,
              "columnLabel": "Value",
              "columnKey": "alert-value"
            },
            {
              "visible": true,
              "columnLabel": "Effective Thresholds",
              "columnKey": "alert-thresholds"
            },
            {
              "visible": false,
              "columnLabel": "Group",
              "columnKey": "alert-group"
            },
            {
              "visible": false,
              "columnLabel": "Notes",
              "columnKey": "alert-notes"
            },
            {
              "visible": false,
              "columnLabel": "Acknowledged By",
              "columnKey": "alert-acked-by"
            },
            {
              "visible": false,
              "columnLabel": "Acknowledged On",
              "columnKey": "alert-acked-on"
            },
            {
              "visible": false,
              "columnLabel": "Cleared On",
              "columnKey": "alert-cleared-on"
            },
            {
              "visible": false,
              "columnLabel": "In SDT",
              "columnKey": "alert-in-sdt"
            },
            {
              "visible": false,
              "columnLabel": "Alert Rule",
              "columnKey": "alert-rule-name"
            },
            {
              "visible": false,
              "columnLabel": "Escalation Chain",
              "columnKey": "alert-escalation-chain"
            },
            {
              "visible": false,
              "columnLabel": "Instance Description",
              "columnKey": "alert-datasource-instance-description"
            },
            {
              "visible": false,
              "columnLabel": "Full Path",
              "columnKey": "alert-full-path"
            },
            {
              "visible": false,
              "columnLabel": "Routing State",
              "columnKey": "alert-routing-state"
            },
            {
              "visible": false,
              "columnLabel": "Dependency Role",
              "columnKey": "alert-dependency-role"
            },
            {
              "visible": false,
              "columnLabel": "Dependent Alerts",
              "columnKey": "alert-dependent-alerts"
            }
          ],
          "playSound": {},
          "fontsize": "normal-font",
          "sort": "-startEpoch"
        },
        "name": "vCenter Virtual Machine Alerts",
        "description": "",
        "theme": "newSolidDarkBlue",
        "interval": 3,
        "filters": {
          "severity": "",
          "sdted": "all",
          "chain": "",
          "instance": "*%23%23defaultInstance%23%23*",
          "dataPoint": "",
          "rule": "",
          "acked": "all",
          "dependencyRoutingState": "",
          "dependencyRole": "",
          "host": "",
          "keyword": "",
          "dataSource": "VMware%20*",
          "cleared": "no",
          "group": "%23%23defaultResourceGroup%23%23*"
        },
        "type": "alert",
        "timescale": "day",
        "version": 2
      }
    },
    {
      "position": {
        "col": 10,
        "sizex": 3,
        "row": 7,
        "sizey": 5
      },
      "config": {
        "ackChecked": true,
        "displaySettings": {
          "showTypeIcon": false,
          "displayAs": "table"
        },
        "displayWarnAlert": true,
        "description": "",
        "type": "noc",
        "version": 2,
        "displayErrorAlert": true,
        "displayColumn": 4,
        "name": "Virtual Machine Alert Status",
        "displayCriticalAlert": true,
        "theme": "newSolidDarkBlue",
        "interval": 3,
        "sortBy": "alertSeverity",
        "timescale": "day",
        "sdtChecked": true,
        "items": [{
          "dataPointName": "*",
          "instanceName": "*##defaultInstance##*",
          "name": "##INSTANCE##",
          "dataSourceDisplayName": "VMware VM Performance",
          "groupBy": "instance",
          "type": "device",
          "deviceGroupFullPath": "##defaultResourceGroup##",
          "deviceDisplayName": "*"
        }]
      }
    },
    {
      "position": {
        "col": 10,
        "sizex": 3,
        "row": 4,
        "sizey": 3
      },
      "config": {
        "bigNumberInfo": {
          "virtualDataPoints": [],
          "counters": [],
          "dataPoints": [
            {
              "dataPointName": "VmCount",
              "instanceName": "*",
              "dataSourceFullName": "VMware Object Count (VMware_vCenter_ObjectCount)",
              "name": "esxVmCount",
              "aggregateFunction": "SUM",
              "deviceGroupFullPath": "##defaultResourceGroup##",
              "deviceDisplayName": "*"
            },
            {
              "dataPointName": "VmOnCount",
              "instanceName": "*",
              "dataSourceFullName": "VMware Object Count (VMware_vCenter_ObjectCount)",
              "name": "esxVmCount_On",
              "aggregateFunction": "SUM",
              "deviceGroupFullPath": "##defaultResourceGroup##",
              "deviceDisplayName": "*"
            },
            {
              "dataPointName": "VmOffCount",
              "instanceName": "*",
              "dataSourceFullName": "VMware Object Count (VMware_vCenter_ObjectCount)",
              "name": "esxVmCount_Off",
              "aggregateFunction": "SUM",
              "deviceGroupFullPath": "##defaultResourceGroup##",
              "deviceDisplayName": "*"
            }
          ],
          "bigNumberItems": [
            {
              "dataPointName": "esxVmCount",
              "useCommaSeparators": false,
              "bottomLabel": "",
              "rounding": 0,
              "position": 1,
              "rightLabel": "Virtual Machines",
              "colorThresholds": null
            },
            {
              "dataPointName": "esxVmCount_On",
              "useCommaSeparators": false,
              "bottomLabel": "",
              "rounding": 0,
              "position": 2,
              "rightLabel": "Powered On VMs",
              "colorThresholds": null
            },
            {
              "dataPointName": "esxVmCount_Off",
              "useCommaSeparators": false,
              "bottomLabel": "",
              "rounding": 0,
              "position": 3,
              "rightLabel": "Powered Off VMs",
              "colorThresholds": null
            }
          ]
        },
        "displaySettings": {},
        "name": "VMware Virtual Machine Statistics",
        "description": "",
        "theme": "newSolidDarkBlue",
        "interval": 3,
        "type": "bigNumber",
        "timescale": "day",
        "version": 2
      }
    },
    {
      "position": {
        "col": 10,
        "sizex": 3,
        "row": 1,
        "sizey": 3
      },
      "config": {
        "displaySettings": {},
        "name": "Resource Selector",
        "description": "",
        "theme": "newSolidDarkBlue",
        "interval": 15,
        "type": "text",
        "timescale": "day",
        "version": 2,
        "content": "<!-- \n\tDYNAMIC TOKEN UPDATER v1.9.1\n\n\tThis script was created in response to users wanting a way to update groups and/or resources shown on a dashboard quickly & easily using some drop-down menus.\n\tNOTE: while this script leverages standard LogicMonitor APIs and features, this script itself is not officially supported by LogicMonitor.\n\n\tTo use this, just add a Text widget to your dashboard and in the widget's configuration screen click the \"source\" view then paste in this code. You can also just clone this widget to another dashboard on the same portal.\n\n\tAS NOTED BELOW, THIS CODE USES LOGICMONITOR API CALLS THAT REQUIRE A SET OF CREDENTIALS TO BE SET IN TOKENS ('apiID' & 'apiKey'), SO IF YOU EXPORT THIS DASHBOARD FOR USE ON ANOTHER PORTAL BE SURE TO REPLACE THOSE CREDENTIALS ON IMPORT!\n\n\t---\n\n\tPREREQUISITES:\n\tThere are a few dashboard tokens containing information that the Resource Selector will use:\n\n\t'apiID' & 'apiKey': A valid LogicMonitor API ID and key for this portal that will be used for REST API calls. The API account will need \"manage\" privileges for the dashboard where the widget's being used. Note: there's a place near the top of the script section below where you can optionally hard-code these two values instead of more openly exposing them in a token.\n\n\t'defaultResourceGroup': A common token used by the widgets on the dashboard. The 'Resource Group' drop-down menu will update this token.\n\n\t'defaultResourceName': (optional) A common token used by widgets on a dashboard. The 'Resource' drop-down menu will update this token. If not set then the script will hide the relevant menu.\n\n\t'defaultInstance': (optional) Token used by widgets on a dashboard for specifying instances to show data for. The 'Instance' drop-down menu will update this token upon clicking Go. Note that if you want to use the 'Instances' menu, it requires a named resource and a datasource to fetch instances for. If the 'defaultInstance' token or 'defaultDatasource' tokens aren't defined on the dashboard OR the 'Resource' menu is set to \"*\" then the 'Instance' menu will be hidden.\n\n\t'dynamicGroupParentID': (optional) The numeric ID of a parent group you want to limit the dynamic group drop-down to. Will default to the root group (ID 1) if not specified.\n\n\t'defaultDatasource': (optional) Name of a datasource that will be used for gathering instances that dynamically populate the 'Instances' drop-down menu.\n\n\t'hideDynamicGroupDropdown' or 'hideDynamicResourceDropdown' or 'hideDynamicInstanceDropdown': (optional) can be set to \"true\" to force the 'Resource Group', 'Resource', or 'Instance' drop-down (respectively) to be hidden. This allows the widget to be flexible for choosing a group, a resource, an instance, or any of them.\n\t\n\n\tSO HOW DOES THIS WORK?\n\n\tWhen this Text widget is first loaded, Javascript embedded in the HTML source makes a call to the LogicMonitor REST API to get a list of resource groups to populate options in the \"Resource Group\" drop-down. A list of resources within the selected group is then fetched to populate the Resource drop-down.\n\n\tWhen the 'Resource Group' menu is changed (if shown), the 'Resource' drop-down list will auto-update to reflect what's inside the newly chosen group. When the 'Resource' menu is changed, the 'Instance' drop-down list will auto-populate with a list of instances for the chosen resource for the datasource specified in the 'defaultDatasource' token.\n\n\tWhen the Go button is clicked, the script does the following actions:\n\t1. Makes note of the current dashboard's URL and ID.\n\t2. Calls LogicMonitor's \"Get Dashboard\" REST method to get the current dashboard definition.\n\t3. Loops through the dashboard's tokens retrieved during step #2 looking for 'defaultResourceGroup', 'defaultResourceName', and 'defaultInstance'. If found, it updates them in memory with the values chosen on the drop-downs (unless the respective field was set to be hidden).\n\t4. Calls LogicMonitor's \"Update Dashboard\" REST method to save the new token values.\n\t5. Refreshes the page to reflect the new values.\n-->\n<link href=\"https://static-prod.logicmonitor.com/sbui133-1/commons/stylesheets2/startup.css?v=220429\" rel=\"stylesheet\" />\n<style type=\"text/css\">#pickerControls {margin: 5px 5px 0 5px;}\n\t#pickerControls p {margin: 5px 3px;}\n\t#pickerControls td {padding: 5px 3px;}\n\t#pickerControls select {max-width: 250px; overflow: hidden; white-space: nowrap; text-overflow: ellipsis;}\n\t#pickerControls label {color: white;}\n\t#resourceNameTitle {color: aquamarine; font-size: 28px; padding: 0 0 15px 0;}\n<\/style>\n<div id=\"pickerControls\">\n<div id=\"resourceNameTitle\">##defaultInstance##<\/div>\n\n<table>\n\t<tbody>\n\t\t<tr id=\"groupPickerControls\">\n\t\t\t<td><label for=\"groupPicker\">Resource Group:<\/label><\/td>\n\t\t\t<td><select id=\"groupPicker\" onchange=\"populateResourceDropdown();\"><option value=\"*\">*<\/option><\/select><\/td>\n\t\t<\/tr>\n\t\t<tr id=\"resourcePickerControls\">\n\t\t\t<td><label for=\"resourcePicker\">Resource:<\/label><\/td>\n\t\t\t<td><select id=\"resourcePicker\" onchange=\"populateInstanceDropdown();\"><option value=\"*\">*<\/option><\/select>\n\t\t\t<div class=\"loadingcircles32 loading-icon\" id=\"resourcePickerThrobber\" style=\"position:fixed; margin-top:-5px; display: none;\">\n\t\t\t<div class=\"circle32-gray circle32_01\">&nbsp;<\/div>\n\n\t\t\t<div class=\"circle32-gray circle32_02\">&nbsp;<\/div>\n\n\t\t\t<div class=\"circle32-gray circle32_03\">&nbsp;<\/div>\n\n\t\t\t<div class=\"circle32-gray circle32_04\">&nbsp;<\/div>\n\n\t\t\t<div class=\"circle32-gray circle32_05\">&nbsp;<\/div>\n\n\t\t\t<div class=\"circle32-gray circle32_06\">&nbsp;<\/div>\n\n\t\t\t<div class=\"circle32-gray circle32_07\">&nbsp;<\/div>\n\n\t\t\t<div class=\"circle32-gray circle32_08\">&nbsp;<\/div>\n\t\t\t<\/div>\n\t\t\t<\/td>\n\t\t<\/tr>\n\t\t<tr id=\"instancePickerControls\">\n\t\t\t<td><label for=\"instancePicker\">Instance:<\/label><\/td>\n\t\t\t<td><select id=\"instancePicker\"><option value=\"*\">*<\/option><\/select>\n\t\t\t<div class=\"loadingcircles32 loading-icon\" id=\"instancePickerThrobber\" style=\"position:fixed; margin-top:-5px; display: none;\">\n\t\t\t<div class=\"circle32-gray circle32_01\">&nbsp;<\/div>\n\n\t\t\t<div class=\"circle32-gray circle32_02\">&nbsp;<\/div>\n\n\t\t\t<div class=\"circle32-gray circle32_03\">&nbsp;<\/div>\n\n\t\t\t<div class=\"circle32-gray circle32_04\">&nbsp;<\/div>\n\n\t\t\t<div class=\"circle32-gray circle32_05\">&nbsp;<\/div>\n\n\t\t\t<div class=\"circle32-gray circle32_06\">&nbsp;<\/div>\n\n\t\t\t<div class=\"circle32-gray circle32_07\">&nbsp;<\/div>\n\n\t\t\t<div class=\"circle32-gray circle32_08\">&nbsp;<\/div>\n\t\t\t<\/div>\n\t\t\t<\/td>\n\t\t<\/tr>\n\t<\/tbody>\n<\/table>\n\n<p><button class=\"lm-button small blue animate\" onclick=\"updateDashboard();\">Go<\/button><\/p>\n<\/div>\n<!--  --><script>\n\t// (OPTIONAL) You can set values for the ID and key needed for the LogicMonitor REST API calls inside the quotes of the two lines below. This allows the API keys to not be as visibly exposed. If either value (ID or key) is set as a dashboard token then it will override the value set here.\n\tvar apiID = \"\"\n\tvar apiKey = \"\"\n\n\t// (Part of this customization) Label we'll show instead of \"*\" if all resources are being shown...\n\tvar allDevicesLabel = \"All devices\"\n\n\t// Maximum number of groups and resources to retrieve...\n\tconst maxGroups = 500\n\tconst maxResources = 1000\n\t// const vmPerfDatasourceName = \"VMware_vCenter_VMPerformance\"\n\t// ---\n\n\t// Capture information from specific dashboard tokens we'll be using...\n\n\t// Capture our API credentials from token...\n\tvar apiIDToken = \"##apiID##\"\n\tvar apiKeyToken = \"##apiKey##\"\n\t// If the token values weren't set then use the values hard-coded above in this script...\n\tif (apiIDToken != \"\\#\\#apiID\\#\\#\") {\n\t\tapiID = apiIDToken\n\t}\n\tif (apiKeyToken != \"\\#\\#apiKey\\#\\#\") {\n\t\tapiKey = apiKeyToken\n\t}\n\n\t// The names of the tokens we'll be updating...\n\tconst defaultResourceGroupTokenName = \"defaultResourceGroup\"\n\tconst defaultResourceNameTokenName = \"defaultResourceName\"\n\tconst defaultInstanceTokenName = \"defaultInstance\"\n\t// Capture the current values of the tokens...\n\t// (Like any token inserted into the Text widget, LogicMonitor automatically inserts these token values as the page is being rendered so Javascript is able to pick them as if the values were there originally. If a token isn't set then the variable's value will be literally what's shown below, including the double-hashtags.)\n\tvar defaultResourceGroupInitialValue = \"##defaultResourceGroup##\"\n\tvar defaultResourceNameInitialValue = \"##defaultResourceName##\"\n\tvar defaultInstanceInitialValue = \"##defaultInstance##\"\n\tvar defaultDatasourceInitialValue = \"##defaultDatasource##\"\n\tvar dynamicGroupParentID = \"##dynamicGroupParentID##\"\n\tvar hideDynamicGroupDropdown = \"##hideDynamicGroupDropdown##\"\n\tvar hideDynamicResourceDropdown = \"##hideDynamicResourceDropdown##\"\n\tvar hideDynamicInstanceDropdown = \"##hideDynamicInstanceDropdown##\"\n\tvar groupsCSV = \"##groupsCSV##\"\n\tvar resourcesCSV = \"##resourcesCSV##\"\n\t// The 'dynamicGroupParentID' is an optional token the user can set to limit the group list to a specific parent. Use the root group (ID 1) if the token wasn't set...\n\tif (isNaN(dynamicGroupParentID)) {\n\t\tdynamicGroupParentID = 1\n\t}\n\n\t// If we were passed a 'groupsCSV' token, sort the values...\n\tif (groupsCSV != \"\\#\\#groupsCSV\\#\\#\") {\n\t\tgroupsCSV = groupsCSV.split(\",\").sort().join(\",\")\n\t}\n\t// If we were passed a 'groupsCSV' token, sort the values...\n\tif (resourcesCSV != \"\\#\\#resourcesCSV\\#\\#\") {\n\t\tresourcesCSV = resourcesCSV.split(\",\").sort().join(\",\")\n\t}\n\n\t// Prep variables to capture/set 'defaultResourceGroup' tokens...\n\tvar processGroupToken = true\n\t// Hide the Resource Group menu if a \"hideDynamicGroupDropdown\" token is set to \"true\"...\n\tif (hideDynamicGroupDropdown == \"true\" || groupsCSV != \"\\#\\#groupsCSV\\#\\#\" || resourcesCSV != \"\\#\\#resourcesCSV\\#\\#\") {\n\t\t// Hide the menu...\n\t\tdocument.querySelector(\"#groupPickerControls\").style.display = \"none\"\n\n\t\tprocessGroupToken = false\n\t}\n\n\t// Prep variables to capture/set 'defaultResourceName' tokens...\n\tvar processResourceToken = true\n\t// Hide the Resource menu if a \"defaultResourceName\" token wasn't preset or if a \"hideDynamicResourceDropdown\" token is set to \"true\"...\n\tif (defaultResourceNameInitialValue == \"\\#\\#defaultResourceName\\#\\#\" || groupsCSV != \"\\#\\#groupsCSV\\#\\#\" || hideDynamicResourceDropdown == \"true\") {\n\t\t// Hide the menu...\n\t\tdocument.querySelector(\"#resourcePickerControls\").style.display = \"none\"\n\n\t\tprocessResourceToken = false\n\t}\n\n\t// Prep variables to capture/set 'defaultInstance' tokens...\n\tvar processInstanceToken = true\n\t// Hide the Instance menu if \"defaultInstance\" or \"defaultDatasource\" tokens weren't preset, or if a \"hideDynamicInstanceDropdown\" token is set to \"true\"...\n\tif (defaultInstanceInitialValue == \"\\#\\#defaultInstance\\#\\#\" || defaultDatasourceInitialValue == \"\\#\\#defaultDatasource\\#\\#\" || defaultResourceNameInitialValue == \"*\" || groupsCSV != \"\\#\\#groupsCSV\\#\\#\" || resourcesCSV != \"\\#\\#resourcesCSV\\#\\#\" || hideDynamicInstanceDropdown == \"true\") {\n\t\t// Hide the menu...\n\t\t// document.querySelector(\"#instancePickerControls\").style.display = \"none\"\n\t\tshowInstanceFields(false)\n\n\t\tprocessInstanceToken = false\n\n\t\t// Default our instance value...\n\t\tdefaultInstanceInitialValue = \"*\"\n\t}\n\n\t// ---\n\n\t// Capture information about the current dashboard for use in subsequent REST calls...\n\tvar hostName = parent.window.location.host\n\tvar locationHash = parent.window.location.hash // example result: \"#dashboard=21\"\n\tvar dashboardID = locationHash.replace(\"#dashboard=\", \"\")\n\n\t// Encoder to convert strings to Uint8Array for API signatures...\n\tvar enc = new TextEncoder(\"utf-8\")\n\n\t// If showing all instances, change our resource title to something more friendly than \"*\"...\n\tif (defaultInstanceInitialValue == \"*\") {\n\t\tdocument.querySelector(\"#resourceNameTitle\").innerText = allDevicesLabel\n\t}\n\n\t// Populate the drop-downs...\n\tif (processGroupToken) {\n\t\tpopulateGroupDropdown()\n\t} else if (processResourceToken) {\n\t\tpopulateResourceDropdown()\n\t} else {\n\t\tpopulateInstanceDropdown()\n\t}\n\n\t// ----- FUNCTIONS\n\n\t// Function processing status of Fetch calls...\n\tfunction status(response) {\n\t  if (response.status >= 200 && response.status < 300) {\n\t    return Promise.resolve(response)\n\t  } else {\n\t    return Promise.reject(new Error(response.statusText))\n\t  }\n\t}\n\n\n\t// Pre-processor for JSON responses from Fetch calls...\n\tfunction json(response) {\n\t  return response.json()\n\t}\n\n\n\tfunction showInstanceFields(visible) {\n\t\tif (visible) {\n\t\t\t// Show the menu...\n\t\t\tdocument.querySelector(\"#instancePickerControls\").style.display = \"contents\"\n\t\t} else {\n\t\t\t// Hide the menu...\n\t\t\tdocument.querySelector(\"#instancePickerControls\").style.display = \"none\"\n\t\t}\n\t}\n\n\n\t// Function for retrieving a list of groups from LogicMonitor and populating the appropriate drop-down...\n\tfunction populateGroupDropdown() {\n\t\t// If we weren't passed a comma-separated list of groups, dynamically populate the menu...\n\t\tif (groupsCSV == \"\\#\\#groupsCSV\\#\\#\") {\n\t\t\t// Request Details...\n\t\t\tvar httpVerb = \"GET\"\n\t\t\tvar epoch = (new Date).getTime()\n\t\t\tvar resourcePath = \"/device/groups\"\n\t\t\tvar queryParams = \"?sort=fullPath&fields=id,fullPath&size=\" + maxGroups + \"&filter=numOfHosts>0\"\n\n\t\t\t// Construct signature... \n\t\t\tvar requestVars = httpVerb + epoch + resourcePath\n\n\t\t\t// Prep our URL & query for the REST call (note: the query is set to exclude empty groups)...\n\t\t\tif (dynamicGroupParentID != 1) {\n\t\t\t\t// If a parent group was defined...\n\t\t\t\tvar queryParams = queryParams + \",parentId:\" + dynamicGroupParentID\n\t\t\t}\n\t\t\tvar apiURL = \"https://\" + hostName + \"/santaba/rest\" + resourcePath + queryParams\n\n\t\t\t// Create our API signature...\n\t\t\twindow.crypto.subtle.importKey(\n\t\t\t\t\"raw\", // raw format of the key - should be Uint8Array\n\t\t\t\tenc.encode(apiKey),\n\t\t\t\t{ // algorithm details\n\t\t\t\t\tname: \"HMAC\",\n\t\t\t\t\thash: {name: \"SHA-256\"}\n\t\t\t\t},\n\t\t\t\tfalse, // export = false\n\t\t\t\t[\"sign\", \"verify\"] // what this key can do\n\t\t\t).then( key => {\n\t\t\t\twindow.crypto.subtle.sign(\n\t\t\t\t\t\"HMAC\",\n\t\t\t\t\tkey,\n\t\t\t\t\tenc.encode(requestVars)\n\t\t\t\t).then(signature => {\n\t\t\t\t\tvar b = new Uint8Array(signature)\n\t\t\t\t\tvar hmacX = Array.prototype.map.call(b, x => ('00'+x.toString(16)).slice(-2)).join(\"\")\n\t\t\t\t\tvar signature = btoa(hmacX)\n\n\t\t\t\t\t// Construct auth header...\n\t\t\t\t\tvar auth = \"LMv1 \" + apiID + \":\" + signature + \":\" + epoch\n\n\t\t\t\t\t// We now have what's needed for LMv1 API Token authentication. Let's make our API call...\n\n\t\t\t\t\t// Call the LogicMonitor API to get a list of groups...\n\t\t\t\t\tfetch(apiURL, {\n\t\t\t\t\t\tmethod: httpVerb,\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Content-Type': 'application/json;charset=utf-8',\n\t\t\t\t\t\t\t'Authorization': auth\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t\t.then(status)\n\t\t\t\t\t.then(json)\n\t\t\t\t\t.then(function(data) {\n\t\t\t\t\t\t// console.log('Group request succeeded with JSON response', data)\n\n\t\t\t\t\t\t// Populate the alert groups drop-down...\n\t\t\t\t\t\tdata.data.items.forEach(thisItem => {\n\t\t\t\t\t\t\tif (thisItem.fullPath != \"\") {\n\t\t\t\t\t\t\t\tvar option = document.createElement(\"option\")\n\t\t\t\t\t\t\t\toption.text = thisItem.fullPath\n\t\t\t\t\t\t\t\toption.value = thisItem.fullPath\n\t\t\t\t\t\t\t\toption.setAttribute(\"data-id\", thisItem.id)\n\t\t\t\t\t\t\t\t// As we loop through, pre-select the group that matches the dashboard's current token...\n\t\t\t\t\t\t\t\tif (thisItem.fullPath == defaultResourceGroupInitialValue) {\n\t\t\t\t\t\t\t\t\toption.selected = true\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Add the option to the drop-down...\n\t\t\t\t\t\t\t\tdocument.getElementById(\"groupPicker\").add(option)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\n\t\t\t\t\t\t// Update the resource drop-down (if appropriate)...\n\t\t\t\t\t\tif (processResourceToken) {\n\t\t\t\t\t\t\tpopulateResourceDropdown()\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t})\n\t\t} else {\n\t\t\t// We were passed a comma-separate list of groups, so let's add them to the drop-down...\n\t\t\t// First, remove the default option (\"*\") from the list...\n\t\t\tdocument.getElementById(\"groupPicker\").remove(0)\n\n\t\t\t// Populate our drop-down options from the token...\n\t\t\tvar optionArray = groupsCSV.split(\",\")\n\t\t\tfor (var i=0; i<optionArray.length; i++) {\n\t\t\t\tvar option = document.createElement(\"option\")\n\t\t\t\toption.text = optionArray[i].trim()\n\t\t\t\toption.value = optionArray[i].trim()\n\t\t\t\t// As we loop through, pre-select the group that matches the dashboard's current token...\n\t\t\t\tif (optionArray[i].trim() == defaultResourceGroupInitialValue) {\n\t\t\t\t\toption.selected = true\n\t\t\t\t}\n\t\t\t\t// Add the option to the drop-down...\n\t\t\t\tdocument.getElementById(\"groupPicker\").add(option)\n\t\t\t}\n\t\t}\n\t}\n\n\n\tfunction populateResourceDropdown() {\n\t\t// If we weren't passed a comma-separated list of groups, dynamically populate the menu...\n\t\tif (resourcesCSV == \"\\#\\#resourcesCSV\\#\\#\") {\n\t\t\t// Reset the drop-down menu between refreshes (but leave \"*\" as the top option)...\n\t\t\tfor (var i = document.getElementById(\"resourcePicker\").options.length; i > 0; i--) {\n\t\t\t\tdocument.getElementById(\"resourcePicker\").remove(i)\n\t\t\t}\n\n\t\t\tvar selectedGroup = defaultResourceGroupInitialValue\n\t\t\tif (processGroupToken) {\n\t\t\t\t// Get the value of the Resource Group drop-down...\n\t\t\t\tvar selectedGroup = document.getElementById(\"groupPicker\").value\n\t\t\t}\n\n\t\t\t// Display the loading icon...\n\t\t\tdocument.querySelector(\"#resourcePickerThrobber\").style.display = \"inline-block\"\n\n\t\t\t// Get resources...\n\n\t\t\t// Request Details...\n\t\t\tvar httpVerb = \"GET\"\n\t\t\tvar epoch = (new Date).getTime()\n\t\t\tvar resourcePath = \"/device/devices\"\n\t\t\tvar queryParams = \"?sort=displayName&size=\" + maxResources + \"&fields=id,displayName,systemProperties\"\n\t\t\tif (selectedGroup != \"*\") {\n\t\t\t\tqueryParams = queryParams + \"&filter=systemProperties.name:system.groups,systemProperties.value~\" + selectedGroup\n\t\t\t}\n\n\t\t\t// Construct signature... \n\t\t\tvar requestVars = httpVerb + epoch + resourcePath\n\n\t\t\t// Prep our URL & query for the REST call...\n\t\t\tvar apiURL = \"https://\" + hostName + \"/santaba/rest\" + resourcePath + queryParams\n\n\t\t\t// Create our API signature...\n\t\t\twindow.crypto.subtle.importKey(\n\t\t\t\t\"raw\", // raw format of the key - should be Uint8Array\n\t\t\t\tenc.encode(apiKey),\n\t\t\t\t{ // algorithm details\n\t\t\t\t\tname: \"HMAC\",\n\t\t\t\t\thash: {name: \"SHA-256\"}\n\t\t\t\t},\n\t\t\t\tfalse, // export = false\n\t\t\t\t[\"sign\", \"verify\"] // what this key can do\n\t\t\t).then( key => {\n\t\t\t\twindow.crypto.subtle.sign(\n\t\t\t\t\t\"HMAC\",\n\t\t\t\t\tkey,\n\t\t\t\t\tenc.encode(requestVars)\n\t\t\t\t).then(signature => {\n\t\t\t\t\tvar b = new Uint8Array(signature)\n\t\t\t\t\tvar hmacX = Array.prototype.map.call(b, x => ('00'+x.toString(16)).slice(-2)).join(\"\")\n\t\t\t\t\tvar signature = btoa(hmacX)\n\n\t\t\t\t\t// Construct auth header...\n\t\t\t\t\tvar auth = \"LMv1 \" + apiID + \":\" + signature + \":\" + epoch\n\n\t\t\t\t\t// We now have what's needed for LMv1 API Token authentication. Let's make our API call...\n\n\t\t\t\t\t// Call the LogicMonitor API to get a list of the group's resources...\n\t\t\t\t\tfetch(apiURL, {\n\t\t\t\t\t\tmethod: httpVerb,\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Content-Type': 'application/json;charset=utf-8',\n\t\t\t\t\t\t\t'Authorization': auth\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t\t.then(status)\n\t\t\t\t\t.then(json)\n\t\t\t\t\t.then(function(data) {\n\t\t\t\t\t\t// console.log('Resource request succeeded with JSON response', data)\n\n\t\t\t\t\t\t// Populate the drop-down...\n\t\t\t\t\t\tdata.data.items.forEach(thisItem => {\n\t\t\t\t\t\t\tif (thisItem.fullPath != \"\") {\n\t\t\t\t\t\t\t\tvar option = document.createElement(\"option\")\n\t\t\t\t\t\t\t\toption.text = thisItem.displayName\n\t\t\t\t\t\t\t\toption.value = thisItem.displayName\n\t\t\t\t\t\t\t\toption.setAttribute(\"data-id\", thisItem.id)\n\t\t\t\t\t\t\t\t// As we loop through, pre-select the resource that matches the dashboard's current token...\n\t\t\t\t\t\t\t\tif (thisItem.displayName == defaultResourceNameInitialValue) {\n\t\t\t\t\t\t\t\t\toption.selected = true\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Add the option to the drop-down...\n\t\t\t\t\t\t\t\tdocument.getElementById(\"resourcePicker\").add(option)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\n\t\t\t\t\t\t// Hide the loading icon...\n\t\t\t\t\t\tdocument.querySelector(\"#resourcePickerThrobber\").style.display = \"none\"\n\n\t\t\t\t\t\t// if (processInstanceToken) {\n\t\t\t\t\t\t\tpopulateInstanceDropdown()\n\t\t\t\t\t\t// }\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t})\n\t\t} else {\n\t\t\t// We were passed a comma-separate list of resources, so let's add them to the drop-down...\n\t\t\t// First, remove the default option (\"*\") from the list...\n\t\t\tdocument.getElementById(\"resourcePicker\").remove(0)\n\n\t\t\t// Populate our drop-down options from the token...\n\t\t\tvar optionArray = resourcesCSV.split(\",\")\n\t\t\tfor (var i=0; i<optionArray.length; i++) {\n\t\t\t\tvar option = document.createElement(\"option\")\n\t\t\t\toption.text = optionArray[i].trim()\n\t\t\t\toption.value = optionArray[i].trim()\n\t\t\t\t// As we loop through, pre-select the resource that matches the dashboard's current token...\n\t\t\t\tif (optionArray[i].trim() == defaultResourceNameInitialValue) {\n\t\t\t\t\toption.selected = true\n\t\t\t\t}\n\t\t\t\t// Add the option to the drop-down...\n\t\t\t\tdocument.getElementById(\"resourcePicker\").add(option)\n\t\t\t}\n\t\t}\n\t}\n\n\n\tfunction populateInstanceDropdown() {\n\t\tif (processInstanceToken && document.getElementById(\"resourcePicker\").value != \"*\") {\n\n\t\t\tshowInstanceFields(true)\n\n\t\t\t// Reset the drop-down menu between refreshes (but leave \"*\" as the top option)...\n\t\t\tfor (var i = document.getElementById(\"instancePicker\").options.length; i > 0; i--) {\n\t\t\t\tdocument.getElementById(\"instancePicker\").remove(i)\n\t\t\t}\n\n\t\t\tvar selectedGroup = defaultResourceGroupInitialValue\n\t\t\tvar selectedResource = defaultResourceNameInitialValue\n\t\t\tvar selectedResourceID = 0\n\t\t\tif (processGroupToken) {\n\t\t\t\t// Get the value of the Resource Group drop-down...\n\t\t\t\tselectedGroup = document.getElementById(\"groupPicker\").value\n\t\t\t} else {\n\t\t\t\tselectedGroup = \"*\"\n\t\t\t}\n\t\t\tif (processResourceToken) {\n\t\t\t\t// Get the ID of the selected item on the Resource drop-down...\n\t\t\t\tselectedResourceID = document.getElementById(\"resourcePicker\")[document.getElementById(\"resourcePicker\").selectedIndex].getAttribute(\"data-id\")\n\t\t\t}\n\n\t\t\t// Display the loading icon...\n\t\t\tdocument.querySelector(\"#instancePickerThrobber\").style.display = \"inline-block\"\n\n\t\t\t// Get ID of our default datasource (the ID is different than the datasource URI seen in the LogicMonitor portal)...\n\n\t\t\t// Request Details...\n\t\t\tvar httpVerb = \"GET\"\n\t\t\tvar epoch = (new Date).getTime()\n\t\t\tvar resourcePath = \"/device/devices/\" + selectedResourceID + '/devicedatasources'\n\t\t\tvar queryParams = \"?sort=displayName&size=\" + maxResources + \"&fields=id,dataSourceName,instanceNumber&filter=dataSourceName:\" + defaultDatasourceInitialValue\n\t\t\t// if (selectedGroup != \"*\") {\n\t\t\t// \tqueryParams = queryParams + \"&filter=dataSourceName:\" + defaultDatasourceInitialValue\n\t\t\t// }\n\n\t\t\t// Construct signature... \n\t\t\tvar requestVars = httpVerb + epoch + resourcePath\n\n\t\t\t// Prep our URL & query for the REST call...\n\t\t\tvar apiURL = \"https://\" + hostName + \"/santaba/rest\" + resourcePath + queryParams\n\n\t\t\t// Create our API signature...\n\t\t\twindow.crypto.subtle.importKey(\n\t\t\t    \"raw\", // raw format of the key - should be Uint8Array\n\t\t\t    enc.encode(apiKey),\n\t\t\t    { // algorithm details\n\t\t\t        name: \"HMAC\",\n\t\t\t        hash: {name: \"SHA-256\"}\n\t\t\t    },\n\t\t\t    false, // export = false\n\t\t\t    [\"sign\", \"verify\"] // what this key can do\n\t\t\t).then( key => {\n\t\t\t    window.crypto.subtle.sign(\n\t\t\t        \"HMAC\",\n\t\t\t        key,\n\t\t\t        enc.encode(requestVars)\n\t\t\t    ).then(signature => {\n\t\t\t        var b = new Uint8Array(signature)\n\t\t\t        var hmacX = Array.prototype.map.call(b, x => ('00'+x.toString(16)).slice(-2)).join(\"\")\n\t\t\t        var signature = btoa(hmacX)\n\n\t\t\t        // Construct auth header...\n\t\t\t        var auth = \"LMv1 \" + apiID + \":\" + signature + \":\" + epoch\n\n\t\t\t        // We now have what's needed for LMv1 API Token authentication. Let's make our API call...\n\n\t\t\t\t\t// Call the LogicMonitor API to get a list of the group's resources...\n\t\t\t\t\tfetch(apiURL, {\n\t\t\t\t\t\tmethod: httpVerb,\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Content-Type': 'application/json;charset=utf-8',\n\t\t\t\t\t\t\t'Authorization': auth\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t\t.then(status)\n\t\t\t\t\t.then(json)\n\t\t\t\t\t.then(function(data) {\n\t\t\t\t\t\t// console.log('Datasource request succeeded with JSON response', data)\n\n\t\t\t\t\t\tvar vmPerfDatasourceID = 0\n\n\t\t\t\t\t\t// Populate the drop-down...\n\t\t\t\t\t\tdata.data.items.forEach(thisItem => {\n\t\t\t\t\t\t\t// Check to make sure we have a numeric datasource ID...\n\t\t\t\t\t\t\tif (!isNaN(thisItem.id)) {\n\t\t\t\t\t\t\t\tvmPerfDatasourceID = thisItem.id\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t// console.log('Datasource ID: ' + vmPerfDatasourceID)\n\n\n\t\t\t\t\t\t// Get list of instance names for the datasource...\n\n\n\t\t\t\t\t\t// Request Details...\n\t\t\t\t\t\tvar httpVerb = \"GET\"\n\t\t\t\t\t\tvar epoch = (new Date).getTime()\n\t\t\t\t\t\t// /device/devices/{deviceId}/devicedatasources/{deviceDatasourceId}/instances\n\t\t\t\t\t\tvar resourcePath = \"/device/devices/\" + selectedResourceID + '/devicedatasources/' + vmPerfDatasourceID + '/instances'\n\t\t\t\t\t\tvar queryParams = \"?sort=displayName&size=\" + maxResources + \"&fields=id,name,displayName\"\n\n\t\t\t\t\t\t// Construct signature... \n\t\t\t\t\t\tvar requestVars = httpVerb + epoch + resourcePath\n\n\t\t\t\t\t\t// Prep our URL & query for the REST call...\n\t\t\t\t\t\tvar apiURL = \"https://\" + hostName + \"/santaba/rest\" + resourcePath + queryParams\n\n\t\t\t\t\t\t// Create our API signature...\n\t\t\t\t\t\twindow.crypto.subtle.importKey(\n\t\t\t\t\t\t    \"raw\", // raw format of the key - should be Uint8Array\n\t\t\t\t\t\t    enc.encode(apiKey),\n\t\t\t\t\t\t    { // algorithm details\n\t\t\t\t\t\t        name: \"HMAC\",\n\t\t\t\t\t\t        hash: {name: \"SHA-256\"}\n\t\t\t\t\t\t    },\n\t\t\t\t\t\t    false, // export = false\n\t\t\t\t\t\t    [\"sign\", \"verify\"] // what this key can do\n\t\t\t\t\t\t).then( key => {\n\t\t\t\t\t\t    window.crypto.subtle.sign(\n\t\t\t\t\t\t        \"HMAC\",\n\t\t\t\t\t\t        key,\n\t\t\t\t\t\t        enc.encode(requestVars)\n\t\t\t\t\t\t    ).then(signature => {\n\t\t\t\t\t\t        var b = new Uint8Array(signature)\n\t\t\t\t\t\t        var hmacX = Array.prototype.map.call(b, x => ('00'+x.toString(16)).slice(-2)).join(\"\")\n\t\t\t\t\t\t        var signature = btoa(hmacX)\n\n\t\t\t\t\t\t        // Construct auth header...\n\t\t\t\t\t\t        var auth = \"LMv1 \" + apiID + \":\" + signature + \":\" + epoch\n\n\t\t\t\t\t\t        // We now have what's needed for LMv1 API Token authentication. Let's make our API call...\n\n\t\t\t\t\t\t\t\t// Call the LogicMonitor API to get a list of the group's resources...\n\t\t\t\t\t\t\t\tfetch(apiURL, {\n\t\t\t\t\t\t\t\t\tmethod: httpVerb,\n\t\t\t\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\t\t\t'Content-Type': 'application/json;charset=utf-8',\n\t\t\t\t\t\t\t\t\t\t'Authorization': auth\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.then(status)\n\t\t\t\t\t\t\t\t.then(json)\n\t\t\t\t\t\t\t\t.then(function(data) {\n\t\t\t\t\t\t\t\t\t// console.log('Instance request succeeded with JSON response', data)\n\n\t\t\t\t\t\t\t\t\t// Populate the drop-down...\n\t\t\t\t\t\t\t\t\tdata.data.items.forEach(thisItem => {\n\t\t\t\t\t\t\t\t\t\tif (thisItem.fullPath != \"\") {\n\t\t\t\t\t\t\t\t\t\t\tvar option = document.createElement(\"option\")\n\t\t\t\t\t\t\t\t\t\t\toption.text = thisItem.displayName\n\t\t\t\t\t\t\t\t\t\t\t// Set the option value to the instance name and escape any backslashes...\n\t\t\t\t\t\t\t\t\t\t\toption.value = thisItem.displayName.replace(\"\\\\\", \"\\\\\\\\\")\n\t\t\t\t\t\t\t\t\t\t\toption.setAttribute(\"data-id\", thisItem.id)\n\t\t\t\t\t\t\t\t\t\t\t// As we loop through, pre-select the instance that matches the dashboard's current token...\n\t\t\t\t\t\t\t\t\t\t\tif (thisItem.displayName == defaultInstanceInitialValue) {\n\t\t\t\t\t\t\t\t\t\t\t\toption.selected = true\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Add the option to the drop-down...\n\t\t\t\t\t\t\t\t\t\t\tdocument.getElementById(\"instancePicker\").add(option)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t})\n\n\t\t\t\t\t\t\t\t\t// console.log('Datasource ID: ' + vmPerfDatasourceID)\n\n\t\t\t\t\t\t\t\t\t// Hide the loading icon...\n\t\t\t\t\t\t\t\t\tdocument.querySelector(\"#instancePickerThrobber\").style.display = \"none\"\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t    })\n\t\t\t\t\t\t})\n\n\n\n\t\t\t\t\t\t// Hide the loading icon...\n\t\t\t\t\t\tdocument.querySelector(\"#instancePickerThrobber\").style.display = \"none\"\n\n\t\t\t\t\t\tdocument.getElementById(\"instancePicker\").chosen()\n\t\t\t\t\t})\n\t\t\t    })\n\t\t\t})\n\t\t} else {\n\t\t\tshowInstanceFields(false)\n\t\t}\n\t}\n\n\n\tfunction updateDashboard() {\n\t\t// Get the selected values of our drop-down menus...\n\t\tvar newResourceGroup = document.getElementById(\"groupPicker\").value\n\t\tvar newResource = document.getElementById(\"resourcePicker\").value\n\t\tvar newInstance = document.getElementById(\"instancePicker\").value\n\n\t\t// Request Details...\n\t\tvar httpVerb = \"GET\"\n\t\tvar epoch = (new Date).getTime()\n\t\tvar resourcePath = \"/dashboard/dashboards/\" + dashboardID\n\t\tvar queryParams = \"\"\n\n\t\t// Construct signature...\n\t\tvar requestVars = httpVerb + epoch + resourcePath\n\n\t\t// Prep our URL & query for the REST call...\n\t\tvar apiURL = \"https://\" + hostName + \"/santaba/rest\" + resourcePath + queryParams\n\n\t\t// Create our API signature...\n\t\twindow.crypto.subtle.importKey(\n\t\t    \"raw\", // raw format of the key - should be Uint8Array\n\t\t    enc.encode(apiKey),\n\t\t    { // algorithm details\n\t\t        name: \"HMAC\",\n\t\t        hash: {name: \"SHA-256\"}\n\t\t    },\n\t\t    false, // export = false\n\t\t    [\"sign\", \"verify\"] // what this key can do\n\t\t).then( key => {\n\t\t    window.crypto.subtle.sign(\n\t\t        \"HMAC\",\n\t\t        key,\n\t\t        enc.encode(requestVars)\n\t\t    ).then(signature => {\n\t\t        var b = new Uint8Array(signature)\n\t\t        var hmacX = Array.prototype.map.call(b, x => ('00'+x.toString(16)).slice(-2)).join(\"\")\n\t\t        var signature = btoa(hmacX)\n\n\t\t        // Construct auth header...\n\t\t        var auth = \"LMv1 \" + apiID + \":\" + signature + \":\" + epoch\n\n\t\t        // We now have what's needed for LMv1 API Token authentication. Let's make our API call...\n\n\t\t\t\t// Call the API to get the current dashboard definition...\n\t\t\t\tfetch(apiURL, {\n\t\t\t\t\tmethod: httpVerb,\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type': 'application/json;charset=utf-8',\n\t\t\t\t\t\t'Authorization': auth\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t\t.then(status)\n\t\t\t\t.then(json)\n\t\t\t\t.then(function(data) {\n\t\t\t\t\t// console.log('Get Dashboard request succeeded with JSON response', data)\n\n\t\t\t\t\t// Loop through the dashboard's tokens looking for the one(s) we want to change...\n\t\t\t\t\tdata.data.widgetTokens.forEach(thisToken => {\n\t\t\t\t\t\t// Resource group...\n\t\t\t\t\t\tif (processGroupToken && thisToken.name == defaultResourceGroupTokenName) {\n\t\t\t\t\t\t\tthisToken.value = newResourceGroup\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Resource...\n\t\t\t\t\t\tif (processResourceToken && thisToken.name == defaultResourceNameTokenName) {\n\t\t\t\t\t\t\tthisToken.value = newResource\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Instance...\n\t\t\t\t\t\tif (processInstanceToken && document.getElementById(\"resourcePicker\").value != \"*\" && thisToken.name == defaultInstanceTokenName) {\n\t\t\t\t\t\t\tthisToken.value = newInstance\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\n\t\t\t        // Build the JSON body we'll be posting to update the dashboard data...\n\t\t\t        var dashData = data.data\n\t\t\t        postBody = JSON.stringify({\"groupId\":dashData.groupId, \"widgetsConfig\":dashData.widgetsConfig, \"name\":dashData.name, \"description\":dashData.description, \"sharable\":dashData.sharable, \"owner\":dashData.owner, \"groupName\":dashData.groupName, \"useDynamicWidget\":dashData.useDynamicWidget, \"widgetTokens\":dashData.widgetTokens})\n\n\t\t\t\t\t// Prep details for the call to update the dashboard...\n\t\t\t\t\thttpVerb = \"PUT\"\n\t\t\t\t\tvar epoch = (new Date).getTime()\n\t\t\t\t\tvar resourcePath = \"/dashboard/dashboards/\" + dashboardID\n\t\t\t\t\tvar queryParams = \"\"\n\n\t\t\t\t\t// Construct signature... \n\t\t\t\t\tvar requestVars = httpVerb + epoch + postBody + resourcePath\n\n\t\t\t\t\t// Prep our URL & query for the REST call...\n\t\t\t\t\tvar apiURL = \"https://\" + hostName + \"/santaba/rest\" + resourcePath + queryParams\n\n\t\t\t\t\t// Create our API signature...\n\t\t\t\t\twindow.crypto.subtle.importKey(\n\t\t\t\t\t    \"raw\", // raw format of the key - should be Uint8Array\n\t\t\t\t\t    enc.encode(apiKey),\n\t\t\t\t\t    { // algorithm details\n\t\t\t\t\t        name: \"HMAC\",\n\t\t\t\t\t        hash: {name: \"SHA-256\"}\n\t\t\t\t\t    },\n\t\t\t\t\t    false, // export = false\n\t\t\t\t\t    [\"sign\", \"verify\"] // what this key can do\n\t\t\t\t\t).then( key => {\n\t\t\t\t\t    window.crypto.subtle.sign(\n\t\t\t\t\t        \"HMAC\",\n\t\t\t\t\t        key,\n\t\t\t\t\t        enc.encode(requestVars)\n\t\t\t\t\t    ).then(signature => {\n\t\t\t\t\t        var b = new Uint8Array(signature)\n\t\t\t\t\t        var hmacX = Array.prototype.map.call(b, x => ('00'+x.toString(16)).slice(-2)).join(\"\")\n\t\t\t\t\t        var signature = btoa(hmacX)\n\n\t\t\t\t\t        // Construct auth header...\n\t\t\t\t\t        var auth = \"LMv1 \" + apiID + \":\" + signature + \":\" + epoch\n\n\t\t\t\t\t        // We now have what's needed for LMv1 API Token authentication. Let's make our API call...\n\n\t\t\t\t\t\t\t// Update the dashboard definition via API...\n\t\t\t\t\t\t\tfetch(apiURL, {\n\t\t\t\t\t\t\t\tmethod: httpVerb,\n\t\t\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\t\t'Content-Type': 'application/json; charset=UTF-8',\n\t\t\t\t\t\t\t\t\t'Authorization': auth\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tbody: postBody\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.then(json)\n\t\t\t\t\t\t\t.then(function(data) {\n\t\t\t\t\t\t\t\t// console.log('Update Dashboard request succeeded with JSON response', data)\n\n\t\t\t\t\t\t\t\t// Reload the page to reflect the new token values...\n\t\t\t\t\t\t\t\tparent.location.reload()\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.catch(function(error) {\n\t\t\t\t\t\t\t\tconsole.log('Request failed', error)\n\t\t\t\t\t\t\t})\n\t\t\t\t\t    })\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t    })\n\t\t})\n\t}\n<\/script>"
      }
    },
    {
      "position": {
        "col": 1,
        "sizex": 12,
        "row": 22,
        "sizey": 3
      },
      "config": {
        "displaySettings": {},
        "name": "README",
        "description": "",
        "theme": "newSolidGray",
        "interval": 15,
        "type": "text",
        "timescale": "day",
        "version": 2,
        "content": "<p><span style=\"font-size: 14px;\">There are a few dashboard tokens containing information that the Resource Selector will use:<\/span><\/p>\n\n<p><span style=\"font-size:16.8px;\">Required Tokens:<\/span><\/p>\n\n<ul>\n\t<li><span style=\"font-size: 14px;\">&#39;<strong>defaultResourceGroup<\/strong>&#39;: a common token used by the widgets on the dashboard. The &#39;Resource Group&#39;&nbsp;drop-down&nbsp;menu will update this token upon clicking Go.<\/span><\/li>\n\t<li><span style=\"font-size: 14px;\">&#39;<strong>apiID<\/strong>&#39; &amp; &#39;<strong>apiKey<\/strong>&#39;: a LogicMonitor API ID and secret&nbsp;key used for REST API calls. Note: there&#39;s a place near the top of the Resource Selector&#39;s Javascript source where you can optionally hard-code these two values instead of more openly exposing them in a token.<\/span><\/li>\n<\/ul>\n\n<p><span style=\"font-size:16.8px;\">Optional Tokens:<\/span><\/p>\n\n<ul>\n\t<li><span style=\"font-size: 14px;\">&#39;<strong>defaultResourceName<\/strong>&#39;: (optional) a common token used by widgets on a dashboard for specifying the resource(s) to show data for. The &#39;Resource&#39;&nbsp;drop-down menu will update this token upon clicking Go. If the token isn&#39;t defined then the script will hide the &#39;Resource&#39;&nbsp;menu under the assumption that it&#39;s not being used on this dashboard.<\/span><\/li>\n\t<li><span style=\"font-size: 14px;\">&#39;<strong>defaultInstance<\/strong>&#39;: (optional) Token used by widgets on a dashboard for specifying instances to show data for. The &#39;Instance&#39; drop-down menu will update this token upon clicking Go. Note that if you want to use the &#39;Instances&#39; menu, it requires a named resource and a datasource to fetch instances for. If the &#39;defaultInstance&#39; token or &#39;defaultDatasource&#39; tokens&nbsp;aren&#39;t defined on the dashboard OR the &#39;Resource&#39; menu is set to &quot;*&quot; then the &#39;Instance&#39; menu will be hidden.<\/span><\/li>\n\t<li><span style=\"font-size: 14px;\">&#39;<strong>dynamicGroupParentID<\/strong>&#39;: (optional) The numeric ID of the parent group you want to limit the dynamic group drop-down to. Will default to the root group (ID 1) if not specified.<\/span><\/li>\n\t<li><span style=\"font-size: 14px;\">&#39;<b>defaultDatasource<\/b>&#39;: (optional) Name of a datasource that will be used for gathering instances that dynamically populate the &#39;Instances&#39; drop-down menu.<\/span><\/li>\n\t<li><span style=\"font-size: 14px;\"><strong>&#39;hideDynamicGroupDropdown&#39; <\/strong>or<strong> &#39;hideDynamicResourceDropdown&#39;<\/strong>&nbsp;or <strong>&#39;hideDynamicInstanceDropdown&#39;<\/strong>: (optional) Can be set to &quot;true&quot; to force the &#39;Resource Group&#39;,&nbsp;&#39;Resource&#39;, or &#39;Instance&#39;&nbsp;drop-down (respectively)&nbsp;to be hidden. This allows the widget to be flexible for choosing a group, a resource, an instance, or any of them.<\/span><\/li>\n\t<li><span style=\"font-size: 14px;\"><strong>&#39;groupsCSV&#39;<\/strong>: (optional) A comma-separated list that can be used of dynamic values for the &#39;Resource Group&#39; drop-down. This is useful if you want some wildcard values. Example: &quot;Group1-*,Group2-*&quot;. If given, this value will hide the dynamic resource and instance drop-downs.<\/span><\/li>\n\t<li><span style=\"font-size: 14px;\"><strong>&#39;resourcesCSV&#39;<\/strong>: (optional) A comma-separated list that can be used of dynamic values for the &#39;Resource&#39; drop-down. This is useful if you want some wildcard values. Example: &quot;win-*,citrix-*&quot;.<\/span><\/li>\n<\/ul>\n\n<p><span style=\"font-size: 14px;\"><span style=\"font-size:16.8px;\"><strong>So how does this work?<\/strong><\/span><\/span><\/p>\n\n<p><span style=\"font-size: 14px;\">When the Resource Selector area is first loaded, Javascript embedded in the HTML source makes a call to the LogicMonitor REST API to get a list of resource groups to populate&nbsp;options in the &#39;Resource Group&#39; drop-down. A list of resources within the selected group is then fetched to populate the &#39;Resource&#39; drop-down.<\/span><\/p>\n\n<p><span style=\"font-size: 14px;\">When the &#39;Resource Group&#39; menu is changed (if shown), the &#39;Resource&#39; drop-down list will auto-update to reflect what&#39;s inside the newly chosen group. When the &#39;Resource&#39; menu is changed, the &#39;Instance&#39; drop-down list will auto-populate with a list of instances for the chosen resource for the datasource specified in the &#39;defaultDatasource&#39; token.<\/span><\/p>\n\n<p><span style=\"font-size: 14px;\">When the Go button is clicked, the script does the following actions:<\/span><\/p>\n\n<ol>\n\t<li><span style=\"font-size: 14px;\">Makes note of the current dashboard&#39;s URL and ID.<\/span><\/li>\n\t<li><span style=\"font-size: 14px;\">Calls LogicMonitor&#39;s &quot;Get Dashboard&quot; REST method to get the current dashboard definition.<\/span><\/li>\n\t<li><span style=\"font-size: 14px;\">Updates the &#39;defaultResourceGroup&#39;, &#39;defaultResourceName&#39;, and&nbsp;&#39;defaultInstance&#39; tokens with the values chosen on the drop-downs (unless the respective field was set to be hidden).<\/span><\/li>\n\t<li><span style=\"font-size: 14px;\">Calls the &quot;Update Dashboard&quot; REST method to save the new token values.<\/span><\/li>\n\t<li><span style=\"font-size: 14px;\">Refreshes the page.<\/span><\/li>\n<\/ol>"
      }
    },
    {
      "position": {
        "col": 1,
        "sizex": 6,
        "row": 15,
        "sizey": 3
      },
      "config": {
        "displaySettings": {},
        "name": "Top 10 Virtual Machines by Inbound Network Traffic",
        "description": "",
        "theme": "newBorderGray",
        "interval": 1,
        "graphInfo": {
          "virtualDataPoints": [],
          "minValue": 0,
          "topX": 10,
          "maxValue": "NaN",
          "dataPoints": [{
            "dataPointName": "DataRateRx",
            "instanceName": {
              "isGlob": true,
              "value": "##defaultInstance##*"
            },
            "dataSourceFullName": "VMware VM Interfaces (VMware_vCenter_VMInterface)",
            "consolidateFunction": "average",
            "display": {
              "color": "Auto",
              "legend": "##RESOURCENAME## - ##INSTANCE##",
              "type": "line",
              "option": "custom"
            },
            "name": "DataRateRx",
            "aggregateFunction": "SUM",
            "deviceDisplayName": {
              "isGlob": true,
              "value": "##defaultResourceName##"
            },
            "deviceGroupFullPath": {
              "isGlob": true,
              "value": "##defaultResourceGroup##"
            }
          }],
          "verticalLabel": "kilobytes/sec",
          "aggregate": false,
          "desc": true,
          "scaleUnit": 1000,
          "globalConsolidateFunction": "default"
        },
        "type": "cgraph",
        "timescale": "1day",
        "version": 2
      }
    },
    {
      "position": {
        "col": 7,
        "sizex": 6,
        "row": 15,
        "sizey": 3
      },
      "config": {
        "displaySettings": {},
        "name": "Top 10 Virtual Machines by Outbound Network Traffic",
        "description": "",
        "theme": "newBorderGray",
        "interval": 1,
        "graphInfo": {
          "virtualDataPoints": [],
          "minValue": 0,
          "topX": 10,
          "maxValue": "NaN",
          "dataPoints": [{
            "dataPointName": "DataRateTx",
            "instanceName": {
              "isGlob": true,
              "value": "##defaultInstance##*"
            },
            "dataSourceFullName": "VMware VM Interfaces (VMware_vCenter_VMInterface)",
            "consolidateFunction": "average",
            "display": {
              "color": "Auto",
              "legend": "##RESOURCENAME## - ##INSTANCE##",
              "type": "line",
              "option": "custom"
            },
            "name": "DataRateTx",
            "aggregateFunction": "SUM",
            "deviceDisplayName": {
              "isGlob": true,
              "value": "##defaultResourceName##"
            },
            "deviceGroupFullPath": {
              "isGlob": true,
              "value": "##defaultResourceGroup##"
            }
          }],
          "verticalLabel": "kilobytes/sec",
          "aggregate": false,
          "desc": true,
          "scaleUnit": 1000,
          "globalConsolidateFunction": "default"
        },
        "type": "cgraph",
        "timescale": "1day",
        "version": 2
      }
    },
    {
      "position": {
        "col": 10,
        "sizex": 3,
        "row": 12,
        "sizey": 3
      },
      "config": {
        "displaySettings": {},
        "name": "Oldest Snapshot Age",
        "description": "",
        "theme": "newSolidDarkBlue",
        "interval": 3,
        "graphInfo": {
          "virtualDataPoints": [],
          "minValue": 0,
          "topX": 10,
          "maxValue": "NaN",
          "dataPoints": [{
            "dataPointName": "AgeInHours",
            "instanceName": {
              "isGlob": true,
              "value": "##defaultInstance##"
            },
            "dataSourceFullName": "VMware VM Snapshots (VMware_vCenter_VMSnapshots)",
            "consolidateFunction": "average",
            "display": {
              "color": "Auto",
              "legend": "##RESOURCENAME## - ##INSTANCE##",
              "type": "line",
              "option": "custom"
            },
            "name": "AgeInHours",
            "aggregateFunction": "SUM",
            "deviceDisplayName": {
              "isGlob": true,
              "value": "##defaultResourceName##"
            },
            "deviceGroupFullPath": {
              "isGlob": true,
              "value": "##defaultResourceGroup##"
            }
          }],
          "verticalLabel": "hours",
          "aggregate": false,
          "desc": true,
          "scaleUnit": 1000,
          "globalConsolidateFunction": "default"
        },
        "type": "cgraph",
        "timescale": "1day",
        "version": 2
      }
    }
  ],
  "version": 2
}